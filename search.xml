<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>火车购票系统项目复盘</title>
      <link href="/2023/10/30/%E7%81%AB%E8%BD%A6%E8%B4%AD%E7%A5%A8%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98/"/>
      <url>/2023/10/30/%E7%81%AB%E8%BD%A6%E8%B4%AD%E7%A5%A8%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="百万人抢一万张票如何保证其正常以及稳定性"><a href="#百万人抢一万张票如何保证其正常以及稳定性" class="headerlink" title="百万人抢一万张票如何保证其正常以及稳定性?"></a>百万人抢一万张票如何保证其正常以及稳定性?</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><pre><code>1. 针对静态资源做CDN加速2. 页面静态化3. 倒计时&amp;Loading4. 使用验证码消峰    </code></pre><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><pre><code>1. 微服务-服务拆分2. 负载均衡3. 限流降级4. 缓存5. 令牌6. 异步处理-消息队列</code></pre><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><pre><code>1. 分库：业务分库，读写分离2. 分表：横向分表，纵向分表3. 冗余设计：反范式，空间换时间4. 分布式数据库</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h2><pre><code>1. 分时段秒杀2. 弹性扩容3. 候补+排队</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的两阶段提交</title>
      <link href="/2023/10/30/Mysql%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/"/>
      <url>/2023/10/30/Mysql%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>MySQL 中的事务是两阶段提交，我们见到的很多分布式事务也都是两阶段提交的，例如 Seata，那么为什么要两阶段提交呢？</p><h1 id="1-什么是两阶段提交"><a href="#1-什么是两阶段提交" class="headerlink" title="1.什么是两阶段提交"></a>1.什么是两阶段提交</h1><h2 id="1-1-bin-log和redo-log"><a href="#1-1-bin-log和redo-log" class="headerlink" title="1.1 bin log和redo log"></a>1.1 bin log和redo log</h2><h3 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h3><p>binlog 我们中文一般称作归档日志，如果大家看过松哥之前发的 MySQL 主从搭建，应该对这个日志有印象，当我们搭建 MySQL 主从的时候就离不开 binlog<br>binlog 是 MySQL Server 层的日志，而不是存储引擎自带的日志，它记录了所有的 DDL 和 DML(不包含数据查询语句)语句，而且是以事件形式记录，还包含语句所执行的消耗的时间等，需要注意的是：</p><ul><li>binlog 是一种逻辑日志，他里边所记录的是一条 SQL 语句的原始逻辑，例如给某一个字段 +1，注意这个区别于 redo log 的物理日志（在某个数据页上做了什么修改）。</li><li>binlog 文件写满后，会自动切换到下一个日志文件继续写，而不会覆盖以前的日志，这个也区别于 redo log，redo log 是循环写入的，即后面写入的可能会覆盖前面写入的。</li><li>一般来说，我们在配置 binlog 的时候，可以指定 binlog 文件的有效期，这样在到期后，日志文件会自动删除，这样避免占用较多存储空间。<br>根据 MySQL 官方文档的介绍，开启 binlog 之后，大概会有 1% 的性能损耗，不过这还是可以接受的，一般来说，binlog 有两个重要的使用场景：<br>MySQL 主从复制时：在主机上开启 binlog，主机将 binlog 同步给从机，从机通过 binlog 来同步数据，进而实现主机和从机的数据同步。<br>MySQL 数据恢复，通过使用 mysqlbinlog 工具再结合 binlog 文件，可以将数据恢复到过去的某一时刻。</li></ul><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>前面我们说的 binlog 是 MySQL 自己提供的，在 MySQL 的 server 层，而 redo log 则不是 MySQL 提供的，是存储引擎 InnoDB 自己提供的。所以在 MySQL 中就存在两类日志 binlog 和 redo log，存在两类日志既有历史原因（InnoDB 最早不是 MySQL 官方存储引擎）<br>我们都知道，事务的四大特性里面有一个是持久性，即只要事务提交成功，那么对数据库做的修改就被永久保存下来了，写到磁盘中了，怎么做到的呢？其实我们很容易想到是在每次事务提交的时候，将该事务涉及修改的数据页全部刷新到磁盘中，一旦写到磁盘中，就不怕数据丢失了。<br>但是要是每次都这么搞，数据库就会很慢。因为 Innodb 是以页为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，不仅效率低，也浪费资源。效率低是因为这些数据页在物理上并不连续，将数据页刷到磁盘会涉及到随机 IO。<br>有鉴于此，MySQL 设计了 redo log，在 redo log 中只记录事务对数据页做了哪些修改。那有人说，写 redo log 不就是磁盘 IO 吗？而写数据到磁盘也是磁盘 IO，既然都是磁盘 IO，那干嘛不把直接把数据写到磁盘呢？还费这事！<br>写 redo log 跟写数据有一个很大的差异，那就是<strong>redo log 是顺序 IO，而写数据涉及到随机 IO</strong>，写数据需要寻址，找到对应的位置，然后更新/添加/删除，而写<br>redo log 则是在一个固定的位置循环写入，是顺序 IO，所以速度要高于写数据。</p><p><strong>redo log 本身又分为</strong>：</p><ul><li>日志缓冲（redo log buffer)，该部分日志是易失性的。</li><li>重做日志(redo log file)，这是磁盘上的日志文件，该部分日志是持久的。</li></ul><p>MySQL 每执行一条 DML 语句，先将记录写入 redo log buffer，后续在某个时间点再一次性将多个操作记录写到 redo log file，这种先写日志再写磁盘的技术就是 MySQL 里经常说到的 WAL(Write-Ahead Logging) 技术（预写日志）。</p><h2 id="1-2-两阶段提交"><a href="#1-2-两阶段提交" class="headerlink" title="1.2 两阶段提交"></a>1.2 两阶段提交</h2><p>在 MySQL 中，两阶段提交的主角就是 binlog 和 redolog，我们来看一个两阶段提交的流程图：<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231030105559.png"><br>上图中可以看出，在最后提交事务的时候，有 3 个步骤：</p><ol><li>写入 redo log，处于 prepare 状态。</li><li>写 binlog。</li><li>修改 redo log 状态变为 commit。</li></ol><p>由于 redo log 的提交分为 prepare 和 commit 两个阶段，所以称之为两阶段提交。</p><h1 id="2-为什么需要两阶段提交"><a href="#2-为什么需要两阶段提交" class="headerlink" title="2. 为什么需要两阶段提交"></a>2. 为什么需要两阶段提交</h1><p>如果没有两阶段提交，那么 binlog 和 redolog 的提交，无非就是两种形式：</p><p>先写 binlog 再写 redolog。<br>先写 redolog 再写 binlog。</p><p>这两种情况我们分别来看。<br>假设我们要向表中插入一条记录 R，如果是先写 binlog 再写 redolog，那么假设 binlog 写完后崩溃了，此时 redolog 还没写。那么重启恢复的时候就会出问题：binlog 中已经有 R 的记录了，当从机从主机同步数据的时候或者我们使用 binlog 恢复数据的时候，就会同步到 R 这条记录；但是 redolog 中没有关于 R 的记录，所以崩溃恢复之后，插入 R 记录的这个事务是无效的，即数据库中没有该行记录，这就造成了数据不一致。<br>相反，假设我们要向表中插入一条记录 R，如果是先写 redolog 再写 binlog，那么假设 redolog 写完后崩溃了，此时 binlog 还没写。那么重启恢复的时候也会出问题：redolog 中已经有 R 的记录了，所以崩溃恢复之后，插入 R 记录的这个事务是有效的，通过该记录将数据恢复到数据库中；但是 binlog 中还没有关于 R 的记录，所以当从机从主机同步数据的时候或者我们使用 binlog 恢复数据的时候，就不会同步到 R 这条记录，这就造成了数据不一致。<br>那么按照前面说的两阶段提交就能解决问题吗？<br>我们来看如下三种情况：</p><ul><li><strong>情况一</strong> 一阶段提交之后崩溃了，即写入 redo log，处于 prepare 状态 的时候崩溃了，此时：<br>由于 binlog 还没写，redo log 处于 prepare 状态还没提交，所以崩溃恢复的时候，这个事务会回滚，此时 binlog 还没写，所以也不会传到备库。</li><li><strong>情况二</strong> 假设写完 binlog 之后崩溃了，此时：<br>redolog 中的日志是不完整的，处于 prepare 状态，还没有提交，那么恢复的时候，首先检查 binlog 中的事务是否存在并且完整，如果存在且完整，则直接提交事务，如果不存在或者不完整，则回滚事务。</li><li><strong>情况三</strong> 假设 redolog 处于 commit 状态的时候崩溃了，那么重启后的处理方案同情况二。<br>由此可见，两阶段提交能够确保数据的一致性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redo log </tag>
            
            <tag> bin log </tag>
            
            <tag> 持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM垃圾回收</title>
      <link href="/2023/10/24/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
      <url>/2023/10/24/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-GC-垃圾回收"><a href="#1-GC-垃圾回收" class="headerlink" title="1.GC 垃圾回收"></a>1.GC 垃圾回收</h1><p>GC就是垃圾收集的意思（Gabage Collection）<br>在开发中会创建很多对象，这些对象一股脑的都扔进了堆里，如果这些对象只增加不减少，那么堆空间很快就会被耗尽。所以我们需要把一些没用的对象清理掉。<br>这个时候JVM就提供了垃圾回收机制</p><p>垃圾回收，就是要把那些不再使用的对象找出来然后清理掉，释放其占用的内存空间</p><h1 id="2-判断是否为垃圾对象的两种方式"><a href="#2-判断是否为垃圾对象的两种方式" class="headerlink" title="2.判断是否为垃圾对象的两种方式"></a>2.判断是否为垃圾对象的两种方式</h1><ul><li>引用计数法</li><li>可达性分析法</li></ul><h2 id="2-1-引用计数法"><a href="#2-1-引用计数法" class="headerlink" title="2.1 引用计数法"></a>2.1 引用计数法</h2><p>它的做法是给对象添加一个引用计数器，每当有一个地方引用该对象，这个计数器就加1。当引用失效时，计数器就减1。<strong>如果计数器为0了，说明该对象不再被引用，成为死亡对象</strong>。<br>不过这种算法有一个致命缺点，就是<strong>无法处理对象相互引用的情况</strong>。<br>假如有A、B两个对象，它们互相引用，那么对象中的引用计数器会始终大于0。</p><h2 id="2-2-可达性分析法"><a href="#2-2-可达性分析法" class="headerlink" title="2.2 可达性分析法"></a>2.2 可达性分析法</h2><p>可达性分析法就是目前的<strong>主流算法</strong>，也是java正在使用的算法。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231024074755.png"></p><p>它的做法是，通过一系列被称为“GC Roots”的对象作为起点，从这些起点开始往下搜索，搜索所走过的路径称为引用链（Reference Chain）。当一个对象没有和任何引用链相连，即称为该对象不可达（图论的说法），认为该对象死亡。</p><p><strong>GC Roots根节点</strong>:线程栈的本地变量、静态变量、本地方法栈的变量等</p><ul><li>哪些对象可以做为GC Roots？<br>  有四类对象可作为可达性分析的GC Roots<ol><li>栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI引用的对象<br>GC Roots是所有Java线程中处于活跃状态的栈帧,静态引用等指向GC堆里的对象的引用。换句话说，就是当前所有正在被调用的方法的引用类型的参数/局部变量/临时值。</li></ol></li></ul><h1 id="3-对象引用分类"><a href="#3-对象引用分类" class="headerlink" title="3.对象引用分类"></a>3.对象引用分类</h1><p>对象是否死亡，关键就在于引用。在java中，引用其实有四种：强引用、软引用、弱引用、虚引用。</p><ul><li>强引用<br>  强引用就是我们日常开发中最常见的引用，例如<br>  String str = new String(“hello”);<br>  只要强引用还在，对象就不会被回收。</li><li>软引用<br>  软引用需要专门声明，例如<br>  SoftReference<string> str = new SoftReference<string>(“hello”);<br>  被软引用关联的对象在内存不足时会被回收。<br>  这个特性特别适合用来做缓存。</string></string></li><li>弱引用<br>  弱引用也需要专门声明，例如<br>  WeakReference<string> str = new WeakReference<string>(“hello”);<br>  被弱引用关联的对象每次GC时都会被回收。<br>  弱引用最常见的用途是实现可自动清理的集合或者队列。</string></string></li><li>虚引用<br>  虚引用是最弱的引用，需要用PhantomReference来声明，例如<br>  PhantomReference<string> phantom = new PhantomReference&lt;&gt;(new String(“hello”), new ReferenceQueue&lt;&gt;());<br>  它完全不会影响对象的生存时间，唯一的作用是在对象被回收时发一个系统通知。</string></li></ul><h1 id="4-垃圾回收算法分类"><a href="#4-垃圾回收算法分类" class="headerlink" title="4.垃圾回收算法分类"></a>4.垃圾回收算法分类</h1><p>我们需要了解的垃圾回收算法有以下几种：</p><ul><li>标记-清除算法</li><li>复制算法</li><li>标记-整理算法</li><li>分代回收算法</li></ul><h2 id="4-1-标记-清除算法"><a href="#4-1-标记-清除算法" class="headerlink" title="4.1 标记-清除算法"></a>4.1 标记-清除算法</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231024075742.png"><br>标记-清除算是最基本的回收算法了。它的思想就是先标记，再清除。标记过程如2.4节所述，有两次标记。</p><p>它的主要<strong>缺点</strong>有两个：</p><ul><li>效率不高</li><li>会产生大量内存碎片<br>内存碎片是指内存的空间比较零碎，缺少大段的连续空间。这样假如突然来了一个大对象，会找不到足够大的连续空间来存放，于是不得不再触发一次gc。</li></ul><h2 id="4-2-复制算法"><a href="#4-2-复制算法" class="headerlink" title="4.2 复制算法"></a>4.2 复制算法</h2><p>复制算法的思想是，把内存分成两块，假设分成A、B两个区域吧。<br>每次对象过来之后，都放到A区域里，当A区域满了之后，把存活的对象复制到B区域，然后清空A区域。<br>接下来的对象就全部放到B区域，等B区域满了，就把存活对象复制到A区域，然后清空B区域。<br>就这样来回倒腾，完成垃圾回收。<br>优点是不会有空间碎片，<strong>缺点是每次只用得到一半内存</strong>。</p><p>缺点是在对象存活率较高的场景下（比如老年代那样的环境），需要复制的东西太多，效率会下降。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231024080105.png"></p><h2 id="4-3-标记-整理算法"><a href="#4-3-标记-整理算法" class="headerlink" title="4.3 标记-整理算法"></a>4.3 标记-整理算法</h2><p>标记-整理算法中的“标记”阶段和“标记-清理”中的标记一样。不同的是，死亡对象并不会直接清理，而是把他们在内存中都移动到一起，然后一起清理。</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231024080226.png"></p><h2 id="4-4-分代回收算法"><a href="#4-4-分代回收算法" class="headerlink" title="4.4 分代回收算法"></a>4.4 分代回收算法</h2><p>分代收集算法其实没什么新东西，只是把对象按存活率分块，然后选用合适的收集算法。<br><strong>java中使用的就是分代收集算法</strong><br><strong>存活率低</strong>的对象放在一起，称为<strong>年轻代</strong>，使用<strong>复制算法</strong>来收集。<br><strong>存活率高</strong>的对象放在一起，称为<strong>老年代</strong>，使用<strong>标记-清除或者标记-整理算法</strong>。</p><h1 id="5-内存分配策略"><a href="#5-内存分配策略" class="headerlink" title="5.内存分配策略"></a>5.内存分配策略</h1><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231024081355.png"></p><h2 id="5-1-年轻代的策略"><a href="#5-1-年轻代的策略" class="headerlink" title="5.1 年轻代的策略"></a>5.1 年轻代的策略</h2><p>在年轻代分为三个区域，<strong>Eden区、Survivor1区、Survivor2区</strong>。有时候Survivor1区、Survivor2区又叫from区和to区。<br>对象优先分配到Eden区。Eden区要满的时候，会有一次复制回收，把存活的对象放到Survivor1区。<br>等Eden区再次要满的时候，又会有一次复制回收，把Eden区和Survivor1区的存活对象放到Survivor2区。<br>然后如此循环。</p><h2 id="5-2-大对象的策略"><a href="#5-2-大对象的策略" class="headerlink" title="5.2 大对象的策略"></a>5.2 大对象的策略</h2><p>虚拟机提供了一个-XX:PretenureSizeThreshold参数，大于这个参数的对象会直接进入老年代，防止年轻代发生大量内存复制。</p><h2 id="5-3-晋升策略"><a href="#5-3-晋升策略" class="headerlink" title="5.3 晋升策略"></a>5.3 晋升策略</h2><p>年轻代的对象没熬过一次Minor GC，年龄就加一岁。默认15岁时，就会进入老年代。</p><p>不过这个条件并非绝对，如果Survivor中相同年龄的对象总和大于Survivor空间的一半，那么年龄大于等于该年龄的对象可以直接晋升到老年代</p><h2 id="5-4-空间分配担保"><a href="#5-4-空间分配担保" class="headerlink" title="5.4 空间分配担保"></a>5.4 空间分配担保</h2><p>年轻代在Minor GC后会有对象进入老年代，在极端情况下，年轻代所有对象都存活并进入老年代<br>所以在MinorGC之前，虚拟机会检查老年代的连续内存空间是否大于年轻代所有对象总和<br>如果空间不够，那么这次MinorGC是有风险的<br>如果允许冒险，Minor GC会直接执行，<strong>如果失败，会再发起一次full GC</strong><br>如果不允许冒险，则<strong>先执行一次full GC，再进行Minor GC</strong></p><h1 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h1><ol><li>GC 是什么? 为什么要有 GC?<br>GC就是垃圾回收，释放掉没用的对象占用的空间，保证内存空间不被迅速耗尽。</li><li>简单说一下java的垃圾回收机制。<br>java采用分代回收，分为年轻代、老年代、永久代。年轻代又分为E区、S1区、S2区。<br>到jdk1.8，永久代被元空间取代了。<br>年轻代都使用复制算法，老年代的收集算法看具体用什么收集器。默认是PS收集器，采用标记-整理算法。</li><li>JVM的常见垃圾回收算法有哪些？<br>复制、标记清除、标记整理、分代回收</li><li>为什么要使用分代回收机制？<br>因为没有一种算法能适用所有场合。在对象存活率低的场景下，复制算法最合适。<br>对象存活率高时，标记清除或者标记整理算法最合适。<br>所以才需要分代来处理。</li><li>如何判断一个对象是否存活?<br>现在主流使用的都是可达性分析法。从GC Roots对象计算引用链，能链上的就是存活的。</li><li>如果对象的引用被置为 null，垃圾收集器是否会立即释放对象占用的内存?<br>不会。对象回收需要一个过程，这个过程中对象还能复活。而且垃圾回收具有不确定性，指不定什么时候开始回收</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收 </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务的解决方案</title>
      <link href="/2023/10/15/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2023/10/15/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seata </tag>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探店系统的登录</title>
      <link href="/2023/10/15/%E6%8E%A2%E5%BA%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%99%BB%E5%BD%95/"/>
      <url>/2023/10/15/%E6%8E%A2%E5%BA%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="登录功能实现流程"><a href="#登录功能实现流程" class="headerlink" title="登录功能实现流程"></a>登录功能实现流程</h1><h2 id="基于session实现登录"><a href="#基于session实现登录" class="headerlink" title="基于session实现登录"></a>基于session实现登录</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231015080540.png" alt="流程图"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">sendCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.校验手机号</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RegexUtils</span><span class="token punctuation">.</span><span class="token function">isPhoneInvalid</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 2.如果不符合，返回错误信息</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"手机号格式错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 3.符合，生成验证码</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomNumbers</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.保存验证码到 session</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">LOGIN_CODE_KEY</span> <span class="token operator">+</span> phone<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token constant">LOGIN_CODE_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 5.发送验证码</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"发送短信验证码成功，验证码：{}"</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回ok</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginFormDTO</span> loginForm<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.校验手机号</span>    <span class="token class-name">String</span> phone <span class="token operator">=</span> loginForm<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RegexUtils</span><span class="token punctuation">.</span><span class="token function">isPhoneInvalid</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 2.如果不符合，返回错误信息</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"手机号格式错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 3.从session获取验证码并校验</span>    <span class="token class-name">Object</span> cacheCode <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> code <span class="token operator">=</span> loginForm<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheCode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>cacheCode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 不一致，报错</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 5.判断用户是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 6.不存在，创建新用户并保存</span>        user <span class="token operator">=</span> <span class="token function">createUserWithPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">User</span> <span class="token function">createUserWithPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.创建用户</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token constant">USER_NICK_NAME_PREFIX</span> <span class="token operator">+</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.保存用户</span>    <span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题</strong> 如果业务过多，登录校验会很耗费资源<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231015081833.png"><br><strong>解决方案</strong> 添加拦截器进行统一的登录校验<br>拦截器引申出来的新问题:在拦截之后，如果还需要用户信息应该怎么做?<br>解决方案:将用户的信息通过拦截器保存到ThreadLocal中<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231015082101.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 1.判断是否需要拦截（ThreadLocal中是否有用户）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 没有，需要拦截，设置状态码</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 拦截</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//保存用户到ThreadLocal中</span>        <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 有用户，则放行</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHolder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> tl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">UserDTO</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>        tl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserDTO</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> tl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tl<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 登录拦截器</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>                        <span class="token string">"/shop/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/voucher/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/shop-type/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/upload/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/blog/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/user/code"</span><span class="token punctuation">,</span>                        <span class="token string">"/user/login"</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="session共享问题及替换方案"><a href="#session共享问题及替换方案" class="headerlink" title="session共享问题及替换方案"></a>session共享问题及替换方案</h2><p><code>集群</code>是一种基于分布式系统的架构方式，将若干个计算机节点通过网络连接起来，形成一个具有协同处理能力的整体，可以提高系统的可用性、扩展性以及负载均衡能力<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230504134157.png"></p><h3 id="1-Tomcat集群"><a href="#1-Tomcat集群" class="headerlink" title="1.Tomcat集群"></a>1.Tomcat集群</h3><p>Tomcat集群是一种将多个Tomcat服务器组合起来的技术，以实现高可用性和高性能的需求。它可以在多台服务器上部署同一个应用，将请求分发到不同的服务器上处理，从而提高应用的并发访问能力和吞吐量。</p><p>具体来说，Tomcat集群的作用包括以下几个方面：</p><ul><li><p>提高应用的可用性：当某一台服务器宕机或出现故障时，可以自动将请求转发到其他正常的服务器上处理，保证应用的可用性。</p></li><li><p>增加应用的并发处理能力：通过将同一个应用部署到多台服务器上，并将请求均匀地分配到不同的服务器上处理，可以增加应用的并发处理能力，提高用户的访问响应速度。</p></li><li><p>实现应用的负载均衡：通过在Tomcat服务器之间均衡分配负载，可以避免服务器负载过重，对系统造成的影响。同时也可以通过负载均衡算法来更好地优化系统的资源利用率。</p></li></ul><h3 id="2-session共享问题"><a href="#2-session共享问题" class="headerlink" title="2.session共享问题"></a>2.session共享问题</h3><p>多台Tomcat并不共享session存储空间，当请求切换到不同的Tomcat服务器时会导致数据丢失的问题。<br><code>session</code>的替换方案应该满足:</p><ul><li>数据共享:</li><li>内存存储:</li><li>key，value结构:<br><strong>将数据存储在Redis中替换session存储</strong></li></ul><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230504134414.png"></p><h3 id="3-基于Redis实现共享session登录"><a href="#3-基于Redis实现共享session登录" class="headerlink" title="3.基于Redis实现共享session登录"></a>3.基于Redis实现共享session登录</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230505170135.png"></p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230505170520.png"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> 短信登录 </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring如何解决循环依赖问题</title>
      <link href="/2023/09/24/Spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/09/24/Spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230924164803.png"></p><p>AOP问题，提前AOP解决</p><ul><li>二级缓存 earlySingletonObjects<br>保证不完整的Bean是单例的<br>解决循环依赖问题<br>但无法解决AOP循环依赖问题</li><li>三级缓存 singletonFactories<br>在Bean初始化一开始的时候就将lambda表达式存入三级缓存<br>保存lamada表达式，可以根据lamada表达式判断，bean是否进行AOP<br>如果进行AOP则将代理对象放入二级缓存<br>如果没有进行AOP则将依赖注入过的普通对象放入二级缓存<br>让解决循环依赖的问题变得更加方便</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bean </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> 循环依赖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中Bean的生命周期</title>
      <link href="/2023/09/24/Spring%E4%B8%ADBean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2023/09/24/Spring%E4%B8%ADBean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-Bean的生命周期"><a href="#1-Bean的生命周期" class="headerlink" title="1. Bean的生命周期"></a>1. Bean的生命周期</h1><p>Spring中Bean的生命周期分为两种</p><ul><li>Bean创建的生命周期</li><li>Bean销毁的生命周期</li></ul><h2 id="1-1-Bean的创建生命周期"><a href="#1-1-Bean的创建生命周期" class="headerlink" title="1.1 Bean的创建生命周期"></a>1.1 Bean的创建生命周期</h2><p>要想搞清楚Bean的生命周期，我们首先需要对Bean对象有清晰的了解</p><h3 id="1-Bean对象和普通对象"><a href="#1-Bean对象和普通对象" class="headerlink" title="1. Bean对象和普通对象"></a>1. Bean对象和普通对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从中获取的就是Bean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用new的方式，构建出来的就为普通对象</p><h3 id="2-Bean的创建流程"><a href="#2-Bean的创建流程" class="headerlink" title="2. Bean的创建流程"></a>2. Bean的创建流程</h3><p>我们都知道对象的创建都是依靠构造方法进行创建的，Spring也不例外，所以我们能得出一下流程<br>我们的UserService Bean对象是通过<br><strong>UserService类—-&gt;得到无参构造方法—-&gt;获取到普通对象—-&gt;经过一系列处理—-&gt;Bean对象</strong><br>那么要想知道在普通对象和Bean对象之间，进行了那些操作，我们可以再详细看一看</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//先创建OrderService类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//再创建UserService类</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orderService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//在Test打印输出</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">AnnotationConfigApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为</p><blockquote><p>com.zhn.service.OrderService@647fd8ce<br>null<br>可见，普通对象和Bean对象中，区别就是，属性有没有值<br>也就是说<br>普通对象经过依赖注入后，便可以得到Bean对象</p></blockquote><h3 id="3-Spring如何进行依赖注入"><a href="#3-Spring如何进行依赖注入" class="headerlink" title="3. Spring如何进行依赖注入"></a>3. Spring如何进行依赖注入</h3><p>Spring创建对象后，会扫描该类属性中，有没有@Autowired或者@Resource注解，如果有，spring就会给该属性赋值</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230924113509.png"></p><p>那么是从哪里找呢，实际上，在Spring创建完Bean对象后，都会将它放入使用Map构建的单例池中（<code>Map&lt;beanName,Bean对象&gt;</code>），等到下一次调用会先从该Map池中寻找相应的Bean（<strong>查找方式</strong>：先按照类型匹配Bean，再按照名字寻找Bean），如果有，则会直接拿到使用，如果没有则会重走下面的步骤：<br><strong>UserService类—-&gt;得到无参构造方法—-&gt;获取到普通对象—-&gt;依赖注入—-&gt;????—-&gt;Bean对象—-&gt;放入Map中(Map&lt;beanName,Bean对象)单例池</strong><br>当Bean被放入单例池中以后，才能真正的被称为Bean对象</p><p>代码也可以直接使用该方式，创建Bean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个beanName为xxx的，Object o的Bean对象</p><h3 id="4-底层源码实现"><a href="#4-底层源码实现" class="headerlink" title="4. 底层源码实现"></a>4. 底层源码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> singletonObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Bean name must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>singletonObject<span class="token punctuation">,</span> <span class="token string">"Singleton object must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> oldObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oldObject <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Could not register object ["</span> <span class="token operator">+</span> singletonObject <span class="token operator">+</span><span class="token string">"] under bean name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"': there is already object ["</span> <span class="token operator">+</span> oldObject <span class="token operator">+</span> <span class="token string">"] bound"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//添加Bean</span><span class="token function">addSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> singletonObject<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//将Bean put到Map中</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>registeredSingletons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Map结构</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-Bean中的方法，Spring如何管理"><a href="#5-Bean中的方法，Spring如何管理" class="headerlink" title="5.Bean中的方法，Spring如何管理"></a>5.Bean中的方法，Spring如何管理</h3><p>需要在类中实现InitializingBean这个接口，重写afterPropertiesSet()，则Spring会在Bean初始化完成之前，调用该方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orderService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Spring处理的方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行下面代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">AnnotationConfigApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------分割线------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><blockquote><p>Spring处理的方法执行了<br>com.zhn.service.OrderService@291ae<br>—————分割线——————<br>null<br>可见仍旧只有Bean对象才会执行该方法</p></blockquote><p>那么Bean的创建流程可以完善为<br><strong>UserService类—-&gt;得到无参构造方法—-&gt;获取到普通对象—-&gt;依赖注入—-&gt;afterPropertiesSet()—-&gt;Bean对象—-&gt;放入Map中(Map&lt;beanName,Bean对象)单例池</strong></p><p>那么afterPropertiesSet()过程是如何判断，Bean需不需要执行函数呢？</p><p>使用<strong>bean instance of InitializingBean</strong>,判断是否实现该接口</p><p>如果实现该接口，则对bean进行强制转化，执行afterPropertiesSet()</p><blockquote><p>((InitializingBean)bean).afterPropertiesSet()<br>完成了Bean的初始化</p></blockquote><h3 id="6-Bean初始化后-AOP"><a href="#6-Bean初始化后-AOP" class="headerlink" title="6. Bean初始化后(AOP)"></a>6. Bean初始化后(AOP)</h3><p>Bean的流程完善为<br><strong>UserService类—-&gt;得到无参构造方法—-&gt;获取到普通对象—-&gt;依赖注入—-&gt;afterPropertiesSet()—-&gt;初始化后(AOP)—-&gt;代理对象—-&gt;Bean对象—-&gt;放入Map中(Map&lt;beanName,Bean对象)单例池</strong></p><p>AOP后 Bean对象到底是一个什么对象<br>代理对象？<br>还是Bean的普通对象?</p><p>举例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//被代理对象</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span>  <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orderService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//一般逻辑</span><span class="token comment">//代理对象</span><span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">extends</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//执行切面逻辑</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印出来为null</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//Spring逻辑</span><span class="token comment">//代理对象</span><span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">extends</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span><span class="token class-name">UserService</span> target<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//执行切面逻辑</span><span class="token comment">//target.test()   //Uservice普通对象.test() 打印orderService属性</span><span class="token comment">//可以打印出来值</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>target存放的为依赖注入后的普通对象，orderService有值<br>代理对象UserServiceProxy OrderService无值</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230924125155.png"></p><p>其中由于进行AOP，所以userService拿到的值应该为userService的代理对象<br>代理对象中OrderService值为空<br>点击运行后</p><blockquote><p>zhnBefore<br>com.zhn.service.OrderService@3f1d2e23<br>—————分割线——————<br>OrderService又输出出来了值<br>说明 执行Test方法的为经过依赖注入后的普通对象，<br>AOP执行流程就很清楚了，先是代理对象执行重写的test方法，然后是进行AOP的增强操作，执行结束后，依赖注入后的普通对象再执行自身的test方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bean </tag>
            
            <tag> 生命周期 </tag>
            
            <tag> 依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从输入URL到页面展示到底发生了什么？</title>
      <link href="/2023/09/10/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/2023/09/10/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="从输入URL到页面渲染的过程"><a href="#从输入URL到页面渲染的过程" class="headerlink" title="从输入URL到页面渲染的过程"></a>从输入URL到页面渲染的过程</h1><p>从输入URL到页面渲染需要Chrome浏览器的多个进程配合，所以我们先来谈谈现阶段Chrome浏览器的多进程架构。</p><h1 id="一-Chrome架构"><a href="#一-Chrome架构" class="headerlink" title="一.Chrome架构"></a>一.Chrome架构</h1><p>目前Chrome采用的是多进程的架构模式，可分为主要的五类进程，分别是：浏览器（Browser）主进程、 GPU 进程、网络（NetWork）进程、多个渲染进程和多个插件进程；</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230910231854.png"></p><p><strong>浏览器进程</strong>–主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</p><p><strong>渲染进程</strong>–核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个Tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</p><p><strong>GPU进程</strong>–其实，Chrome刚开始发布的时候是没有GPU进程的。而GPU的使用初衷是为了实现3D CSS的效果，只是随后网页、Chrome的UI界面都选择采用GPU来绘制，这使得GPU成为浏览器普遍的需求。最后，Chrome在其多进程架构上也引入了GPU进程。</p><p><strong>网络进程</strong>–主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</p><p><strong>插件进程</strong>–主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响</p><p>了解了Chrome的多进程架构，就能够从宏观上理解从输入URL到页面渲染的过程了，这个过程主要分为导航阶段和渲染阶段。</p><h1 id="二、导航阶段"><a href="#二、导航阶段" class="headerlink" title="二、导航阶段"></a>二、导航阶段</h1><h2 id="Ⅰ-浏览器主进程"><a href="#Ⅰ-浏览器主进程" class="headerlink" title="Ⅰ.浏览器主进程"></a>Ⅰ.浏览器主进程</h2><h3 id="1-用户输入URL"><a href="#1-用户输入URL" class="headerlink" title="1. 用户输入URL"></a>1. 用户输入URL</h3><ol><li><p>浏览器进程检查url，组装协议，构成完整的url，这时候有两种情况：</p><ul><li><p>输入的是搜索内容：地址栏会使用浏览器默认的搜索引擎，来合成新的带搜索关键字的URL。</p></li><li><p>输入的是请求URL：地址栏会根据规则，给这段内容加上协议，合成为完整的URL；</p></li></ul></li><li><p>浏览器进程通过进程间通信（IPC）把url请求发送给网络进程；</p></li></ol><h2 id="Ⅱ-网络进程"><a href="#Ⅱ-网络进程" class="headerlink" title="Ⅱ.网络进程"></a>Ⅱ.网络进程</h2><h3 id="2-URL请求过程"><a href="#2-URL请求过程" class="headerlink" title="2. URL请求过程"></a>2. URL请求过程</h3><ol start="3"><li>网络进程接收到url请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程；</li></ol><p>这里涉及到浏览器与HTTP协议的缓存策略问题，有兴趣的可以看这篇文章：<a href="https://www.cnblogs.com/AhuntSun-blog/p/12529920.html">https://www.cnblogs.com/AhuntSun-blog/p/12529920.html</a></p><ol start="4"><li><p>准备IP地址和端口：进行DNS解析时先查找缓存，没有再使用DNS服务器解析，查找顺序为：</p><ul><li><p>浏览器缓存；</p></li><li><p>本机缓存；</p></li><li><p><code>hosts</code>文件；</p></li><li><p>路由器缓存；</p></li><li><p><code>ISP DNS</code>缓存；</p></li><li><p><code>DNS</code>递归查询（本地<code>DNS</code>服务器 -&gt; 权限<code>DNS</code>服务器 -&gt; 顶级<code>DNS</code>服务器 -&gt; 13台根<code>DNS</code>服务器）</p></li></ul></li><li><p>等待TCP队列：浏览器会为每个域名最多维护6个TCP连接，如果发起一个HTTP请求时，这 6个 TCP连接都处于忙碌状态，那么这个请求就会处于排队状态；解决方案：</p></li></ol><p>采用域名分片技术：将一个站点的资源放在多个（CDN）域名下面。</p><p>升级为HTTP2，就没有6个TCP连接的限制了；</p><ol start="6"><li><p>通过三次握手建立TCP连接：<br> <img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230910232504.png"></p><ul><li><p><strong>第一次</strong>：客户端先向服务器端发送一个同步数据包，报文的TCP首部中：标志位：同步<code>SYN</code>为1，表示这是一个请求建立连接的数据包；序号<code>Seq=x</code>，x为所传送数据的第一个字节的序号，随后进入<code>SYN-SENT</code>状态；</p><blockquote><p>标志位值为1表示该标志位有效。</p></blockquote></li><li><p><strong>第二次</strong>：服务器根据收到数据包的SYN标志位判断为建立连接的请求，随后返回一个确认数据包，其中标志位<code>SYN=1</code>，<code>ACK=1</code>，序号<code>seq=y</code>，确认号<code>ack=x + 1</code>表示收到了客户端传输过来的x字节数据，并希望下次从x+1个字节开始传，并进入<code>SYN-RCVD</code>状态；</p><blockquote><p>这里要区分标志位ACK和确认号ack；</p></blockquote></li><li><p><strong>第三次</strong>：客户端收到后，再给服务器发送一个确认数据包，标志位ACK=1，序号<code>seq=x+1</code>，确认号<code>ack=y+1</code>，随后进入<code>ESTABLISHED</code>状态；</p><p>  服务器端收到后，也进入<code>ESTABLISHED</code>状态，由此成功建立了<code>TCP</code>连接，可以开始数据传送；</p></li><li><p><strong>为什么要第三次挥手?</strong> 避免服务器等待造成<strong>资源浪费</strong>，具体原因：</p></li><li><blockquote><p>如果没有最后一个数据包确认（第三次握手），A先发出一个建立连接的请求数据包，由于网络原因绕远路了。A经过设定的超时时间后还未收到B的确认数据包。<br>于是发出第二个建立连接的请求数据包，这次网路通畅，B的确认数据包也很快就到达A。于是A与B开始传输数据；<br>过了一会A第一次发出的建立连接的请求数据包到达了B，B以为是再次建立连接，所以又发出一个确认数据包。由于A已经收到了一个确认数据包，所以会忽略B发来的第二个确认数据包，但是B发出确认数据包之后就要一直等待A的回复，而A永远也不会回复。<br>由此造成服务器资源浪费，这种情况多了B计算机可能就停止响应了。</p></blockquote></li></ul></li><li><p>构建并发送<code>HTTP</code>请求信息；</p></li><li><p>服务器端处理请求；</p></li><li><p>客户端处理响应，首先检查服务器响应报文的状态码：</p><ul><li><p>如果是<code>301/302</code>表示服务器已更换域名需要重定向，这时网络进程会从响应头的<code>Location</code>字段里面读取重定向的地址，然后再发起新的<code>HTTP</code>或者<code>HTTPS</code>请求，跳回第4步。</p></li><li><p>如果是<code>200</code>，就检查<code>Content-Type</code>字段，值为<code>text/html</code>说明是HTML文档，是<code>application/octet-stream</code>说明是文件下载；</p></li></ul></li></ol><p>  <img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230910233621.png"></p><ol start="10"><li><p>请求结束，当通用首部字段<code>Conection</code>不是<code>Keep-Alive</code>时，即不为<code>TCP</code>长连接时，通过四次挥手断开<code>TCP</code>连接：<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230910233839.png"></p><ul><li><p>第一次：客户端（主动断开连接）发送数据包给服务器，其中标志位<code>FIN=1</code>，序号位<code>seq=u</code>，并停止发送数据；</p></li><li><p>第二次：服务器收到数据包后，由于还需传输数据，无法立即关闭连接，先返回一个标志位<code>ACK=1</code>，序号<code>seq=v</code>，确认号<code>ack=u+1</code>的数据包；</p></li><li><p>第三次：服务器准备好断开连接后，返回一个数据包，其中标志位<code>FIN=1</code>，标志位<code>ACK=1</code>，序号<code>seq=w</code>，确认号<code>ack=u+1</code>；</p></li><li><p>第四次：客户端收到数据包后，返回一个标志位<code>ACK=1</code>，序号<code>seq=u+1</code>，确认号<code>ack=w+1</code>的数据包。</p></li></ul></li></ol><p>由此通过四次挥手断开TCP连接。</p><blockquote><p>详细过程参见：<a href="https://www.cnblogs.com/AhuntSun-blog/p/12028636.html">https://www.cnblogs.com/AhuntSun-blog/p/12028636.html</a></p></blockquote><ul><li><strong>为什么要四次挥手？</strong> 由于服务器不能马上断开连接，导致<code>FIN</code>释放连接报文与<code>ACK</code>确认接收报文需要分两次传输，即第二次和第三次”挥手”；</li></ul><h3 id="3-准备渲染进程"><a href="#3-准备渲染进程" class="headerlink" title="3. 准备渲染进程"></a>3. 准备渲染进程</h3><ol start="11"><li>准备渲染进程：浏览器进程检查当前<code>url</code>是否与之前打开了渲染进程的页面的根域名相同，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程；</li></ol><h3 id="4-提交文档"><a href="#4-提交文档" class="headerlink" title="4. 提交文档"></a>4. 提交文档</h3><ol start="12"><li><p>提交文档：</p><ul><li><p><code>渲染进程</code>准备好后，<code>浏览器</code>向<code>渲染进程</code>发起“<code>提交文档</code>”的消息，<code>渲染进程</code>接收到消息后与<code>网络进程</code>建立传输数据的“<code>管道</code>”</p></li><li><p><code>渲染进程</code>接收完数据后，向浏览器发送“<code>确认提交</code>”</p></li><li><p><code>浏览器进程</code>接收到确认消息后更新浏览器界面状态：<code>安全状态</code>、地址栏<code>url</code>、<code>前进后退的历史状态</code>、更新<code>web</code>页面</p></li></ul></li></ol><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230910234346.png"></p><h1 id="三、渲染阶段"><a href="#三、渲染阶段" class="headerlink" title="三、渲染阶段"></a>三、渲染阶段</h1><p>在渲染阶段通过渲染流水线在渲染进程的主线程和合成线程配合下，完成页面的渲染；</p><h2 id="Ⅲ-渲染进程"><a href="#Ⅲ-渲染进程" class="headerlink" title="Ⅲ.渲染进程"></a>Ⅲ.渲染进程</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230910234757.png" alt="交互阶段渲染流水线"></p><blockquote><p>渲染进程中的主线程部分</p></blockquote><h3 id="5-构建DOM树"><a href="#5-构建DOM树" class="headerlink" title="5. 构建DOM树"></a>5. 构建DOM树</h3><ol start="13"><li>先将请求回来的数据解压，随后<code>HTML</code>解析器将其中的<code>HTML</code>字节流通过分词器拆分为一个个<code>Token</code>，然后生成节点<code>Node</code>，最后解析成浏览器识别的<code>DOM树</code>结构。</li></ol><p>可以通过Chrome调试工具的<code>Console选项</code>打开控制台输入<code>document</code>查看DOM树；</p><blockquote><p>渲染引擎还有一个安全检查模块叫<code> XSSAuditor</code>，是用来检测词法安全的。在分词器解析出来<code>Token</code>之后，它会检测这些模块是否安全，比如是否引用了外部脚本，是否符合 <code>CSP</code> 规范，是否存在跨站点请求等。如果出现不符合规范的内容，<code>XSSAuditor </code>会对该脚本或者下载任务进行拦截。</p></blockquote><p>首次解析<code>HTML</code>时渲染进程会开启一个预解析线程，遇到<code>HTML</code>文档中内嵌的<code>JavaScript</code>和<code>CSS</code>外部引用就会同步提前下载这些文件，下载时间以最后下载完的文件为准。</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230911090655.png" alt="字节流转换DOM"></p><h3 id="6-构建CSSOM"><a href="#6-构建CSSOM" class="headerlink" title="6. 构建CSSOM"></a>6. 构建CSSOM</h3><ol start="14"><li><p><code>CSS</code>解析器将<code>CSS</code>转换为浏览器能识别的<code>styleSheets</code>也就是<code>CSSOM：</code>可以通过控制台输入<code>document.styleSheets</code>查看；</p><p>这里要考虑一下阻塞的问题，由于<code>JavaScript</code>有修改<code>CSS</code>和<code>HTML</code>的能力，所以，需要先等到<code>CSS</code>文件下载完成并生成 <code>CSSOM</code>，然后再执行<code> JavaScript</code> 脚本，最后再继续构建<code> DOM</code>。由于这种阻塞，导致了解析白屏；</p></li></ol><blockquote><p>优化方案：</p><ol><li>移除js和css的文件下载：通过内联 JavaScript、内联 CSS；</li><li>尽量减少文件大小：如通过 webpack 等工具移除不必要的注释，并压缩 js 文件；</li><li>将不进行DOM操作或CSS样式修改的 JavaScript 标记上 sync 或者 defer异步引入；</li><li>使用媒体查询属性：将大的CSS文件拆分成多个不同用途的 CSS 文件，只有在特定的场景下才会加载特定的 CSS 文件。</li></ol></blockquote><p>可以通过浏览器调试工具的<code>Network</code>面板中的<code>DOMContentLoaded</code>查看最后生成<code>DOM树</code>所需的时间；</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230911091023.png" alt="含JS文件和CSS文件页面的渲染流水线"></p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230911091147.png"></p><h3 id="7-样式计算"><a href="#7-样式计算" class="headerlink" title="7. 样式计算"></a>7. 样式计算</h3><ol start="15"><li><p>转换样式表中的属性值，使其标准化。比如将<code>em</code>转换为<code>px</code>，<code>color</code>转换为<code>rgb</code>；</p></li><li><p>计算<code>DOM树</code>中每个节点的具体样式，这里遵循<code>CSS</code>的继承和层叠规则；可以通过<code>Chrome调试工具</code>的<code>Elements</code>选项的<code>Computed</code>查看某一标签的最终样式；<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230911091344.png"></p></li></ol><h3 id="8-布局阶段"><a href="#8-布局阶段" class="headerlink" title="8. 布局阶段"></a>8. 布局阶段</h3><ol start="17"><li><p>创建布局树，遍历DOM树中的所有节点，去掉所有隐藏的节点（比如head，添加了display:none的节点），只在布局树中保留可见的节点。</p></li><li><p>计算布局树中节点的坐标位置（较复杂，这里不展开）；</p></li></ol><h3 id="9-分层"><a href="#9-分层" class="headerlink" title="9. 分层"></a>9. 分层</h3><ol start="19"><li>对布局树进行分层，并生成分层树（<code>Layer Tree</code>），可以通过<code>Chrome</code>调试工具的<code>Layer</code>选项查看。分层树中每一个节点都直接或间接的属于一个图层（如果一个节点没有对应的层，那么这个节点就从属于父节点的图层）</li></ol><h3 id="10-图层绘制"><a href="#10-图层绘制" class="headerlink" title="10. 图层绘制"></a>10. 图层绘制</h3><ol start="20"><li>为每个图层生成绘制列表（即绘制指令），并将其提交到合成线程。以上操作都是在渲染进程中的主线程中进行的，提交到合成线程后就不阻塞主线程了；</li></ol><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230911091526.png"></p><blockquote><p>渲染进程中的合成线程部分</p></blockquote><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230911091605.png"></p><h3 id="11-切分图块"><a href="#11-切分图块" class="headerlink" title="11. 切分图块"></a>11. 切分图块</h3><ol start="21"><li>合成线程将图层切分成大小固定的图块（256x256或者512x512）然后优先绘制靠近视口的图块，这样就可以大大加速页面的显示速度；<br>Ⅳ.GPU进程</li></ol><h3 id="12-栅格化操作"><a href="#12-栅格化操作" class="headerlink" title="12. 栅格化操作"></a>12. 栅格化操作</h3><ol start="22"><li>在光栅化线程池中将图块转换成位图，通常这个过程都会使用GPU来加速生成，使用GPU生成位图的过程叫快速栅格化，或者GPU栅格化，生成的位图被保存在GPU内存中。</li></ol><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230911091721.png"></p><h2 id="Ⅴ-浏览器主进程"><a href="#Ⅴ-浏览器主进程" class="headerlink" title="Ⅴ.浏览器主进程"></a>Ⅴ.浏览器主进程</h2><h3 id="13-合成与显示"><a href="#13-合成与显示" class="headerlink" title="13. 合成与显示"></a>13. 合成与显示</h3><ol start="23"><li>合成：一旦所有图块都被光栅化，合成线程就会将它们合成为一张图片，并生成一个绘制图块的命令——“<code>DrawQuad</code>”，然后将该命令提交给浏览器进程。</li></ol><blockquote><p>注意了：合成的过程是在渲染进程的合成线程中完成的，不会影响到渲染进程的主线程执行；</p></blockquote><ol start="24"><li>显示：浏览器进程里面有一个叫viz的组件，用来接收合成线程发过来的<code>DrawQuad</code>命令，然后根据<code>DrawQuad</code>命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上。</li></ol><blockquote><p>到这里，经过这一系列的阶段，编写好的<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>等文件，经过浏览器就会显示出漂亮的页面了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Java语言实现的RPC框架</title>
      <link href="/2023/08/09/%E5%9F%BA%E4%BA%8EJava%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84RPC%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/08/09/%E5%9F%BA%E4%BA%8EJava%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84RPC%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-理论篇"><a href="#1-理论篇" class="headerlink" title="1.理论篇"></a>1.理论篇</h1><p><strong><code>概念</code></strong><br><code>RPC</code>:Remote Procedure Call,即远程过程调用<br>是分布式系统常见的一种通信方法,从跨进程到跨物理机已经有几十年历史<br><code>跨进程交互形式</code>:RESTful WebService HTTP 基于DB做数据交换 基于MQ做数据交换 以及RPC<br>图解交互形式<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230809153459.png"><br>现有框架对比<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230809153810.png"><br>核心原理(整体架构)<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230809153920.png"></p><ul><li>Server: Provider,暴露服务,服务提供方</li><li>Client: Consumer,服务消费,调用远程服务</li><li>Registry: 服务注册与发现<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230809154106.png"></li></ul><p><strong>技术栈</strong>:</p><ul><li>基础知识:JavaCore,Maven,反射</li><li>动态代理(生成client存根实际调用对象)<ul><li>Java的动态代理</li></ul></li><li>序列化(Java对象与二进制数据互转)<ul><li>fastjson</li><li>序列号:Java对象转为二进制数组</li><li>反序列化:二进制数组转为Java对象</li></ul></li><li>网络通信(传输序列化后的数据)<ul><li>jetty,URLConnection</li></ul></li></ul><h1 id="2-实战篇"><a href="#2-实战篇" class="headerlink" title="2.实战篇"></a>2.实战篇</h1><h2 id="1-类图"><a href="#1-类图" class="headerlink" title="1.类图"></a>1.类图</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230809154919.png"></p><h2 id="2-创建工程"><a href="#2-创建工程" class="headerlink" title="2.创建工程"></a>2.创建工程</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230809155951.png"><br>引入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.zhn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zhn-RPC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>zhn-rpc-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>zhn-rpc-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>zhn-rpc-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>zhn-rpc-proto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>zhn-rpc-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>zhn-rpc-transport<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons.version</span><span class="token punctuation">&gt;</span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jetty.version</span><span class="token punctuation">&gt;</span></span>9.4.19.v20190610<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jetty.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">&gt;</span></span>1.2.44<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.18.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">&gt;</span></span>1.7.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${commons.version}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.eclipse.jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jetty-servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${jetty.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${fastjson.version}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>${java.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/2023/08/01/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2023/08/01/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="1-消息队列的介绍"><a href="#1-消息队列的介绍" class="headerlink" title="1.消息队列的介绍"></a>1.消息队列的介绍</h2><p><code>消息队列</code>(Message Queue)，字面意思是存放消息的队列,最简单的消息队列模型包括3个角色:</p><ul><li>消息队列: 存储和管理信息，也被称为消息代理(Message Broker)</li><li>生产者: 发送消息到消息队列</li><li>消费者: 从消息队列获取信息并处理消息</li></ul><p>消息队列的主要作用就是 解耦、消峰<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231028183114.png"><br><strong>针对MQ的解耦功能</strong>，这里举一个生活的例子帮助理解:<br>假设我们在网上购买了商品，在开会的时候，快递小哥打电话告知物品已经送到，需要现在立刻去取，只有我们取了快递小哥才会结束他的工作，我们才能收到物品(这个流程才能结束)<br>这个时候，我们只能先和领导打个招呼请假，才能回去签收交接，快递小哥也只能站在原地等待我们回去，整个流程是很不灵活的、很死板，在一次交接完成之前，双方都不能灵活处理其他事情了<br>例子类似于我们在业务流程中基于http/rpc发起的一次同步请求，上游(快递小哥)在发出请求后(打电话)，会阻塞等待下游(作为签收方的我们)给到反馈(完成签收的操作)，否则整个流程会一致阻塞住。<br>然而在实际场景中，还有一个快递的驿站来帮我们作为中转，快递小哥可以先将我们的物品存放在驿站中，登记号接收方的个人信息后，给接收方发完通知短信后，快递小哥就可以先行撤离，忙别的事情，接下来驿站会作为接收方承担起托管物品的职责，我们只需要选择在合适的时间去取就可以了<br>在这个流程下就变得灵活很多，由于有驿站作为中转，使得我们和快递小哥之间的交互流程可以实现<strong>解耦</strong>，在这个<strong>流程中快递小哥就类似于生产者producer，我们作为接收方，类似于消费者consumer，而负责承上启下、托管快递的驿站则是类似于消息队列MQ</strong></p><p>使用MQ的优点:</p><ol><li>有了MQ后，producer不需要过分关心consumer的身份信息，只需要把消息按照指定的协议投递到对应的topic即可</li><li>producer在处理请求时，只需要把消息投递到MQ即可认为流程处理结束，相比于同步请求下游，整个流程会更加轻松灵活，拥有更高的吞吐量</li><li>因为有MQ作为中间层，下游consumer可以设定好合适的消费限流参数，按照指定的速率进行消费，能够在很大程度上对consumer起到保护作用</li></ol><p><strong>针对MQ的消峰功能</strong> 再用同样的例子帮助理解:<br>假设现在正值双十一时期，我们剁手一通买买买，导致同时有大量的快递在同一个时段到达. 这时候，快递超市就为我们起到“削峰”的效果. 不论快递数量的多少，我们不用第一时间立刻进行响应处理，而是能够选择在合适的时间到达快递超市进行取件. 如果快递数量很大，我们一次拿不完的话，我们也可以量力而行，每次只收取一部分，分成多个批次处理.</p><p>这个流程就类似于 MQ 所带来的<strong>消息削峰</strong>的能力. 在实际的生产环境中，倘若上游请求量很大，而下游都需要第一时间进行同步响应的话，这对于下游系统可能产生很大的负荷. 此时如果能<strong>把同步流程转为异步</strong>，把消息放到MQ组件中进行一轮缓冲，让下游可以根据自身的处理能力，按照自己的节奏消化这部分积攒的流量，这对于下游系统来说能起到很好的保护作用.</p><h2 id="2-作为MQ应该具备什么能力"><a href="#2-作为MQ应该具备什么能力" class="headerlink" title="2.作为MQ应该具备什么能力"></a>2.作为MQ应该具备什么能力</h2><h3 id="2-1-消息不丢失"><a href="#2-1-消息不丢失" class="headerlink" title="2.1 消息不丢失"></a>2.1 消息不丢失</h3><ul><li>producer 将 msg 投递到 mq 时不出现丢失</li><li>msg 存放在 mq 时不出现丢失</li><li>consumer 从 mq 消费 msg 时不出现丢失</li></ul><p>针对于上述<strong>第二点</strong>，各 mq 组件在实现上大抵上是<strong>基于数据落盘+数据备份</strong>的方式保证的，而针对于上述的<strong>一、三点</strong>，则是通过两个交互环节中的<strong>ack 机制</strong>保证的. 以 producer 投递 msg 到 mq 的环节为例，只要 mq 没有给到投递成功的 ack 反馈，那么 producer 就应该把本次投递流程视为失败，执行重新投递的操作. consumer 的消费流程同样如此.<br>因此，<strong>mq 交互流程主要通过 ack 机制保证消息投递以及消费环节做到 at least once（至少一次）的语义，然而无法保证消息不重复的问题</strong>. 因此，<strong>处于最下游的消费者 consumer 需要能够具备消息幂等去重的能力，避免流程被重复处理</strong>.<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231028190451.png"></p><h3 id="2-2-支持消息存储"><a href="#2-2-支持消息存储" class="headerlink" title="2.2 支持消息存储"></a>2.2 支持消息存储</h3><p>以我们前面提到的取快递的例子来说，快递超市需要有一个实体店面，店面具有着一定的容量能够存放一定数量的快递. 这样当下游 consumer 没来得及第一时间消费消息时，消息能缓存在 mq 组件中一段时间，让消费方自由选择合适的时间过来进行消费.<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231028190616.png"></p><h2 id="消息流程类型"><a href="#消息流程类型" class="headerlink" title="消息流程类型"></a>消息流程类型</h2><ul><li>push 型：<br>push 型指的是当 producer 将消息投递到 mq 时，由 mq 负责将消息以推送的形式主动发送给各个建立了订阅关系的消费方<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231028190839.png"></li><li>pull 型：<br>pull 型指的是当 mq 中存在消息时，由 consumer 主动执行拉取消息的操作<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231028190904.png"></li></ul><p>关于以上两种 mq 类型的认知：</p><ol><li>对于 push 型</li></ol><ul><li><p>优势</p><ul><li><p>流程实时性比较强，消息来了就执行推送</p></li><li><p>比较契合发布/订阅的模型</p></li></ul></li><li><p>劣势</p><ul><li>对下游 consumer 的保护力度不够. mq 的核心功能是解耦、削峰，本质上是提供了一个缓冲的空间，让 consumer 能根据自己的消费能力在合适的时机进行消息处理. 所以 push 型在这方面体现的优势不够明显，消息到达后就需要向各个 consumer 发起推送. 不过这个问题可以在一定程度上通过消费限流的方式加以弥补.</li></ul></li></ul><ol start="2"><li>对于 pull 型则刚好相反：</li></ol><ul><li><p>优势</p><ul><li>下游握有消费操作的主动权，能选择在合适的时机执行消费操作</li></ul></li><li><p>劣势</p><ul><li>实时性会弱一些，和主动 pull 的轮询机制有关</li></ul></li></ul><h1 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h1><p>基于 redis 实现 mq 存在的一类通用问题：</p><ol><li><p>存储昂贵</p><p> redis 本身是基于内存实现的缓存组件，因此在存储消息时总容量相对有限.</p></li><li><p>数据丢失</p><p> 此外，redis 存储消息时会不可避免地存在数据丢失的风险，可以从两个方面出发考虑：</p><ul><li><p>内存是易失性存储. 即便 redis 中有 rdb/aof 之类的持久化机制加以弥补，但这个持久化流程是异步执行的，无法提供百分百的保证力度</p></li><li><p>redis 走的是 ap 高可用流派，数据的主从复制流程是异步执行的，主从切换时数据存在弱一致问题</p></li></ul></li></ol><p>以上问题，不论是在 redis 缓存数据还是实现 mq 的流程中都是存在的</p><h2 id="Redis提供了三种不同的方式来实现消息队列"><a href="#Redis提供了三种不同的方式来实现消息队列" class="headerlink" title="Redis提供了三种不同的方式来实现消息队列:"></a>Redis提供了三种不同的方式来实现消息队列:</h2><ul><li>list结构: 基于List结构模拟消息队列</li><li>PubSub: 基本的点对点消息模型</li><li>Stream: 比较完善的消息队列模型</li></ul><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801095932.png"></p><h3 id="1-基于List实现消息队列"><a href="#1-基于List实现消息队列" class="headerlink" title="1.基于List实现消息队列"></a>1.基于List实现消息队列</h3><p>Redis的List数据结构是一个双向链表，很容易模拟出队列效果。<br>队列是入口和出口不在一边，因此我们可以利用: LPUSH结合RPOP、或者RPUSH结合LPOP来实现。<br>不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。<br>因此这里应该使用<code>BRPOP</code>或者<code>BLPOP</code>来实现阻塞效果。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20231028191513.png"></p><p>基于List的消息队列有哪些缺点？</p><ul><li><p>优点:</p><ol><li>利用Redis存储，不受限于JVM内存上限</li><li>基于Redis的持久化机制，数据安全性有保证</li><li>可以满足消息有序性</li></ol></li><li><p>缺点:</p><ol><li>无法避免消息丢失</li><li>只支持单消费者</li></ol></li></ul><h3 id="2-基于PubSub的消息队列"><a href="#2-基于PubSub的消息队列" class="headerlink" title="2.基于PubSub的消息队列"></a>2.基于PubSub的消息队列</h3><p><code>PubSub</code>(发布订阅)是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息</p><ul><li>SUBSCRIBE channel:订阅一个或多个频道</li><li>PUBLISH channel msg:向一个频道发送消息</li><li>PSUBSCRIBE pattern:订阅与pattern格式匹配的所有频道</li></ul><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801102738.png"></p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801104553.png"></p><p><code>优缺点:</code><br>优点:</p><ul><li>采用发布订阅模型，支持多生产、多消费<br>缺点:</li><li>不支持数据持久化</li><li>无法避免消息丢失</li><li>消息堆积有上限，超出时数据丢失</li></ul><h3 id="3-基于Stream的消息队列"><a href="#3-基于Stream的消息队列" class="headerlink" title="3.基于Stream的消息队列"></a>3.基于Stream的消息队列</h3><p>Stream是Redis 5.0引入的一种新的数据类型，可以实现一个功能非常完善的消息队列。<br>发送消息的命令:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801105335.png"><br>例如:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801105411.png"></p><h4 id="3-1-XREAD"><a href="#3-1-XREAD" class="headerlink" title="3.1 XREAD"></a>3.1 XREAD</h4><p>读取消息的方式之一:XREAD<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801105708.png"><br>XREAD命令特点:</p><ul><li>消息可回溯</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险</li></ul><h4 id="3-2-消费者组"><a href="#3-2-消费者组" class="headerlink" title="3.2 消费者组"></a>3.2 消费者组</h4><p>**消费者组(Consumer Group):**将多个消费者划分到一个组中，监听同一个队列。具备下列特点:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801111345.png"></p><ol><li>创建消费者组:<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">XGROUP <span class="token keyword">CREATE</span> <span class="token keyword">key</span> groupName ID <span class="token punctuation">[</span>MKSTREAM<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>key:队列名称</li><li>groupName:消费者组名称</li><li>ID:起始ID标示，$代表队列中最后一个消息，0则代表队列中第一个消息</li><li>MKSTREAM:队列不存在时自动创建队列</li></ul><p>其他常见命令:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801111748.png"><br>2. 从消费者组读取消息:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801112026.png"></p><ul><li>group:消费组名称</li><li>consumer:消费者名称，如果消费者不存在，会自动创建一个消费者</li><li>count:本次查询的最大数量</li><li>BLock milliseconds:当没有消息时的最长等待时间</li><li>NOACK:无需手动ACK，获取信息后自动确认</li><li>STRAMS key:指定队列名称</li><li>ID:获取消息的起始ID:<ul><li>“&gt;”:从下一个未消费的消息开始</li><li>其他:根据指定id从pending-list中获取已消费但未确定的消息，例如0，是从pending-list中的第一个消息开始</li></ul></li></ul><p>消费者监听消息的基本思路:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801113336.png"></p><p>XREADGROUP命令特点:</p><ul><li>消息可回溯</li><li>可以多消费者争夺消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><p>整体对比分析<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230801113926.png"></p><table><thead><tr><th align="center">mq 实现方案</th><th align="center">发布/订阅能力</th><th align="center">消费端ACK机制</th><th align="center">消息缓存能力</th><th align="center">数据丢失风险</th></tr></thead><tbody><tr><td align="center">list</td><td align="center">不支持</td><td align="center">不支持</td><td align="center">支持</td><td align="center">低</td></tr><tr><td align="center">pub/sub</td><td align="center">支持</td><td align="center">不支持</td><td align="center">不支持</td><td align="center">高</td></tr><tr><td align="center">streams</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td><td align="center">低</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习总结</title>
      <link href="/2023/07/21/PCCW%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2023/07/21/PCCW%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="新平台XCloud开发学习"><a href="#新平台XCloud开发学习" class="headerlink" title="新平台XCloud开发学习"></a>新平台XCloud开发学习</h1><h2 id="1-简单功能的实现"><a href="#1-简单功能的实现" class="headerlink" title="1.简单功能的实现"></a>1.简单功能的实现</h2><h3 id="1-1-配置系统host"><a href="#1-1-配置系统host" class="headerlink" title="1.1 配置系统host"></a>1.1 配置系统host</h3><p>在虚拟机中配置好了Mysql,Redis的环境,现在需要在本地系统Host文件中加上虚拟机中的ip地址以及相应映射关系，同时也加上vsn-register、vsn-gateway相应的本地映射ip，方便后续调用。</p><ul><li>查找虚拟机对应的ip地址<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722064911.png"><br>文件配置使用的是SwitchHost工具进行配置<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722064738.png"></li></ul><h3 id="1-2-生成微服务"><a href="#1-2-生成微服务" class="headerlink" title="1.2 生成微服务"></a>1.2 生成微服务</h3><p><code>cmd</code>环境下运行<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/2023-07-22%20065632.png" alt="生成微服务脚本"><br>运行结果<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722070129.png"><br>该cd路径下生成了一个基本项目<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722070220.png"><br>项目结构<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/2023-07-22%20070624.png"><br>更改配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6901</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> @artifactId@  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NACOS_HOST<span class="token punctuation">:</span>vsn<span class="token punctuation">-</span>register<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>NACOS_PORT<span class="token punctuation">:</span><span class="token number">8848</span><span class="token punctuation">}</span>        <span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">"VERSION"</span><span class="token punctuation">:</span> <span class="token string">"1.0"</span> <span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> vsn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.discovery.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml        <span class="token key atrule">shared-configs</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> application<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>.$<span class="token punctuation">{</span>spring.cloud.nacos.config.file<span class="token punctuation">-</span>extension<span class="token punctuation">}</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> vsn<span class="token punctuation">-</span>$<span class="token punctuation">{</span>spring.profiles.active<span class="token punctuation">}</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NACOS_USER<span class="token punctuation">:</span>nacos<span class="token punctuation">}</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>NACOS_PWD<span class="token punctuation">:</span>nacos<span class="token punctuation">}</span>    <span class="token key atrule">inetutils</span><span class="token punctuation">:</span>      <span class="token key atrule">preferred-networks</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token number">10.8</span>  <span class="token key atrule">autoconfigure</span><span class="token punctuation">:</span>    <span class="token key atrule">exclude</span><span class="token punctuation">:</span> org.springframework.cloud.gateway.config.GatewayAutoConfiguration<span class="token punctuation">,</span>org.springframework.cloud.gateway.config.GatewayClassPathWarningAutoConfiguration  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> @profiles.active@<span class="token key atrule">xcloud</span><span class="token punctuation">:</span>  <span class="token key atrule">xsequence</span><span class="token punctuation">:</span>    <span class="token key atrule">db</span><span class="token punctuation">:</span>      <span class="token key atrule">retry-times</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">table-name</span><span class="token punctuation">:</span> xcloud_sequence      <span class="token key atrule">step</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">step-start</span><span class="token punctuation">:</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-启动Nacos以及相关服务"><a href="#1-3-启动Nacos以及相关服务" class="headerlink" title="1.3 启动Nacos以及相关服务"></a>1.3 启动Nacos以及相关服务</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722071447.png"></p><p>更改配置文件，略微缩短了等待时间,之前试过全改成2秒,因为服务与服务之间存在相互调用，且不存在心跳机制，当服务未启动完成时另一个服务调用该服务则会出现报错，故更改了又延长了等待时间,确保服务的成功运行</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722071945.png"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722071907.png"></p><p>访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p>在配置列表中</p><ul><li>创建配置<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722072851.png"><br>填写配置内容<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">## spring security config</span><span class="token key atrule">security</span><span class="token punctuation">:</span>  <span class="token key atrule">oauth2</span><span class="token punctuation">:</span>    <span class="token key atrule">client</span><span class="token punctuation">:</span>      <span class="token key atrule">client-id</span><span class="token punctuation">:</span> ENC(ltJPpR50wT0oIY9kfOe1Iw==)      <span class="token key atrule">client-secret</span><span class="token punctuation">:</span> OS0sVWcU12RxLMaa      <span class="token key atrule">scope</span><span class="token punctuation">:</span> server      <span class="token key atrule">ignore-urls</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /druid/<span class="token important">**</span>        <span class="token punctuation">-</span> /actuator/<span class="token important">**</span>        <span class="token punctuation">-</span> /api/<span class="token important">**</span>        <span class="token punctuation">-</span> /v2/api<span class="token punctuation">-</span>docs<span class="token comment"># datasource config</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//vsn<span class="token punctuation">-</span>mysql<span class="token punctuation">:</span>3306/xcloud<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> Pccw1234.      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">32</span>      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">allow</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> /druid/*        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> admin        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> admin      <span class="token key atrule">filter</span><span class="token punctuation">:</span>        <span class="token key atrule">stat</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">log-slow-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">slow-sql-millis</span><span class="token punctuation">:</span> <span class="token number">10000</span>          <span class="token key atrule">merge-sql</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token key atrule">wall</span><span class="token punctuation">:</span>          <span class="token key atrule">config</span><span class="token punctuation">:</span>            <span class="token key atrule">multi-statement-allow</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">druid</span><span class="token punctuation">:</span>        <span class="token key atrule">connectionProperties</span><span class="token punctuation">:</span> druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000        <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>slf4j        <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">maxActive</span><span class="token punctuation">:</span> <span class="token number">32</span>        <span class="token key atrule">maxWait</span><span class="token punctuation">:</span> <span class="token number">60000</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">minEvictableIdleTimeMillis</span><span class="token punctuation">:</span> <span class="token number">300000</span>        <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>          <span class="token key atrule">allow</span><span class="token punctuation">:</span> <span class="token string">''</span>          <span class="token key atrule">reset-enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> /druid/*          <span class="token key atrule">login-username</span><span class="token punctuation">:</span> admin          <span class="token key atrule">login-password</span><span class="token punctuation">:</span> admin        <span class="token key atrule">testOnBorrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token key atrule">testOnReturn</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token key atrule">testWhileIdle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">removeAbandoned</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token key atrule">timeBetweenEvictionRunsMillis</span><span class="token punctuation">:</span> <span class="token number">60000</span>        <span class="token comment">#validationQuery: SELECT 'x'</span>        <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">'*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*'</span>          <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> /*<span class="token comment"># Logger Config</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.pccw.vsn.hello.mapper</span><span class="token punctuation">:</span> debug    <span class="token key atrule">org.apache.ibatis.session</span><span class="token punctuation">:</span> debug<span class="token key atrule">xcloud</span><span class="token punctuation">:</span>  <span class="token key atrule">sql</span><span class="token punctuation">:</span>    <span class="token key atrule">use-camel-case-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">res-upper-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">api-has-pre</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">xxl</span><span class="token punctuation">:</span>  <span class="token key atrule">job</span><span class="token punctuation">:</span>    <span class="token key atrule">executor</span><span class="token punctuation">:</span>      <span class="token key atrule">appName</span><span class="token punctuation">:</span> vsn<span class="token punctuation">-</span>job<span class="token punctuation">-</span>executors<span class="token punctuation">-</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-5-导入完整项目包"><a href="#1-5-导入完整项目包" class="headerlink" title="1.5 导入完整项目包"></a>1.5 导入完整项目包</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722073844.png"><br>导入完整项目包并将新生成的微服务模块导入项目中</p><h3 id="1-4-启动前端项目"><a href="#1-4-启动前端项目" class="headerlink" title="1.4 启动前端项目"></a>1.4 启动前端项目</h3><p>在终端 cd 到 vsn-ui 目录下<br>执行</p><blockquote><p>npm run dev<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722073611.png"></p></blockquote><p>访问 <a href="http://localhost:8081/">http://localhost:8081/</a> 进入前端界面<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722074532.png"></p><h3 id="1-5-设置动态路由"><a href="#1-5-设置动态路由" class="headerlink" title="1.5 设置动态路由"></a>1.5 设置动态路由</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722074340.png"></p><h3 id="1-6-建立业务表"><a href="#1-6-建立业务表" class="headerlink" title="1.6 建立业务表"></a>1.6 建立业务表</h3><p>建立表必须包含以下字段<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722074906.png"><br>设计表<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724093043.png"></p><h3 id="1-7-功能代码生成"><a href="#1-7-功能代码生成" class="headerlink" title="1.7 功能代码生成"></a>1.7 功能代码生成</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722075646.png"><br>填写生成配置<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722075842.png"><br>下载生成代码<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722080002.png"><br>打开代码包<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722080049.png"></p><ol><li>将xcloud目录下的src 目录复制到 微服务biz 目录，覆盖原有src目录</li><li>打开 xcloud-front 打开api，将api下的文件夹 放到 vsn-ui/src/api/vsn  下</li><li>将views目录下的文件夹复制到vsn-ui/src/views/vsn目录下</li><li>将const目录下的js复制到上一步views中index.vue的同级目录</li><li>修改文件引入路径<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230722080518.png"></li></ol><h3 id="1-8-配置菜单及按钮"><a href="#1-8-配置菜单及按钮" class="headerlink" title="1.8 配置菜单及按钮"></a>1.8 配置菜单及按钮</h3><p>权限管理-&gt;菜单管理中，点击新增配置相关信息<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723103751.png"><br>再添加相应功能的按钮<br>其中按钮的权限标示,与前端index.vue中的内容一致</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'permissions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">permissionList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    <span class="token literal-property property">addBtn</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">vaildData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>permissions<span class="token punctuation">.</span>homan_homanovertime_add<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token literal-property property">delBtn</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">vaildData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>permissions<span class="token punctuation">.</span>homan_homanovertime_del<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token literal-property property">editBtn</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">vaildData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>permissions<span class="token punctuation">.</span>homan_homanovertime_edit<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>权限标识不一致时,前端将无法访问到后端程序<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723103845.png"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723103916.png"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723103941.png"><br>下一步在角色管理-&gt;超级用户-&gt;权限，中为菜单按钮分配权限<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723104137.png"><br>重新登录页面,由于数据库中还没有填写信息所以表为空,菜单显示如图<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723111539.png"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723111852.png"><br>在显示和填写中可以看出字段数量比较多不方便观察填写<br>为了简介方便,因为数据库中的7个必须字段是自动创建的，所以先将数据库中的7个必须字段进行隐藏显示,避免输入和查看的繁琐<br>由于申请时得不到主管意见,所以将主观意见字段在填写编辑步骤中进行隐藏。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723111340.png"><br><code>效果如图</code><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723111935.png"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723112004.png"><br>可以看出简洁了很多</p><p><strong>接下来进行按钮的功能测试</strong></p><ol><li><p>新增<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723112525.png"></p><p>添加完成<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723121503.png"><br>查看数据库<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723121559.png"><br>功能完成   </p></li><li><p>编辑<br>点击编辑<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723121722.png"><br>修改完成<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723122259.png"><br>数据库也同步更改完成<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723122404.png"></p></li><li><p>删除<br>点击删除按钮<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723122456.png"><br>点击确定<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723122545.png"><br>删除成功<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230723122627.png"></p></li></ol><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2.流程控制"></a>2.流程控制</h2><h3 id="2-1-设计流程图"><a href="#2-1-设计流程图" class="headerlink" title="2.1 设计流程图"></a>2.1 设计流程图</h3><p>在开发平台中选择流程定义新增流程，设计流程图<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724093632.png"><br>将两个任务框图分配给用户完成<br>用户分为管理员和申请人<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724094011.png"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724094050.png"></p><h3 id="2-2-添加按钮分配权限"><a href="#2-2-添加按钮分配权限" class="headerlink" title="2.2 添加按钮分配权限"></a>2.2 添加按钮分配权限</h3><p>添加申请按钮<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724095202.png"><br>为按钮分配权限<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724095258.png"><br>在前端也加上权限标识，确保二者一一对应<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724095429.png"><br>为首页的js文件添加三个字段，方便观察以及操作流程的进程</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"select"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"工单状态"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"workFlowStatus"</span><span class="token punctuation">,</span>      <span class="token literal-property property">filterable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"流程id"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"workFlowDataId"</span><span class="token punctuation">,</span>      <span class="token literal-property property">hide</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"流程KEY"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"procDefKey"</span><span class="token punctuation">,</span>      <span class="token literal-property property">hide</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-编写界面"><a href="#2-3-编写界面" class="headerlink" title="2.3 编写界面"></a>2.3 编写界面</h3><p>在index.vue界面添加申请按钮</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"menuLeft"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> size<span class="token operator">=</span><span class="token string">"small"</span> icon<span class="token operator">=</span><span class="token string">"el-icon-plus"</span> @click<span class="token operator">=</span><span class="token string">"handleStartProcess({},true)"</span>             v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"permissionList.overtimeApplyBtn"</span><span class="token operator">&gt;</span>申请  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时添加查询组件，方便检索信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>搜索查询组件 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"searchbox"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>query<span class="token operator">-</span>box    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"query-box-layout"</span>    <span class="token operator">:</span>option<span class="token operator">=</span><span class="token string">"tableOption"</span>    @search<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"searchChange"</span>  <span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>query<span class="token operator">-</span>box<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为操作栏添加查看和编辑的功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>button        type<span class="token operator">=</span><span class="token string">"text"</span>        icon<span class="token operator">=</span><span class="token string">"el-icon-edit"</span>        v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"getStates(scope.row) &amp;&amp; permissionList.editBtn"</span>        @click<span class="token operator">=</span><span class="token string">"handleStartProcess(scope.row,true)"</span>      <span class="token operator">&gt;</span>编辑      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button        type<span class="token operator">=</span><span class="token string">"text"</span>        icon<span class="token operator">=</span><span class="token string">"el-icon-view"</span>        v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"!getStates(scope.row)"</span>        @click<span class="token operator">=</span><span class="token string">"handleStartProcess(scope.row,false)"</span>      <span class="token operator">&gt;</span>查看      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在api/vsn-homan/下的js中添加查询函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">homanOvertimeWorkFlowPage</span><span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/vsn-homan/homanovertime/homanovertimeWorkFlowPage'</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    <span class="token literal-property property">params</span><span class="token operator">:</span> query  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在vus scirpe中引入自定义函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>fetchList<span class="token punctuation">,</span> addObj<span class="token punctuation">,</span> putObj<span class="token punctuation">,</span> delObj<span class="token punctuation">,</span>homanOvertimeWorkFlowPage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/vsn/vsn-homan/homanovertime'</span> <span class="token operator">...</span><span class="token operator">...</span>  <span class="token function">getList</span><span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableLoading <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token function">homanOvertimeWorkFlowPage</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token literal-property property">current</span><span class="token operator">:</span> page<span class="token punctuation">.</span>currentPage<span class="token punctuation">,</span>                <span class="token literal-property property">size</span><span class="token operator">:</span> page<span class="token punctuation">.</span>pageSize            <span class="token punctuation">}</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>searchForm <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>records                <span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">.</span>total <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total                <span class="token keyword">this</span><span class="token punctuation">.</span>tableLoading <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>tableLoading<span class="token operator">=</span><span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便查阅,为工单状态更改了显示内容格式,将显示的部分字段进行隐藏显示,调整查询的排序规则</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setColumn</span><span class="token punctuation">(</span>tableOption<span class="token punctuation">,</span><span class="token string">'workFlowStatus'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">dicUrl</span><span class="token operator">:</span> <span class="token string">'/admin/dict/type/WorkflowStatus'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setSearch</span><span class="token punctuation">(</span>tableOption<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'workFlowStatus'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">setSearchSort</span><span class="token punctuation">(</span>tableOption<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'createTime'</span><span class="token punctuation">,</span><span class="token string">'workFlowStatus'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">setHide</span><span class="token punctuation">(</span>tableOption<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'createId'</span><span class="token punctuation">,</span> <span class="token string">'createName'</span><span class="token punctuation">,</span> <span class="token string">'createTime'</span><span class="token punctuation">,</span>  <span class="token string">'updateId'</span><span class="token punctuation">,</span> <span class="token string">'updateName'</span><span class="token punctuation">,</span> <span class="token string">'updateTime'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">setDisplay</span><span class="token punctuation">(</span>tableOption<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'createId'</span><span class="token punctuation">,</span> <span class="token string">'createName'</span><span class="token punctuation">,</span> <span class="token string">'createTime'</span><span class="token punctuation">,</span>  <span class="token string">'updateId'</span><span class="token punctuation">,</span> <span class="token string">'updateName'</span><span class="token punctuation">,</span> <span class="token string">'updateTime'</span><span class="token punctuation">,</span><span class="token string">'opinion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示如图<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724150950.png"><br>大体界面配置完成</p><p>当点击申请后,还需要跳转到一个界面,所以还需要新建一个前端vue和js文件<br>js文件的字段和菜单首页类似，字段为数据库实际字段</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>setDisplay<span class="token punctuation">,</span> setHide<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/pccw/avueUtil'</span><span class="token keyword">const</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> tableOption <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string-property property">"border"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string-property property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string-property property">"indexLabel"</span><span class="token operator">:</span> <span class="token string">"序号"</span><span class="token punctuation">,</span>  <span class="token string-property property">"stripe"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string-property property">"menuAlign"</span><span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>  <span class="token string-property property">"align"</span><span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>  <span class="token string-property property">"searchMenuSpan"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token literal-property property">queryBox</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"addBtn"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"editBtn"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"delBtn"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"submitBtn"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"column"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"id"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"员工ID"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"staffId"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"员工名称"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"staffName"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"datetimerange"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"加班日期"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"overtimeDate"</span><span class="token punctuation">,</span>      <span class="token literal-property property">span</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span>      <span class="token literal-property property">startPlaceholder</span><span class="token operator">:</span> <span class="token string">"开始时间"</span><span class="token punctuation">,</span>      <span class="token literal-property property">endPlaceholder</span><span class="token operator">:</span> <span class="token string">"结束时间"</span><span class="token punctuation">,</span>      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'yyyy-MM-dd HH:mm:ss'</span><span class="token punctuation">,</span>      <span class="token literal-property property">valueFormat</span><span class="token operator">:</span> <span class="token string">'yyyy-MM-dd HH:mm:ss'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"加班原因"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"cause"</span><span class="token punctuation">,</span>      <span class="token literal-property property">span</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span>      <span class="token literal-property property">minRows</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token literal-property property">maxlength</span><span class="token operator">:</span><span class="token number">250</span><span class="token punctuation">,</span>      <span class="token literal-property property">showWordLimit</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"主管意见"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"opinion"</span><span class="token punctuation">,</span>      <span class="token literal-property property">span</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span>      <span class="token literal-property property">minRows</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token literal-property property">maxlength</span><span class="token operator">:</span><span class="token number">250</span><span class="token punctuation">,</span>      <span class="token literal-property property">showWordLimit</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"创建人ID"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"createId"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"创建人名称"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"createName"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"创建时间"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"createTime"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"更新人ID"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"updateId"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"更新人名称"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"updateName"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"更新时间"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"updateTime"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token function">setHide</span><span class="token punctuation">(</span>tableOption<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'createId'</span><span class="token punctuation">,</span> <span class="token string">'createName'</span><span class="token punctuation">,</span> <span class="token string">'createTime'</span><span class="token punctuation">,</span>  <span class="token string">'updateId'</span><span class="token punctuation">,</span> <span class="token string">'updateName'</span><span class="token punctuation">,</span> <span class="token string">'updateTime'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">setDisplay</span><span class="token punctuation">(</span>tableOption<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'createId'</span><span class="token punctuation">,</span> <span class="token string">'createName'</span><span class="token punctuation">,</span> <span class="token string">'createTime'</span><span class="token punctuation">,</span>  <span class="token string">'updateId'</span><span class="token punctuation">,</span> <span class="token string">'updateName'</span><span class="token punctuation">,</span> <span class="token string">'updateTime'</span><span class="token punctuation">,</span><span class="token string">'opinion'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">{</span>tableOption<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setContext</span><span class="token punctuation">(</span><span class="token parameter">that<span class="token punctuation">,</span>form<span class="token punctuation">,</span>columns</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  context<span class="token punctuation">.</span>that <span class="token operator">=</span> that  context<span class="token punctuation">.</span>form <span class="token operator">=</span> form  context<span class="token punctuation">.</span>columns <span class="token operator">=</span> columns<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写vue界面<br>在初始化阶段会根据路由参数设置表单数据<br>主要对于主管意见做了相应的变化，当表单传递到管理员(主管那边)，主观意见则会变成显示，同时禁用加班日期以及加班原因框图，主管只需要做出决策<br>当表单被主管退回给用户，则用户不能修改主管意见</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>tableOption<span class="token punctuation">,</span>setContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./addOvertime_avue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>changeColmnProp<span class="token punctuation">,</span> deepClone<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/utils/util"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>setDisabled<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/utils/pccw/avueUtil"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"addOvertime"</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">oldFieldCode</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">confirmFlag</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">formFlag</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">taskForm</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">taskFormOpen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token literal-property property">tableOption</span><span class="token operator">:</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>tableOption<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token literal-property property">haveNoFlow</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//根据业务自己控制,</span>      <span class="token literal-property property">taskDefKey</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">isEditable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">setContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskForm<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>tableOption<span class="token punctuation">.</span>column<span class="token punctuation">)</span>    <span class="token comment">/*if(this.isVsnAdmin() || this.isAuditor()){      changeColmnProp(this.tableOption, ['belong'], 'display', true)    }*/</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">initParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//初始化获取的参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>taskForm<span class="token punctuation">.</span>taskId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>taskId<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>taskForm<span class="token punctuation">.</span>businessId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>businessId<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>taskForm<span class="token punctuation">.</span>businessKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>businessKey<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>taskForm<span class="token punctuation">.</span>procDefKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>procDefKey<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>taskForm<span class="token punctuation">.</span>deployId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>deployId<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>taskForm<span class="token punctuation">.</span>workflowDataId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>workflowDataId<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isEditable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>editable <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tableOption<span class="token punctuation">,</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>taskFormOpen <span class="token operator">=</span> truea    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">handleSubmit</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">handleTabClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">afterInit</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>formFlag<span class="token operator">=</span><span class="token boolean">false</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>taskDefKey <span class="token operator">===</span> <span class="token string">"TASK_VSN_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">setDisabled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tableOption<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'overtimeDate'</span><span class="token punctuation">,</span><span class="token string">'cause'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token function">changeColmnProp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tableOption<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'opinion'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'display'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"RETURNED"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">changeColmnProp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tableOption<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'opinion'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'display'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>          <span class="token function">changeColmnProp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tableOption<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'opinion'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>taskDefKey <span class="token operator">=</span> data<span class="token punctuation">.</span>taskDefKey        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"afterInit"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"taskForm"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>formFlag<span class="token operator">=</span><span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeSave</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">async</span> <span class="token function">beforeSubmit</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//用的是avue-form,所以应该是里面的validate</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">"form"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">valid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端界面申请界面展示<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724154355.png"></p><p>将新建的两个文件，在workflowFormMapping中进行声明<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724154213.png"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724154242.png"></p><p>然后再实现申请按钮中的handleStartProcess(row, edit)函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">handleStartProcess</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> edit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// alert(row.workFlowDataId)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/flowable/task/record/index/homan_overtime/'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getListRowIdForTab</span><span class="token punctuation">(</span><span class="token string">'homan_overtime'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token literal-property property">procDefKey</span><span class="token operator">:</span> <span class="token string">"homan_overtime"</span><span class="token punctuation">,</span>              <span class="token literal-property property">businessId</span><span class="token operator">:</span> row<span class="token punctuation">.</span>businessId<span class="token punctuation">,</span>              <span class="token literal-property property">businessKey</span><span class="token operator">:</span> row<span class="token punctuation">.</span>businessKey<span class="token punctuation">,</span>              <span class="token literal-property property">workflowDataId</span><span class="token operator">:</span> row<span class="token punctuation">.</span>workFlowDataId<span class="token punctuation">,</span>              <span class="token literal-property property">editable</span><span class="token operator">:</span> edit            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数用于处理开始流程的操作。它接受两个参数 row 和 edit。根据给定的 row 数据和 edit 参数，生成一个包含路径、查询参数等信息的对象，并通过 $router.push 实现页面跳转</p><h3 id="2-4-后端实现"><a href="#2-4-后端实现" class="headerlink" title="2.4 后端实现"></a>2.4 后端实现</h3><p><strong>后端部分</strong></p><p>因为引入了流程控制，所以在后端方面添加一个事件类用于管理业务流程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token class-name">WorkFLowConstants</span><span class="token punctuation">.</span><span class="token constant">PREFIX</span> <span class="token operator">+</span> <span class="token string">"homan_overtime"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OvertimeApplyWorkflowEvent</span> <span class="token keyword">implements</span> <span class="token class-name">IWorkflowEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomanOvertime</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">HomanOvertimeService</span> homanOvertimeService<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">getBussinessData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取业务类型</span><span class="token keyword">return</span> <span class="token class-name">HomanOvertime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">afterEnd</span><span class="token punctuation">(</span><span class="token class-name">WorkflowData</span> flowData<span class="token punctuation">,</span> <span class="token class-name">HomanOvertime</span> bussinessData<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> proVariables<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//流程结束后执行</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"homan加班流程流程结束后执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bussinessData<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>flowData<span class="token punctuation">.</span><span class="token function">getBusinessId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>homanOvertimeService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>bussinessData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">IWorkflowEvent</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterEnd</span><span class="token punctuation">(</span>flowData<span class="token punctuation">,</span>bussinessData<span class="token punctuation">,</span>proVariables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在流程完成后，将加班申请信息储存到数据库中，将数据持久化存储</p><p>在Controller层中实现添加的流程工单查询业务</p><p>由于接受业务多了三个字段，所以需要新建三个多余字段的VO类，使其继承自实体类，用于接收工单信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomanOvertimeWorkFlowVO</span> <span class="token keyword">extends</span> <span class="token class-name">HomanOvertime</span> <span class="token punctuation">{</span>    <span class="token comment">// 流程状态</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> workFlowStatus<span class="token punctuation">;</span>    <span class="token comment">// 流程id</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> workFlowDataId<span class="token punctuation">;</span>    <span class="token comment">// 流程定义KEY</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> procDefKey<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先在service层中新建分页查询业务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HomanOvertimeService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomanOvertime</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomanOvertimeWorkFlowVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHomanOvertimeWorkFlowPage</span><span class="token punctuation">(</span><span class="token class-name">Page</span> page<span class="token punctuation">,</span> <span class="token class-name">HomanOvertimeWorkFlowVO</span> homanOvertimeWorkFlowVO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现该方法</p><p>在Mapper xml中编写sql语句</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pccw.vsn.homan.mapper.HomanOvertimeMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    ......    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>homanOvertimeWorkFlowPage<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pccw.vsn.homan.vo.HomanOvertimeWorkFlowVO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        SELECT        id workFlowDataId,        PROC_DEF_KEY procDefKey,        STATUS workFlowStatus,        INSTANCE_ID instanceId,        UPDATE_TIME updateTime,        replace(FORM_JSON -&gt; '$.staffId','"','') staffId,        replace(FORM_JSON -&gt; '$.staffName','"','') staffName,        replace(FORM_JSON -&gt; '$.overtimeDate','"','') overtimeDate,        replace(FORM_JSON -&gt; '$.cause','"','') cause,        replace(FORM_JSON -&gt; '$.opinion','"','') opinion        FROM        (select wd.WORKFLOW_DATA_ID id, FORM_JSON,PROC_DEF_KEY,STATUS,INSTANCE_ID,UPDATE_TIME from xcd_workflow_data wd join (        SELECT max(WORKFLOW_DATA_ID) WORKFLOW_DATA_ID FROM xcd_workflow_data  where DELETE_FLAG='0' and INSTANCE_ID is not null group by INSTANCE_ID        union all        SELECT WORKFLOW_DATA_ID FROM xcd_workflow_data  where DELETE_FLAG='0' and INSTANCE_ID is null        ) wd1 on wd.WORKFLOW_DATA_ID = wd1.WORKFLOW_DATA_ID ) a        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>            PROC_DEF_KEY = 'homan_overtime'            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query.staffId!=null and query.staffId!='' <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and FORM_JSON -&gt; '$.staffId' LIKE concat('%', #{query.staffId}, '%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query.staffName!=null and query.staffName!='' <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and FORM_JSON -&gt; '$.staffName' LIKE concat('%', #{query.staffName}, '%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query.overtimeDate!=null and query.overtimeDate!='' <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and FORM_JSON -&gt; '$.overtimeDate' LIKE concat('%', #{query.overtimeDate}, '%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query.cause!=null and query.cause!='' <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and FORM_JSON -&gt; '$.cause' LIKE concat('%', #{query.cause}, '%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query.opinion!=null and query.opinion!='' <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and FORM_JSON -&gt; '$.opinion' LIKE concat('%', #{query.opinion}, '%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query.workFlowStatus!=null and query.workFlowStatus!='' <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and STATUS = #{query.workFlowStatus}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query.workFlowDataId!=null and query.workFlowDataId!='' <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and id <span class="token entity named-entity" title="<">&amp;lt;</span><span class="token entity named-entity" title=">">&amp;gt;</span> #{query.workFlowDataId}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>        order by UPDATE_TIME desc    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类中进行调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomanOvertimeServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomanOvertimeMapper</span><span class="token punctuation">,</span> <span class="token class-name">HomanOvertime</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">HomanOvertimeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomanOvertimeWorkFlowVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHomanOvertimeWorkFlowPage</span><span class="token punctuation">(</span><span class="token class-name">Page</span> page<span class="token punctuation">,</span> <span class="token class-name">HomanOvertimeWorkFlowVO</span> homanOvertimeWorkFlowVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getBaseMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">homanOvertimeWorkFlowPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>homanOvertimeWorkFlowVO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Controller中用该服务调用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"加班申请流程工单查询"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"加班申请流程工单查询"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/homanovertimeWorkFlowPage"</span> <span class="token punctuation">)</span>   <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"@pms.hasPermission('homan_homanovertime_apply')"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@SysLog</span><span class="token punctuation">(</span><span class="token string">"请假申请工单查询"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getHomanOvertimeWorkFlowPage</span><span class="token punctuation">(</span><span class="token class-name">Page</span> page<span class="token punctuation">,</span> <span class="token class-name">HomanOvertimeWorkFlowVO</span> homanOvertimeWorkFlowVO<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomanOvertimeWorkFlowVO</span><span class="token punctuation">&gt;</span></span> homanOvertimeWorkFlowPage <span class="token operator">=</span> homanOvertimeService<span class="token punctuation">.</span><span class="token function">getHomanOvertimeWorkFlowPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> homanOvertimeWorkFlowVO<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>homanOvertimeWorkFlowPage<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>功能实现完成</p><h2 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3.定时任务"></a>3.定时任务</h2><h3 id="3-1-启动Xxl-job服务"><a href="#3-1-启动Xxl-job服务" class="headerlink" title="3.1 启动Xxl-job服务"></a>3.1 启动Xxl-job服务</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724161402.png"></p><h3 id="3-2-登录Xxl服务界面"><a href="#3-2-登录Xxl服务界面" class="headerlink" title="3.2 登录Xxl服务界面"></a>3.2 登录Xxl服务界面</h3><p>添加任务<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724161845.png"><br>添加执行器<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724161943.png"></p><h3 id="3-3-后端代码"><a href="#3-3-后端代码" class="headerlink" title="3.3 后端代码"></a>3.3 后端代码</h3><p>在Java主类中添加Xxljob的注解，内容为Appname</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableXcloudSwagger2</span><span class="token annotation punctuation">@SpringCloudApplication</span><span class="token annotation punctuation">@EnableXcloudFeignClients</span><span class="token annotation punctuation">@EnableXcloudResourceServer</span><span class="token annotation punctuation">@EnableXcloudNacosXxlJob</span><span class="token punctuation">(</span>appName <span class="token operator">=</span> <span class="token string">"vsn-job-executors-homan"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VsnHoman</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">VsnHoman</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建定时任务类,同样添加注解，内容为任务分组名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomanJobHandler</span> <span class="token punctuation">{</span><span class="token comment">/** * 定时任务演示 */</span><span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">"overtimeHomanJobHandler"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ReturnT</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">demoHomanJobHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">XxlJobLogger</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"XXL-JOB, Hello World."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"overtimeHomanJobHandler定时任务开始执行&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">ReturnT</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动Java程序，可以看出定时任务执行在本地的端口号为10000上<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724162339.png"><br>执行器的机器地址和该地址对应</p><h3 id="3-4-执行任务"><a href="#3-4-执行任务" class="headerlink" title="3.4 执行任务"></a>3.4 执行任务</h3><p>在界面任务管理中，点击启动任务<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724162800.png"><br>运行成功<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724162841.png"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230724162916.png"></p><h2 id="4-远程调用"><a href="#4-远程调用" class="headerlink" title="4.远程调用"></a>4.远程调用</h2><blockquote><p>使用远程调用实现让数据库表在前端界面显示</p></blockquote><h3 id="4-1-新建远程调用模块"><a href="#4-1-新建远程调用模块" class="headerlink" title="4.1 新建远程调用模块"></a>4.1 新建远程调用模块</h3><p>使用Xcloud生成代码包vsn-feign<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230725103445.png"></p><h3 id="4-2-编写代码"><a href="#4-2-编写代码" class="headerlink" title="4.2 编写代码"></a>4.2 编写代码</h3><p>在vsn-homan中编写服务<br>在vsn-homan-api的feign包下创建接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>contextId <span class="token operator">=</span> <span class="token string">"remoteHomanService"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"vsn-homan-biz"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemoteHomanService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 分页查询     * @param mapParam 参数map     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/homanovertime/remote/page"</span><span class="token punctuation">)</span>    <span class="token class-name">R</span> <span class="token function">getHomanOvertimePage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mapParam<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span><span class="token constant">FROM</span><span class="token punctuation">)</span> <span class="token class-name">String</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PostMapping路径指向biz的Controller下该方法实现的对应路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/homanovertime"</span> <span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"homanovertime"</span><span class="token punctuation">,</span> tags <span class="token operator">=</span> <span class="token string">"加班管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomanOvertimeController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span>  <span class="token class-name">HomanOvertimeService</span> homanOvertimeService<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@Inner</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"分页查询"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"分页查询"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/remote/page"</span> <span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getHomanOvertimePage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mapParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Page</span> page <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>mapParam<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Page</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HomanOvertime</span> homanOvertime <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>mapParam<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"homanOvertime"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">HomanOvertime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>homanOvertimeService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>homanOvertime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-引入依赖配置"><a href="#4-3-引入依赖配置" class="headerlink" title="4.3 引入依赖配置"></a>4.3 引入依赖配置</h3><p>@Inner注解对应Service中的请求头参数@RequestHeader(SecurityConstants.FROM) String from</p><p>完毕后则实现了该功能,接下来在vsn-feign-biz中的Controller层中调用该服务<br>需要在vsn-feign-biz下的pom文件中引入vsn-homan-api的依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.pccw<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>vsn-homan-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还需要在vsn-homan-api中的resource目录下添加<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230725104614.png"></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">com.pccw.xcloud.common.feign.XcloudFeignAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\  com.pccw.vsn.homan.api.feign.RemoteHomanService</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-4-前端显示"><a href="#4-4-前端显示" class="headerlink" title="4.4 前端显示"></a>4.4 前端显示</h3><p>index.vue界面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>fetchList<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/vsn/vsn-feign/homanovertime'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>tableOption<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./homanovertime'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'homanovertime-vsn-feign'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">searchForm</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">tableData</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 总页数</span>        <span class="token literal-property property">currentPage</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 当前页数</span>        <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token comment">// 每页显示多少条</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">tableLoading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token literal-property property">tableOption</span><span class="token operator">:</span> tableOption    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">getList</span><span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tableLoading <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token function">fetchList</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">current</span><span class="token operator">:</span> page<span class="token punctuation">.</span>currentPage<span class="token punctuation">,</span>        <span class="token literal-property property">size</span><span class="token operator">:</span> page<span class="token punctuation">.</span>pageSize      <span class="token punctuation">}</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>searchForm <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>records        <span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">.</span>total <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total        <span class="token keyword">this</span><span class="token punctuation">.</span>tableLoading <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableLoading<span class="token operator">=</span><span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">sizeChange</span><span class="token punctuation">(</span><span class="token parameter">pageSize</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">currentChange</span><span class="token punctuation">(</span><span class="token parameter">current</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">.</span>currentPage <span class="token operator">=</span> current    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">searchChange</span><span class="token punctuation">(</span><span class="token parameter">form<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>searchForm <span class="token operator">=</span> form      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">,</span> form<span class="token punctuation">)</span>      <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">refreshChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置数据库显示字段</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> tableOption <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string-property property">"border"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string-property property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string-property property">"indexLabel"</span><span class="token operator">:</span> <span class="token string">"序号"</span><span class="token punctuation">,</span>  <span class="token string-property property">"stripe"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string-property property">"menuAlign"</span><span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>  <span class="token string-property property">"align"</span><span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>  <span class="token string-property property">"searchMenuSpan"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token string-property property">"addBtn"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"editBtn"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"delBtn"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">menu</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string-property property">"column"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"id"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"员工ID"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"staffId"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"员工名称"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"staffName"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"加班日期"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"overtimeDate"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"加班原因"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"cause"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"主管意见"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"opinion"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"创建人ID"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"createId"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"创建人名称"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"createName"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"创建时间"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"createTime"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"更新人ID"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"updateId"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"更新人名称"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"updateName"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>      <span class="token string-property property">"label"</span><span class="token operator">:</span> <span class="token string">"更新时间"</span><span class="token punctuation">,</span>      <span class="token string-property property">"prop"</span><span class="token operator">:</span> <span class="token string">"updateTime"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在api中编写请求路径</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchList</span><span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/vsn-feign/homanovertime/page'</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    <span class="token literal-property property">params</span><span class="token operator">:</span> query  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230725105113.png"><br>显示成功</p><h2 id="5-总结分析"><a href="#5-总结分析" class="headerlink" title="5.总结分析"></a>5.总结分析</h2><p>接触新框架的时间不算很长，但收获颇多<br>第一次接触到了微服务开发还有远程调用的相关思想，很惊讶接口可以通过远程调用服务进行实现，也了解了在开发中的数据库、业务模块、类名包名、服务名，注解等，都有自己的一套命名规范，也体会到了命名的不一致会导致的麻烦事，需要一行一行的肉眼检查，耗时耗力<br>在开发中也遇到了很多的错误，举例说明:</p><ol><li>版本不一致<br>同是jdk1.8，correct和open jdk两者也会有所差异，导致一个可以正常启动一个不可以正常启动</li><li>环境变量<br>环境变量有时候会有缓存，当配置好环境变量后，在命令行查看path的内容，发现还是改变之前的内容，需要重启电脑才能完全更改</li><li>Url错误<br>在最开始生成微服务包时，一直报url的问题，最后解决方式是在，系统参数里面加上了 –vsn-spring.profiles.active=test 解决了问题</li><li>命令行过长<br>在运行程序时，会报命令行太长的错误，解决方式是在编译设置面更改参数<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230725112244.png"></li><li>前端模板不存在<br>在flowable下的js中，添加配置中单词字母少写了一个，识别不到文件<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230725112601.png"></li><li>后端sql错误<br>也是书写问题，在mapper中少写了一个逗号，导致语句识别错误<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230725112806.png"></li><li>定时任务执行器识别不到机器地址<br>当运行后，在控制台中寻找Xxl-job运行的端口号，将执行器的机器地址改为手动，将该地址填入，解决问题</li></ol><blockquote><p>在开发中遇见的错误不止这么点错误，但是大部分错误都是源自不细心导致，命名的不规范、大小写没有检查出来、忘写、漏写、多写导致的，还有一些是函数自动补齐成和自己想要调动的另一个相似的方法，导致功能错误，这都是由于不够细心导致的，因为想要开发快，但却导致纠错时间拉长，反而变得慢，这是后续应该改进的，以后会更加的细心，希望以后可以少犯低级错误，提高自己的学习工作效率</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCCW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务学习</title>
      <link href="/2023/07/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/07/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁</title>
      <link href="/2023/06/05/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2023/06/05/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230605121144.png"></p><h2 id="1-什么是分布式锁"><a href="#1-什么是分布式锁" class="headerlink" title="1.什么是分布式锁"></a>1.什么是分布式锁</h2><p><code>分布式锁</code>:满足分布式系统或集群模式下多线程可见并且互斥的锁。</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230605121458.png"></p><h2 id="2-分布式锁的实现"><a href="#2-分布式锁的实现" class="headerlink" title="2.分布式锁的实现"></a>2.分布式锁的实现</h2><p>分布式锁的核心是实现多线程之间的互斥,而满足这一点的方式有很多,常见的有三种:</p><table><thead><tr><th align="center"></th><th align="center">Mysql</th><th align="center">Redis</th><th align="center">Zookeeper</th></tr></thead><tbody><tr><td align="center">互斥</td><td align="center">利用mysql本身互斥锁机制</td><td align="center">利用setnx这样的互斥命令</td><td align="center">利用节点的唯一性和有序性实现互斥</td></tr><tr><td align="center">高可用</td><td align="center">好</td><td align="center">好</td><td align="center">好</td></tr><tr><td align="center">高性能</td><td align="center">一般</td><td align="center">好</td><td align="center">一般</td></tr><tr><td align="center">安全性</td><td align="center">断开连接，自动释放锁</td><td align="center">利用锁超时的时间，到期释放</td><td align="center">临时节点，断开连接自动释放</td></tr></tbody></table><p>实现 <code>分布式锁</code>时需要实现的两个基本方法:</p><ul><li>获取锁:<ul><li>互斥:确保只能有一个线程获取锁<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 添加锁，利用setnx的互斥特性</span>SETNX <span class="token keyword">lock</span> thread1<span class="token comment"># 添加锁过期时间，避免服务宕机引起的死锁现象</span>EXPIRE <span class="token keyword">lock</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 改善应该放在一起写，分开写的话在  SETNX lock thread1执行后， EXPIRE lock 10执行前，如果服务器发生宕机，lock将无法释放  # 添加锁，NX是互斥，EX是设置过期时间  SET lock thread1 NX EX 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>释放锁:<ul><li>手动释放</li><li>超时释放: 获取锁时添加一个超时时间<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 释放锁，删除即可</span>DEL <span class="token keyword">key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230628162943.png" alt="流程图"></li></ul></li></ul><h3 id="2-1-Redis实现分布式锁的初级版本"><a href="#2-1-Redis实现分布式锁的初级版本" class="headerlink" title="2.1 Redis实现分布式锁的初级版本"></a>2.1 Redis实现分布式锁的初级版本</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILock</span><span class="token punctuation">{</span>    <span class="token comment">//尝试获取锁</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeoutSec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放锁</span>    <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口的实现</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zhn<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleRedisLock</span> <span class="token keyword">implements</span> <span class="token class-name">ILock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token comment">//定义业务名称</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEY_PREFIX</span> <span class="token operator">=</span> <span class="token string">"lock:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SimpleRedisLock</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stringRedisTemplate <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">KEY_PREFIX</span><span class="token operator">+</span>name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeoutSec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> threadId <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> success <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">,</span> timeoutSec<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//防止自动拆箱产生空指针风险</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Redis实现分布式锁的误删-锁-问题"><a href="#2-2-Redis实现分布式锁的误删-锁-问题" class="headerlink" title="2.2 Redis实现分布式锁的误删(锁)问题"></a>2.2 Redis实现分布式锁的误删(锁)问题</h3><h4 id="2-2-1-误删问题1"><a href="#2-2-1-误删问题1" class="headerlink" title="2.2.1 误删问题1"></a>2.2.1 误删问题1</h4><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230703164335.png" alt="误删(锁)问题"></p><p>**问题产生原因:**业务阻塞超过锁的超时时间导致锁提前释放，业务执行完释放的锁不是自己线程的锁，造成误删锁</p><p><strong>改进分布式锁:</strong><br>需求 :修改之前的分布式锁实现</p><p>解决思路:</p><ol><li>在获取锁时存入线程标示(可以用UUID表示)</li><li>在释放锁的时候先获取锁中的线程标示,判断是否与当前线程标示一致<ul><li>如果一致则释放锁</li><li>如果不一致则不释放锁<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230703164801.png" alt="解决思路"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230703164900.png" alt="流程图"></li></ul></li></ol><h4 id="2-2-1-误删问题2-原子性问题"><a href="#2-2-1-误删问题2-原子性问题" class="headerlink" title="2.2.1 误删问题2(原子性问题)"></a>2.2.1 误删问题2(原子性问题)</h4><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230703172409.png"></p><p>线程1判断锁的标识符一致后，由于JVM的垃圾回收机制，导致业务阻塞，当阻塞时间超过了锁的超时释放时间，会产生误删(锁)现象</p><p><strong>实现原子性方案</strong>:<br><code>Redis的lua脚本:</code><br>Redis提供了Lua脚本功能,在一个脚本中编写多条Redis命令,确保多条命令的原子性.Lua是一种编程语言，参考网站<img src="https://www.runoob.com/lua/lua-tutorial.html" alt="Lua教程"><br>这里重点介绍Redis提供的调用函数,语法如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 执行redis命令redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token char">'命令名称'</span><span class="token punctuation">,</span><span class="token char">'key'</span><span class="token punctuation">,</span><span class="token char">'其他参数'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>```java例如，当执行set name jack，则脚本是这样的<span class="token operator">:</span>```javaredis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token char">'set'</span><span class="token punctuation">,</span><span class="token char">'name'</span><span class="token punctuation">,</span><span class="token char">'jack'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如,我们要先执行set name Rose,再执行get name,则脚本如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//先执行 set name jack</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token char">'set'</span><span class="token punctuation">,</span><span class="token char">'name'</span><span class="token punctuation">,</span><span class="token char">'jack'</span><span class="token punctuation">)</span>local name <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token char">'get'</span><span class="token punctuation">,</span><span class="token char">'name'</span><span class="token punctuation">)</span><span class="token keyword">return</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写好脚本后，需要使用redis命令来调用脚本，调用脚本的常用命令如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> help <span class="token annotation punctuation">@scripting</span>  <span class="token constant">EVAL</span> script numkeys key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> arg <span class="token punctuation">[</span>arg <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  summary<span class="token operator">:</span> <span class="token class-name">Execute</span> a <span class="token class-name">Lua</span> script server side  since<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.0</span>  <span class="token constant">EVALSHA</span> sha1 numkeys key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> arg <span class="token punctuation">[</span>arg <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  summary<span class="token operator">:</span> <span class="token class-name">Execute</span> a <span class="token class-name">Lua</span> script server side  since<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.0</span>  <span class="token constant">SCRIPT</span> <span class="token constant">DEBUG</span> <span class="token constant">YES</span><span class="token operator">|</span><span class="token constant">SYNC</span><span class="token operator">|</span><span class="token constant">NO</span>  summary<span class="token operator">:</span> <span class="token class-name">Set</span> the debug mode <span class="token keyword">for</span> executed scripts<span class="token punctuation">.</span>  since<span class="token operator">:</span> <span class="token number">3.2</span><span class="token number">.0</span>  <span class="token constant">SCRIPT</span> <span class="token constant">EXISTS</span> sha1 <span class="token punctuation">[</span>sha1 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  summary<span class="token operator">:</span> <span class="token class-name">Check</span> existence of scripts in the script cache<span class="token punctuation">.</span>  since<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.0</span>  <span class="token constant">SCRIPT</span> <span class="token constant">FLUSH</span> <span class="token punctuation">[</span><span class="token constant">ASYNC</span><span class="token operator">|</span><span class="token constant">SYNC</span><span class="token punctuation">]</span>  summary<span class="token operator">:</span> <span class="token class-name">Remove</span> all the scripts from the script cache<span class="token punctuation">.</span>  since<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.0</span>  <span class="token constant">SCRIPT</span> <span class="token constant">KILL</span> <span class="token operator">-</span>  summary<span class="token operator">:</span> <span class="token class-name">Kill</span> the script currently in execution<span class="token punctuation">.</span>  since<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.0</span>  <span class="token constant">SCRIPT</span> <span class="token constant">LOAD</span> script  summary<span class="token operator">:</span> <span class="token class-name">Load</span> the specified <span class="token class-name">Lua</span> script into the script cache<span class="token punctuation">.</span>  since<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如，我们要执行redis.call(‘set’,’name’,’jack’)这个脚本,语法如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> eval <span class="token string">"return redis.call('set','name','jack')"</span> <span class="token number">0</span><span class="token constant">OK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果脚本中的key，value不想写死，可以作为参数传递。key类型参数会放入KEYS数组，其他参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组获取这些参数<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230703175406.png"></p><p><strong>释放锁的业务流程是这样的:</strong></p><ol><li>获取锁中的线程标示</li><li>判断是否与指示的标示(当前线程标示)一致</li><li>如果一致则释放锁(删除)</li><li>如果不一致则什么都不做</li></ol><h5 id="Lua改进分布式方案"><a href="#Lua改进分布式方案" class="headerlink" title="Lua改进分布式方案"></a>Lua改进分布式方案</h5><p>RedisTemplate调用Lua脚本的API如下:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230703180152.png"></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 比较线程标示与锁中的标示是否一致</span><span class="token keyword">if</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span>  ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">-- 释放锁 del key</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token constant">UNLOCK_SCRIPT</span><span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">{</span>       <span class="token constant">UNLOCK_SCRIPT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token constant">UNLOCK_SCRIPT</span><span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"unlock.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token constant">UNLOCK_SCRIPT</span><span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token constant">UNLOCK_SCRIPT</span><span class="token punctuation">,</span>               <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token constant">ID_PREFIX</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-基于Redis的分布式锁优化"><a href="#2-3-基于Redis的分布式锁优化" class="headerlink" title="2.3 基于Redis的分布式锁优化"></a>2.3 基于Redis的分布式锁优化</h3><p>基于setnx实现的分布式锁存在下面的问题:</p><ol><li>不可重入<ul><li>同一个线程无法多次获取同一把锁</li></ul></li><li>不可重试<ul><li>获取锁只尝试一次就返回false，没有重试机制</li></ul></li><li>超时释放<ul><li>锁超时释放虽然可以避免死锁，但如果业务执行耗时较长，也会导致锁被释放，存在安全隐患</li></ul></li><li>主从一致性<ul><li>如果Redis提供了主从集群，主从同步存在延迟，当主宕机时，如果从并同步主中的锁数据，则会出现锁实现</li></ul></li></ol><h4 id="2-3-1-Redisson"><a href="#2-3-1-Redisson" class="headerlink" title="2.3.1 Redisson"></a>2.3.1 Redisson</h4><p>Redisson是一个在Redis的基础上实现的Java驻内数据网络。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。<br><a href="https://github.com/redisson/redisson">点击跳转</a>Redisson Github地址</p><ol><li>引入依赖:<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--redisson--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.13.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>配置Redisson客户端<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.6.129:6379"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"101011"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用Redisson的分布式锁<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span> <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"lock:order:"</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取锁</span>        <span class="token keyword">boolean</span> isLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isLock<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//获取锁失败，返回错误信息或重试</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"不允许重复下单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//获取代理对象（事务）</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">IVoucherOrderService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IVoucherOrderService</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">//释放锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-3-2-Redisson可重入锁原理"><a href="#2-3-2-Redisson可重入锁原理" class="headerlink" title="2.3.2 Redisson可重入锁原理"></a>2.3.2 Redisson可重入锁原理</h4><p><code>概述</code>:<br><strong>什么是 “可重入”</strong>，可重入就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230714171005.png" alt="可重入锁原理"><br>利用Hash结构，记录线程标识，和获取锁的次数，引入了一个计数器；<br>方法A里面调方法B,A、B都要同一把锁，A一拿到锁，计数器+1 ，B拿到锁，计数器也+1，B执行完逻辑，计数器-1；A当业务执行完成之后，计数器-1，最后判断计数器的数是否为0,为0 ,说明所有业务执行完成，最后释放锁；<br>由于代码逻辑复杂，为了保证原子性，所以最后用<code>lua脚本</code>编写</p><p><code>总结</code></p><ol><li>可重入：基于Hash结构，hash里field存储线程标识threaId，value存储重入次数，每一次获取锁的时候，先判断锁是否存在，不存在直接获取锁，如果存在，不代表获取锁失败了，再去判断线程的标识是不是当前线程threaId，是当前线程，可以再次获取，重入次数+1,释放锁的时候重入次数-1，直到重入次数为0,所有业务结束，再真正释放锁；实现锁的可重入，类似jdk的ReetrantLock;</li><li>可重试：利用信号量和消息订阅Pubsub机制，如果第一次获取锁失败，不是立即失败，而是等待释放锁的消息，获取锁成功的线程释放锁的时候会发送消息，从而被捕获到；当线程得到消息时，就可以重新获取锁，如此反复；超过了等待时间，就不会重试了；由于使用了等待、唤醒这样的方案，cpu的性能也不会过多的消耗；</li><li>锁超时释放：基于看门狗机制，获取锁成功之后开启一个定时 任务，每隔一段时间重置超时时间；</li></ol><h4 id="2-3-3-Redisson如何解决主从一致性问题"><a href="#2-3-3-Redisson如何解决主从一致性问题" class="headerlink" title="2.3.3 Redisson如何解决主从一致性问题"></a>2.3.3 Redisson如何解决主从一致性问题</h4><p>利用MultiLock —-联锁；<br>1、redis主从一致性发生的原因：Redis主节点处理写操作，从节点处理读操作，主从节点需要进行数据的同步，但是因为主从不在一个机器，同步会有延时，如果主节点突然故障了，同步没有完成，redis就会从从节点选出一个新的主节点，但由于主节点的锁没有及时同步，所以新的主节点没有锁，此时其他线程来获取锁也能成功，引发线程安全问题；<br>2、必须依次向redis多个节点都获取锁，全部获取了才算成功<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230714173348.png"><br><code>总结</code><br>①不可重入Redis 分布式锁<br>原理：利用 setnx 的互斥性；利用 ex 避免死锁；释放锁时判断线程标示<br>缺陷：不可重入、无法重试、锁超时失效</p><p>②可重入的 Redis 分布式锁<br>原理：利用 hash 结构，记录线程标示和重入次数；利用 watchDog 延续锁时间；利用信号量控制锁重试等待<br>缺陷：Redis 宕机引起锁失效问题</p><p>③Redisson 的 multiLock连锁<br>原理：多个独立的 Redis 节点，必须在所有节点都获取重入锁，才算获取锁成功<br>缺陷：运维成本高、实现复杂</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Redisson </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优惠券秒杀</title>
      <link href="/2023/05/30/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80/"/>
      <url>/2023/05/30/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h1><h2 id="1-全局唯一ID"><a href="#1-全局唯一ID" class="headerlink" title="1.全局唯一ID"></a>1.全局唯一ID</h2><h3 id="1-1-全局ID生成器"><a href="#1-1-全局ID生成器" class="headerlink" title="1.1 全局ID生成器"></a>1.1 全局ID生成器</h3><p>每个店铺都可以发布优惠券<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230530161515.png"><br>当用户抢购时,就会生成订单并保存到tb_voucher_order这张表中,而订单表如果使用数据库自增ID就存在一些问题:</p><ul><li>id的规律太明显</li><li>受单表数据量的限制</li></ul><p><code>全局ID生成器</code>,是一种在分布式系统下用来生成全局唯一ID的工具,一般需要满足以下特性<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230530161858.png"><br>为了增加ID的安全性,我们可以不直接使用Redis自增的数值,而是拼接一些其他信息:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230530162325.png"><br>ID的组成部分:</p><ul><li>符号位:1bit,永远为0</li><li>时间戳:31bit,以秒为单位,可以使用69年</li><li>序列号:32bit,秒内的计数器,支持每秒产生2^32个不同的ID</li></ul><h3 id="1-2-全局ID生成器（代码实现）"><a href="#1-2-全局ID生成器（代码实现）" class="headerlink" title="1.2 全局ID生成器（代码实现）"></a>1.2 全局ID生成器（代码实现）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisIdWorker</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">BEGIN_TIMESTAMP</span> <span class="token operator">=</span> <span class="token number">1672531200L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">COUNT_BITS</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyPrefix<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.生成时间戳</span>        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> nowSecond <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> nowSecond<span class="token operator">-</span><span class="token constant">BEGIN_TIMESTAMP</span><span class="token punctuation">;</span>        <span class="token comment">//2.生成序列号</span>        <span class="token comment">//2.1获取当前日期，精确到天</span>        <span class="token class-name">String</span> date <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy:MM:dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.2自增长</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">"icr:"</span> <span class="token operator">+</span> keyPrefix <span class="token operator">+</span> <span class="token string">":"</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.拼接并返回</span>        <span class="token keyword">return</span> timestamp <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span> <span class="token operator">|</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-Redis自增ID策略"><a href="#1-3-Redis自增ID策略" class="headerlink" title="1.3 Redis自增ID策略"></a>1.3 Redis自增ID策略</h3><ul><li>每天一个key,方便统计订单量</li><li>ID构造是 时间戳+计时器</li></ul><h2 id="2-添加优惠券"><a href="#2-添加优惠券" class="headerlink" title="2.添加优惠券"></a>2.添加优惠券</h2><p>每个店铺都可以发布优惠券,分为平价券和特价券。平价券可以任意购买,特价券需要秒杀抢购:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230530165634.png"><br>表关系如下:</p><ul><li>tb_voucher:优惠券的基本信息,优惠金额、使用规则等</li><li>tb_seckill_voucher:优惠券的库存、开始抢购时间、结束抢购时间。特价优惠券才需要填写这些信息<br><code>数据库</code>创建:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230530170137.png" alt="平价券"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230530170038.png" alt="特价券"></li></ul><p>Controller层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">addVoucher</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Voucher</span> voucher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    voucherService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>voucher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>voucher<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tb_voucher"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voucher</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 主键     */</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 商铺id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> shopId<span class="token punctuation">;</span>    <span class="token comment">/**     * 代金券标题     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token comment">/**     * 副标题     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> subTitle<span class="token punctuation">;</span>    <span class="token comment">/**     * 使用规则     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> rules<span class="token punctuation">;</span>    <span class="token comment">/**     * 支付金额     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> payValue<span class="token punctuation">;</span>    <span class="token comment">/**     * 抵扣金额     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> actualValue<span class="token punctuation">;</span>    <span class="token comment">/**     * 优惠券类型     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> type<span class="token punctuation">;</span>    <span class="token comment">/**     * 优惠券类型     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token comment">/**     * 库存     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> stock<span class="token punctuation">;</span>    <span class="token comment">/**     * 生效时间     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> beginTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 失效时间     */</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> endTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postman测试<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230530171643.png"></p><h2 id="3-实现秒杀下单"><a href="#3-实现秒杀下单" class="headerlink" title="3.实现秒杀下单"></a>3.实现秒杀下单</h2><ul><li>秒杀是否开始或结束,如果尚未开始或已经结束则无法下单</li><li>库存是否充足,不足则无法下单<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230530172301.png"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoucherOrderServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VoucherOrderMapper</span><span class="token punctuation">,</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IVoucherOrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">ISeckillVoucherService</span> seckillVoucherService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">RedisIdWorker</span> redisIdWorker<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">seckillVoucher</span><span class="token punctuation">(</span><span class="token class-name">Long</span> voucherId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.查询优惠券</span>        <span class="token class-name">SeckillVoucher</span> voucher <span class="token operator">=</span> seckillVoucherService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.判断秒杀是否开始</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> voucher<span class="token punctuation">.</span><span class="token function">getBeginTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"秒杀尚未开始!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//3.判断秒杀是否结束</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> voucher<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"秒杀已经结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//4.判断库存是否充足</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>voucher<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"库存不足!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//5.扣减库存</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> seckillVoucherService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"stock = stock -1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//扣减失败</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"库存不足!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//6.创建订单</span>        <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.1 订单id</span>        <span class="token keyword">long</span> orderId <span class="token operator">=</span> redisIdWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        voucherOrder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.2 用户id</span>        <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        voucherOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.3 代金券id</span>        voucherOrder<span class="token punctuation">.</span><span class="token function">setVoucherId</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">save</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-库存超卖问题"><a href="#4-库存超卖问题" class="headerlink" title="4.库存超卖问题"></a>4.库存超卖问题</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603122155.png"><br><code>超卖</code>现象:在线程1扣减库存操作之前，有无数个线程来进行查询，查询到的还是扣减之前的操作，会产生库存为负的情况</p><h3 id="4-1-解决方案"><a href="#4-1-解决方案" class="headerlink" title="4.1 解决方案"></a>4.1 解决方案</h3><p>超卖问题是典型的多线程安全问题，针对这一问题的常见问题就加锁;<br><strong>两种锁:</strong></p><ul><li>悲观锁:<br>认为线程安全问题一定会发生，因此在操作数据之前先获取锁，确保线程串行执行.<ul><li>例如:Sysnchronized,Lock都属于悲观锁</li></ul></li><li>乐观锁:<br>认为线程安全问题不一定会发生,因此不加锁,只是在更新数据时去判断有没有其他线程对数据做了修改的。<ul><li>如果没有修改则认为是安全的,自己才更新数据。</li><li>如果已经被其他线程修改说明发生了安全问题,此时可以重试或异常。</li></ul></li></ul><p><code>乐观锁</code>的关键就是判断之前查询的数据是否有被修改过,常见的方式有两种:</p><ul><li>版本号法:<br>  <img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603123545.png" alt="数据结构"><br>  <img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603123502.png" alt="流程图"></li><li>CAS法:(先比较再SET)<br>  <img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603124044.png" alt="数据结构"><br>  <img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603124029.png" alt="流程图"></li></ul><p>总结:\</p><ol><li>悲观锁: 添加同步锁，让线程串行执行</li></ol><ul><li>优点: 简单粗暴</li><li>缺点: 性能一般</li></ul><ol start="2"><li>乐观锁: 不加锁，在更新时判断是否有其他线程在修改</li></ol><ul><li>优点: 性能好</li><li>缺点: 存在成功率低的问题</li></ul><h2 id="5-一人一单"><a href="#5-一人一单" class="headerlink" title="5. 一人一单"></a>5. 一人一单</h2><p>需求: 修改秒杀业务,要求同一个优惠券,一个用户只能下一单<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603131032.png" alt="流程图"><br>悲观锁(synchronized)实现:</p><h3 id="5-1-方式一-synchronized方法"><a href="#5-1-方式一-synchronized方法" class="headerlink" title="5.1 方式一(synchronized方法)"></a>5.1 方式一(synchronized方法)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Result</span> <span class="token function">createVoucherOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span> voucherId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//6.一人一单</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6.1 查询订单</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6.2 判断是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//用户已经购买过</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"用户已经购买过一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//5.扣减库存</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> seckillVoucherService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"stock = stock -1"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"stock"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//扣减失败</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"库存不足!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//7.创建订单</span>    <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.1 订单id</span>    <span class="token keyword">long</span> orderId <span class="token operator">=</span> redisIdWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.2 用户id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.3 代金券id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setVoucherId</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">save</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将synchronized加载到方法的声明中,synchronized默认使用this添加锁,会导致任何用户来了都会加锁,导致整个方法变成串行执行,使得性能变差,目的只需要给同一个用户加锁，解决同一个用户的并发问题，则引申出第二种加锁的方式优化。</p><h3 id="5-1-方式二-synchronized关键字-方法内部"><a href="#5-1-方式二-synchronized关键字-方法内部" class="headerlink" title="5.1 方式二(synchronized关键字-方法内部)"></a>5.1 方式二(synchronized关键字-方法内部)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">createVoucherOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span> voucherId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//6.一人一单</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//6.1 查询订单</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.2 判断是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//用户已经购买过</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"用户已经购买过一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//5.扣减库存</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> seckillVoucherService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"stock = stock -1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"stock"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//扣减失败</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"库存不足!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//7.创建订单</span>        <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7.1 订单id</span>        <span class="token keyword">long</span> orderId <span class="token operator">=</span> redisIdWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        voucherOrder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7.2 用户id</span>        voucherOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7.3 代金券id</span>        voucherOrder<span class="token punctuation">.</span><span class="token function">setVoucherId</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">save</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法内部加锁，先释放锁才会提交事务;因为事务是由Spring管理的，执行过程是在方法执行完成以后才由Spring做的提交，当锁释放以后，未提交事务之前，会有其他的线程进入，如果此时查询订单可能会出现并发安全问题。</p><p><code>补充</code>:</p><blockquote><p>userId.toString().intern()</p></blockquote><blockquote><p>intern() 方法返回字符串对象的规范化表示形式。</p></blockquote><blockquote><p>它遵循以下规则：对于任意两个字符串 s 和 t，当且仅当 s.equals(t) 为 true 时，s.intern() == t.intern() 才为 true。</p></blockquote><blockquote><p>取自常量池可以保证锁获取的用户是唯一的</p></blockquote><h3 id="5-1-方式三-synchronized关键字-引入函数外侧"><a href="#5-1-方式三-synchronized关键字-引入函数外侧" class="headerlink" title="5.1 方式三(synchronized关键字-引入函数外侧)"></a>5.1 方式三(synchronized关键字-引入函数外侧)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">seckillVoucher</span><span class="token punctuation">(</span><span class="token class-name">Long</span> voucherId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//1.查询优惠券</span>    <span class="token class-name">SeckillVoucher</span> voucher <span class="token operator">=</span> seckillVoucherService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.判断秒杀是否开始</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> voucher<span class="token punctuation">.</span><span class="token function">getBeginTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"秒杀尚未开始!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//3.判断秒杀是否结束</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> voucher<span class="token punctuation">.</span><span class="token function">getEndTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"秒杀已经结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//4.判断库存是否充足</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>voucher<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"库存不足!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取代理对象（事务）</span>        <span class="token class-name">IVoucherOrderService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IVoucherOrderService</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">createVoucherOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span> voucherId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//6.一人一单</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6.1 查询订单</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6.2 判断是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//用户已经购买过</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"用户已经购买过一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//5.扣减库存</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> seckillVoucherService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">"stock = stock -1"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"voucher_id"</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"stock"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//扣减失败</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"库存不足!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//7.创建订单</span>    <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.1 订单id</span>    <span class="token keyword">long</span> orderId <span class="token operator">=</span> redisIdWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.2 用户id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.3 代金券id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setVoucherId</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">save</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始方法:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">//获取代理对象（事务）</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用会有事务失效问题,Spring事务生效是因为对当前类使用了动态代理，拿到了当前类的代理对象，使用代理对象做了事务代理。而现在使用的是非代理对象(目标对象)，是没有事务功能的</p><p><code>解决方案:</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">//获取代理对象（事务）</span>          <span class="token class-name">IVoucherOrderService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IVoucherOrderService</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-一人一单的并发安全问题"><a href="#6-一人一单的并发安全问题" class="headerlink" title="6. 一人一单的并发安全问题"></a>6. 一人一单的并发安全问题</h2><p>通过加锁可以解决在单机情况下的一人一单安全问题,但是在集群模式下就不行了。</p><ol><li>我们将服务启动分为两部分，端口号分别为8081和8082<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603184949.png"></li><li>然后修改nginx的conf目录下的nginx.conf文件,配置反向代理和负载平衡<br>现在，用户请求会在这个节点上负载均衡，再次测试下是否存在线程安全问题。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603185014.png"></li></ol><p>同一个用户通过两个服务器访问同一家店铺的同一个优惠券，发现都请求成功，一个用户购买到了两个优惠券，说明锁没有锁住。</p><h3 id="6-1-问题产生原因"><a href="#6-1-问题产生原因" class="headerlink" title="6.1 问题产生原因"></a>6.1 问题产生原因</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230603190136.png"><br>在集群模式下或分布式系统下，有多个jvm的存在，每个jvm下都有自己的锁，导致每一个锁都可以有一个线程获取，于是就会出现并行运行，可能会出现安全问题<br><code>解决方案</code>:让多个jvm使用同一把锁(跨jvm锁-分布式锁)</p><h1 id="优惠券秒杀优化"><a href="#优惠券秒杀优化" class="headerlink" title="优惠券秒杀优化"></a>优惠券秒杀优化</h1>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 乐观锁 </tag>
            
            <tag> 悲观锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存</title>
      <link href="/2023/05/09/%E7%BC%93%E5%AD%98/"/>
      <url>/2023/05/09/%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="1-什么是缓存"><a href="#1-什么是缓存" class="headerlink" title="1.什么是缓存"></a>1.什么是缓存</h2><p><code>缓存</code>就是数据交换的缓冲区(称作Cache),是存储数据的临时地方,一般读写性能较高。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230509120201.png"><br><strong>缓存的作用:</strong></p><ul><li>降低后端负载</li><li>提高读写效率，降低响应时间</li></ul><p><strong>缓存和成本</strong></p><ul><li>数据一致性成本</li><li>代码维护成本</li><li>运维成本</li></ul><h2 id="2-添加Redis缓存"><a href="#2-添加Redis缓存" class="headerlink" title="2.添加Redis缓存"></a>2.添加Redis缓存</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230509121226.png" alt="缓存作用模型"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230509121442.png" alt="根据id查询商铺缓存的流程"><br>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShopServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShopMapper</span><span class="token punctuation">,</span> <span class="token class-name">Shop</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IShopService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>        <span class="token comment">//1.从redis查询商铺缓存</span>        <span class="token class-name">String</span> shopJson <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.判断是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//3.存在，直接返回</span>            <span class="token class-name">Shop</span> shop <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">,</span> <span class="token class-name">Shop</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//4.不存在，根据id查询数据库</span>        <span class="token class-name">Shop</span> shop <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.不存在，返回错误</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>shop <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"店铺不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//6.存在，写入redis中</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7.返回</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-缓存的更新策略"><a href="#3-缓存的更新策略" class="headerlink" title="3.缓存的更新策略"></a>3.缓存的更新策略</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230511194423.png"></p><h3 id="3-1-业务场景"><a href="#3-1-业务场景" class="headerlink" title="3.1 业务场景:"></a>3.1 业务场景:</h3><ul><li>低一致性需求:使用内存淘汰机制。例如店铺类型的查询缓存</li><li>高一致性需求:主动更新,并以超时剔除作为兜底方案。例如店铺详情查询的缓存</li></ul><p><code>redis内存淘汰策略</code>，具体如下：</p><ol><li>no-envicition：</li></ol><ul><li>该策略对于写请求不再提供服务，会直接返回错误，当然排除del等特殊操作，redis默认是no-envicition策略。</li></ul><ol start="2"><li>allkeys-random：</li></ol><ul><li>从redis中随机选取key进行淘汰</li></ul><ol start="3"><li>allkeys-lru：</li></ol><ul><li>使用LRU（Least Recently Used，最近最少使用）算法，从redis中选取使用最少的key进行淘汰</li></ul><ol start="4"><li>volatile-random：</li></ol><ul><li>从redis中设置过过期时间的key，进行随机淘汰</li></ul><ol start="5"><li>volatile-ttl：</li></ol><ul><li>从redis中选取即将过期的key，进行淘汰</li></ul><ol start="6"><li>volatile-lru：</li></ol><ul><li>使用LRU（Least Recently Used，最近最少使用）算法，从redis中设置过过期时间的key中，选取最少使用的进行淘汰</li></ul><ol start="7"><li>volatile-lfu:</li></ol><ul><li>使用LFU（Least Frequently Used，最不经常使用），从设置了过期时间的键中选择某段时间之内使用频次最小的键值对清除掉</li></ul><ol start="8"><li>allkeys-lfu:</li></ol><h3 id="3-2-主动更新策略（三种）"><a href="#3-2-主动更新策略（三种）" class="headerlink" title="3.2 主动更新策略（三种）"></a>3.2 主动更新策略（三种）</h3><ol><li><p>由缓存的调用者，在更新数据的同时更新缓存(<code>胜出</code>)</p></li><li><p>缓存和数据库整合为一个服务，由服务来维护一致性。调用者调用该服务，无需关心缓存一致性问题。</p></li><li><p>调用者只操作缓存，由其他线程异步的将缓存数据持久化到数据库，保证最终一致。</p></li></ol><p><strong>操作缓存和数据库有三个问题需要考虑:</strong></p><ol><li>删除缓存还是更新缓存?<ul><li>更新缓存:每次更新数据库都更新缓存，无效写操作较多</li><li>删除缓存:更新数据库时让缓存失败，查询时再更新缓存(<code>正确</code>)</li></ul></li><li>如何保证缓存与数据库的操作的同时成功或失败?<ul><li>单体系统，将缓存与数据库操作放在一个事务</li><li>分布式系统，利用TCC等分布式事物方案</li></ul></li><li>先操作缓存还是数据库?<ul><li>先删除缓存，再操作数据库<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513111927.png" alt="正常情况"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513112133.png" alt="异常情况"><br>在更新数据库未完成时，Redis查询到数据库更新前的旧值，将其写入Redis，写入完成后，数据库的值才更新完毕，会导致Redis存储的<code>缓存</code>与数据库中的数据不一致的异常情况。</li><li>先操作数据库，再删除缓存(<code>正确</code>)<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513112600.png" alt="正常情况"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513112937.png" alt="异常情况(异常机率相较于第一种方式较小)"></li></ul></li></ol><h2 id="4-缓存穿透"><a href="#4-缓存穿透" class="headerlink" title="4.缓存穿透"></a>4.缓存穿透</h2><p><code>缓存穿透</code>是指客户端请求的数据在缓存中和数据库中都不存在,这样缓存永远不会生效,这些请求都会打到数据库中<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513124629.png" alt="缓存穿透"></p><h3 id="4-1-解决方案"><a href="#4-1-解决方案" class="headerlink" title="4.1 解决方案"></a>4.1 解决方案</h3><p>常见的<code>解决方案</code>有两种:</p><ol><li>缓存空对象:</li></ol><ul><li>优点:实现简单,维护方便</li><li>缺点:<ul><li>额外的内存消耗 (设置TTL缓解)</li><li>可能造成短期的不一致——当给数据库天添加该id的数据时，缓存中的TTL还未过期，用户查询到的依旧是缓存中的空数据(可以通过给数据库新增该数据时，用该数据覆盖缓存中的数据解决)</li></ul></li></ul><ol start="2"><li>布隆过滤<ul><li>优点: 内存占用少,没有多余的key</li><li>缺点：<ul><li>实现复杂</li><li>存在误判的可能<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513123653.png" alt="解决方案"></li></ul></li></ul></li></ol><h3 id="4-2-缓存空对象解决方案的业务实现"><a href="#4-2-缓存空对象解决方案的业务实现" class="headerlink" title="4.2 缓存空对象解决方案的业务实现"></a>4.2 缓存空对象解决方案的业务实现</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513150340.png" alt="实现流程图"><br><code>代码实现</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token comment">//1.从redis查询商铺缓存</span>    <span class="token class-name">String</span> shopJson <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.判断是否存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//3.存在，直接返回</span>        <span class="token class-name">Shop</span> shop <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>shopJson<span class="token punctuation">,</span> <span class="token class-name">Shop</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//为防止缓存穿透，判断是否命中空值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shopJson<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//不为NULL则为空字符串</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"店铺信息不存在!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//4.不存在，根据id查询数据库</span>    <span class="token class-name">Shop</span> shop <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.不存在，返回错误</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>shop <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//防止缓存穿透将空值写入Redis</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token constant">CACHE_NULL_TTL</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"店铺不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//6.存在，写入redis中</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">CACHE_SHOP_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.返回</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-缓存雪崩"><a href="#5-缓存雪崩" class="headerlink" title="5.缓存雪崩"></a>5.缓存雪崩</h2><p><code>缓存雪崩</code>是指在同一时段内大量的缓存key同时失效或者Redis服务宕机,导致大量的请求到达数据库,带来巨大压力<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513152730.png" alt="key失效"><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513152843.png" alt="Redis宕机"></p><h3 id="5-1-解决方案"><a href="#5-1-解决方案" class="headerlink" title="5.1 解决方案"></a>5.1 解决方案</h3><ul><li>给不同的key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h2 id="6-缓存击穿"><a href="#6-缓存击穿" class="headerlink" title="6.缓存击穿"></a>6.缓存击穿</h2><p><code>缓存击穿问题</code>也叫热点key问题,就是一个<code>被高并发访问</code>并且<code>缓存重建业务较复杂</code>的key突然失效了,无数的请求访问会在瞬间给数据库带来巨大的冲击。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513161441.png"></p><h3 id="6-1-解决方案"><a href="#6-1-解决方案" class="headerlink" title="6.1 解决方案"></a>6.1 解决方案</h3><ol><li>互斥锁<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513161822.png" alt="互斥锁"></li></ol><ul><li>优点:<ul><li>没有额外内存消耗</li><li>保证一致性</li><li>实现简单</li></ul></li><li>缺点:<ul><li>线程需要等待,性能受影响</li><li>可能有死锁的风险</li></ul></li></ul><ol start="2"><li>逻辑过期<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230513162115.png" alt="逻辑过期"></li></ol><ul><li>优点:<ul><li>线程无需等待,性能较好</li></ul></li><li>缺点:<ul><li>不保证一致性</li><li>有额外内存消耗</li><li>实现复杂</li></ul></li></ul><h3 id="6-2-案例实现"><a href="#6-2-案例实现" class="headerlink" title="6.2 案例实现"></a>6.2 案例实现</h3><p>需求:根据id查询商铺的业务,基于互斥锁方式来解决缓存击穿的问题<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230514174315.png"><br>需求:根据id查询商铺的业务,基于逻辑过期方式来解决缓存击穿的问题<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230514202322.png"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/2023/04/24/Redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/24/Redis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Redis基础学习"><a href="#Redis基础学习" class="headerlink" title="Redis基础学习"></a>Redis基础学习</h1><h2 id="1-Redis数据结构介绍"><a href="#1-Redis数据结构介绍" class="headerlink" title="1. Redis数据结构介绍"></a>1. Redis数据结构介绍</h2><p><code>Redis</code>是一个key-value的数据库,key一般是String类型,不过value的类型多种多样:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230424170809.png" alt="数据类型示例"></p><h2 id="2-Redis通用命令"><a href="#2-Redis通用命令" class="headerlink" title="2. Redis通用命令"></a>2. Redis通用命令</h2><ul><li>KEYS: 查看符合模板的所有key<br>  <img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230424171805.png" alt="key">  </li><li>DEL: 删除一个指定的key</li><li>EXISTS: 判断key是否存在</li><li>EXPIRE: 给一个key设置有效期,有效期到期时该key会被自动删除</li><li>TTL: 查看一个key的剩余有效期<br>  通过help<code>[command]</code>可以查看一个命令的具体用法,例如:<br>  <img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230424171617.png"></li></ul><h2 id="3-String类型"><a href="#3-String类型" class="headerlink" title="3. String类型"></a>3. String类型</h2><p>String类型,也就是字符串类型,是Redis中最简单的存储类型。<br>其value是字符串,不过根据字符串的格式不同,又可以分为3类:</p><ul><li>string: 普通字符串</li><li>int: 整数类型,可以做自增、自减操作</li><li>float: 浮点类型,可以做自增、自减操作<br>不管是哪种格式,底层都是字节数组形式存储,只不过是编码的方式不同。字符串类型的最大空间不能超过512m<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230424172755.png"></li></ul><h2 id="4-String类型常见命令有"><a href="#4-String类型常见命令有" class="headerlink" title="4. String类型常见命令有:"></a>4. String类型常见命令有:</h2><ul><li>SET(单个增): 添加或者修改一个已经存在的一个String类型的键值对</li><li>GET(单个查): 根据key获取String类型的value</li><li>MSET(批量增): 批量添加多个String类型的键值对</li><li>MGET(批量查): 根据多个key获取多个String类型的value</li><li>INCR: 让一个整型的key自增1</li><li>INCRBY: 让一个整形的key自增并指定步长,例如: incrby num 2 让num值自增2</li><li>INCRBYFLOAT: 让一个浮点类型的数字自增并指定步长</li><li>SETNX: 添加一个String类型的键值对,前提是这个key不存在,否则不执行</li><li>SETEX: 添加一个String类型的键值对,并指定有效期</li></ul><ul><li>SET 和GET: 如果key不存在则是新增，如果存在则是修改<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> set name <span class="token class-name">Rose</span>  <span class="token comment">//原来不存在</span><span class="token constant">OK</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> get name <span class="token string">"Rose"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> set name <span class="token class-name">Jack</span> <span class="token comment">//原来存在，就是修改</span><span class="token constant">OK</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> get name<span class="token string">"Jack"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>MSET和MGET</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">MSET</span> k1 v1 k2 v2 k3 v3<span class="token constant">OK</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">MGET</span> name age k1 k2 k3<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"Jack"</span> <span class="token comment">//之前存在的name</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"10"</span>   <span class="token comment">//之前存在的age</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"v3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>INCR和INCRBY和DECY</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> get age <span class="token string">"10"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> incr age <span class="token comment">//增加1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> get age <span class="token comment">//获得age</span><span class="token string">"11"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> incrby age <span class="token number">2</span> <span class="token comment">//一次增加2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span> <span class="token comment">//返回目前的age的值</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> incrby age <span class="token number">2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">15</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> incrby age <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">//也可以增加负数，相当于减</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">14</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> incrby age <span class="token operator">-</span><span class="token number">2</span> <span class="token comment">//一次减少2个</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">DECR</span> age <span class="token comment">//相当于 incr 负数，减少正常用法</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> get age <span class="token string">"11"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SETNX</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> help setnx  <span class="token constant">SETNX</span> key value  summary<span class="token operator">:</span> <span class="token class-name">Set</span> the value of a key<span class="token punctuation">,</span> only <span class="token keyword">if</span> the key does not exist  since<span class="token operator">:</span> <span class="token number">1.0</span><span class="token number">.0</span>  group<span class="token operator">:</span> string<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> set name <span class="token class-name">Jack</span>  <span class="token comment">//设置名称</span><span class="token constant">OK</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> setnx name lisi <span class="token comment">//如果key不存在，则添加成功</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> get name <span class="token comment">//由于name已经存在，所以lisi的操作失败</span><span class="token string">"Jack"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> setnx name2 lisi <span class="token comment">//name2 不存在，所以操作成功</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> get name2 <span class="token string">"lisi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>SETEX</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setex name <span class="token number">10</span> jackOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Key的层级结构"><a href="#5-Key的层级结构" class="headerlink" title="5. Key的层级结构"></a>5. Key的层级结构</h2><p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p><p>例如，需要存储用户.商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：<br><code>项目名:业务名:类型:id</code><br>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 coderzhn，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li><p>user相关的key：<strong>coderzhn:user:1</strong></p></li><li><p>product相关的key：<strong>coderzhn:product:1</strong></p></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>coderzhn:user:1</td><td>{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td>coderzhn:product:1</td><td>{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr><tr><td>一旦我们向redis采用这样的方式存储，那么在可视化界面中，redis会以层级结构来进行存储，形成类似于这样的结构，更加方便Redis获取数据</td><td></td></tr></tbody></table><h2 id="6-Hash命令"><a href="#6-Hash命令" class="headerlink" title="6. Hash命令"></a>6. Hash命令</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230424180938.png"><br>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230424181020.png"></p><p><strong>Hash类型的常见命令</strong></p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><ul><li>HSET和HGET</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HSET</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">3</span> name <span class="token class-name">Lucy</span><span class="token comment">//大key是 heima:user:3 小key是name，小value是Lucy</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HSET</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">3</span> age <span class="token number">21</span><span class="token comment">// 如果操作不存在的数据，则是新增</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HSET</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">3</span> age <span class="token number">17</span> <span class="token comment">//如果操作存在的数据，则是修改</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HGET</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">3</span> name <span class="token string">"Lucy"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HGET</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">3</span> age<span class="token string">"17"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HMSET和HMGET</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HMSET</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span> name <span class="token class-name">HanMeiMei</span><span class="token constant">OK</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HMSET</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span> name <span class="token class-name">LiLei</span> age <span class="token number">20</span> sex man<span class="token constant">OK</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HMGET</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span> name age sex<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"LiLei"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"20"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"man"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HGETALL</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HGETALL</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"LiLei"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"20"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"sex"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"man"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HKEYS和HVALS</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HKEYS</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"sex"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HVALS</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"LiLei"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"20"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"man"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HINCRBY</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HINCRBY</span>  heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span> age <span class="token number">2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">22</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HVALS</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"LiLei"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"22"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"man"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HINCRBY</span>  heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">4</span> age <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HSETNX</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HSETNX</span> heima<span class="token operator">:</span>user4 sex woman<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HGETALL</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">3</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Lucy"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"17"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HSETNX</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">3</span> sex woman<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">HGETALL</span> heima<span class="token operator">:</span>user<span class="token operator">:</span><span class="token number">3</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"Lucy"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"17"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"sex"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"woman"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-List命令"><a href="#7-List命令" class="headerlink" title="7.List命令"></a>7.List命令</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p><strong>List的常见命令有：</strong></p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li><li><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230425192820.png"></li></ul><ul><li>LPUSH和RPUSH</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">LPUSH</span> users <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">RPUSH</span> users <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LPOP和RPOP</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">LPOP</span> users<span class="token string">"3"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">RPOP</span> users<span class="token string">"6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LRANGE</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">LRANGE</span> users <span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-Set命令"><a href="#8-Set命令" class="headerlink" title="8.Set命令"></a>8.Set命令</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集.并集.差集等功能</li></ul><p><strong>Set类型的常见命令</strong></p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li><li>SDIFF key1 key2 … ：求key1与key2的差集</li><li>SUNION key1 key2 ..：求key1和key2的并集</li></ul><p><strong>具体命令</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> sadd s1 a b c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> smembers s1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"b"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"a"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> srem s1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SISMEMBER</span> s1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SISMEMBER</span> s1 b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token class-name">SCARD</span> s1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例</strong></p><ul><li>将下列数据用Redis的Set集合来存储：</li><li>张三的好友有：李四.王五.赵六</li><li>李四的好友有：王五.麻子.二狗</li><li>利用Set的命令实现下列功能：</li><li>计算张三的好友有几人</li><li>计算张三和李四有哪些共同好友</li><li>查询哪些人是张三的好友却不是李四的好友</li><li>查询张三和李四的好友总共有哪些人</li><li>判断李四是否是张三的好友</li><li>判断张三是否是李四的好友</li><li>将李四从张三的好友列表中移除</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SADD</span> zs lisi wangwu zhaoliu<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SADD</span> ls wangwu mazi ergou<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token class-name">SCARD</span> zs<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SINTER</span> zs ls<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SDIFF</span> zs ls<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhaoliu"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"lisi"</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SUNION</span> zs ls<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"zhaoliu"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"lisi"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"mazi"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"ergou"</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SISMEMBER</span> zs lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SISMEMBER</span> ls zhangsan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SREM</span> zs lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>    <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SMEMBERS</span> zs<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhaoliu"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wangwu"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-SortedSet类型"><a href="#9-SortedSet类型" class="headerlink" title="9. SortedSet类型"></a>9. SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF.ZINTER.ZUNION：求差集.交集.并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</li><li><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis数据结构 </tag>
            
            <tag> Redis学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda的双冒号语法</title>
      <link href="/2023/04/06/lambda%E7%9A%84%E5%8F%8C%E5%86%92%E5%8F%B7%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/04/06/lambda%E7%9A%84%E5%8F%8C%E5%86%92%E5%8F%B7%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="lambda的双冒号语法"><a href="#lambda的双冒号语法" class="headerlink" title="lambda的双冒号语法"></a>lambda的双冒号语法</h1><p>在学习过程中最近经常能碰见java中的双冒号::语法形式<br><strong>举例:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lqw<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>bookDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查阅相关资料了解到<code>双冒号</code> <code>::</code>语法是lambda表达式的一种表示</p><p>我们先来复习一下Lambda表达式</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="1-组成格式"><a href="#1-组成格式" class="headerlink" title="1.组成格式"></a>1.组成格式</h3><ul><li>组成Lambda表达式的三要素：形式参数，箭头，代码块</li><li>Lambda表达式的格式<br>①、格式：(形式参数) -&gt; {代码块}<br>②、形式参数：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可<br>③、-&gt;：由英文中画线和大于符号组成，固定写法。代表指向动作<br>④、代码块：是我们具体要做的事情，也就是以前我们写的方法体内容</li></ul><h3 id="2-理解"><a href="#2-理解" class="headerlink" title="2.理解"></a>2.理解</h3><p>Lambda表达式个人理解是用来简化匿名内部类的书写的一种语法形式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @ProjectName: Springboot * @Package: com.zhn * @ClassName: Test * @Date: 2023/4/6 19:56 */</span><span class="token keyword">interface</span> <span class="token class-name">LambdaDemo</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lambda</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">LambdaDemo</span> lambdaDemo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">LambdaDemo</span> lambdaDemo2 <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">LambdaDemo</span> lambdaDemo3 <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">LambdaDemo</span> lambdaDemo4 <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LambdaDemo</span> lambdaDemo5 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见当函数的入参和返回值一致时可以使用</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lambda表达式 </tag>
            
            <tag> 双冒号语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful入门案例</title>
      <link href="/2023/03/23/RESTful%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
      <url>/2023/03/23/RESTful%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="RESTful入门案例"><a href="#RESTful入门案例" class="headerlink" title="RESTful入门案例"></a>RESTful入门案例</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><ul><li>创建一个Web的Maven项目</li><li>pom.xml添加Spring依赖</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.zhn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建对应的配置类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContainersInitConfig</span> <span class="token keyword">extends</span><span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">SpringMvcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//乱码处理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CharacterEncodingFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>filter<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.zhn.controller"</span><span class="token punctuation">)</span><span class="token comment">//开启json数据类型自动转换</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写模型类User和Book</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//getter...setter...toString省略</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token comment">//getter...setter...toString省略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写UserController和BookController</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user save..."</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user save'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user delete..."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user delete'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user update..."</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user update'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getById"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user getById..."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user getById'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user getAll..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user getAll'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/books"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book save..."</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'book save'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/books/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book delete..."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'book delete'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/books"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book update..."</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'book update'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/books/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book getById..."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'book getById'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/books"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book getAll..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'book getAll'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-思路分析"><a href="#2-思路分析" class="headerlink" title="2. 思路分析"></a>2. 思路分析</h2><blockquote><p>需求:将之前的增删改查替换成RESTful的开发方式。<br>1.之前不同的请求有不同的路径,现在要将其修改为统一的请求路径<br>修改前: 新增: /save ,修改: /update,删除 /delete…<br>修改后: 增删改查: /users<br>2.根据GET查询、POST新增、PUT修改、DELETE删除对方法的请求方式进行限定<br>3.发送请求的过程中如何设置请求参数?</p></blockquote><h2 id="3-修改RESTful风格"><a href="#3-修改RESTful风格" class="headerlink" title="3 修改RESTful风格"></a>3 修改RESTful风格</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span><span class="token comment">//设置当前请求方法为POST，表示REST风格中的添加操作</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user save..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user save'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将请求路径更改为/users<ul><li>访问该方法使用 POST: <a href="http://localhost/users">http://localhost/users</a></li></ul></li><li>使用method属性限定该方法的访问方式为POST<ul><li>如果发送的不是POST请求，比如发送GET请求，则会报错</li></ul></li></ul><p><strong>删除</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user delete..."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user delete'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将请求路径更改为/users<ul><li>访问该方法使用 DELETE: <a href="http://localhost/users">http://localhost/users</a></li></ul></li></ul><p>访问成功，但是删除方法没有携带所要删除数据的id,所以针对RESTful的开发，如何携带数据参数?<br><code>传递路径参数</code><br>前端发送请求的时候使用: <a href="http://localhost/users/1">http://localhost/users/1</a> ,路径中的1就是我们想要传递的参数。<br>后端获取参数，需要做如下修改:</p><ul><li>修改@RequestMapping的value属性，将其中修改为/users/{id}，目的是和路径匹配</li><li>在方法的形参前添加@PathVariable注解</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user delete..."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user delete'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考如下两个问题:<br>(1)如果方法形参的名称和路径{}中的值不一致，该怎么办?<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230326100435.png"><br>(2)如果有多个参数需要传递该如何编写?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users/{id}/{name}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span>    <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user delete..."</span> <span class="token operator">+</span> id<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user delete'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">//设置当前请求方法为PUT，表示REST风格中的修改操作</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user update..."</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user update'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将请求路径更改为/users<ul><li>访问该方法使用 PUT: <a href="http://localhost/users">http://localhost/users</a></li></ul></li><li>访问并携带参数:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230326100656.png"><br><strong>根据ID查询</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users/{id}"</span> <span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user getById..."</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user getById'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将请求路径更改为/users</p><ul><li>访问该方法使用 GET: <a href="http://localhost/users/666">http://localhost/users/666</a><br><strong>查询所有</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users"</span> <span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user getAll..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'user getAll'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将请求路径更改为/users</p><ul><li>访问该方法使用 GET: <a href="http://localhost/users">http://localhost/users</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>RESTful入门案例，我们需要学习的内容如下:<br>(1)设定Http请求动作(动词)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token operator">|</span><span class="token constant">GET</span><span class="token operator">|</span><span class="token constant">PUT</span><span class="token operator">|</span><span class="token constant">DELETE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)设定请求参数(路径变量)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/users/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ReponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> REST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
            <tag> REST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST风格</title>
      <link href="/2023/03/23/REST%E9%A3%8E%E6%A0%BC/"/>
      <url>/2023/03/23/REST%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Rest风格"><a href="#Rest风格" class="headerlink" title="Rest风格"></a>Rest风格</h1><h2 id="REST简介"><a href="#REST简介" class="headerlink" title="REST简介"></a>REST简介</h2><p><code>REST</code>（Representational State Transfer），表现形式状态转换,它是一种软件架构 <code>风格</code><br>当我们想表示一个网络资源的时候，可以使用两种方式:</p><ul><li>传统风格资源描述形式<br><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a> 查询id为1的用户信息<br><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a> 保存用户信息</li><li>REST风格描述形式<br><a href="http://localhost/user/1">http://localhost/user/1</a><br><a href="http://localhost/user">http://localhost/user</a></li></ul><p>传统方式一般是一个请求url对应一种操作，这样做不仅麻烦，也不安全，因为会程序的人读取了你的<br>请求url地址，就大概知道该url实现的是一个什么样的操作。</p><p>查看REST风格的描述，你会发现请求地址变的简单了，并且光看请求URL并不是很能猜出来该URL的<br>具体功能</p><p><strong>所以REST的优点有:</strong></p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化<br>但是我们的问题也随之而来了，一个相同的url地址即可以是新增也可以是修改或者查询，那么到底我们该如何区分该请求到底是什么操作呢?</li><li>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作<ul><li><a href="http://localhost/users">http://localhost/users</a> 查询全部用户信息 GET（查询）</li><li><a href="http://localhost/users/1">http://localhost/users/1</a> 查询指定用户信息 GET（查询）</li><li><a href="http://localhost/users">http://localhost/users</a> 添加用户信息 POST（新增/保存）</li><li><a href="http://localhost/users">http://localhost/users</a> 修改用户信息 PUT（修改/更新）</li><li><a href="http://localhost/users/1">http://localhost/users/1</a> 删除用户信息 DELETE（删除）<br>请求的方式比较多，但是比较常用的就4种，分别是<strong>GET , POST , PUT , DELETE</strong></li></ul></li></ul><p>按照不同的请求方式代表不同的操作类型。</p><ul><li>发送GET请求是用来做查询</li><li>发送POST请求是用来做新增</li><li>发送PUT请求是用来做修改</li><li>发送DELETE请求是用来做删除</li></ul><p>但是注意:</p><ul><li>上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范<ul><li>REST提供了对应的架构方式，按照这种架构设计项目可以降低开发的复杂性，提高系统的可伸缩性</li><li>REST中规定GET/POST/PUT/DELETE针对的是查询/新增/修改/删除，但是我们如果非要用<br>GET请求做删除，这点在程序上运行是可以实现的</li><li>但是如果绝大多数人都遵循这种风格，你写的代码让别人读起来就有点莫名其妙了。<br>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源，例<br>如:users、books、accounts……<br>清楚了什么是REST风格后，我们后期会经常提到一个概念叫RESTful，<strong>那什么又是RESTful</strong>呢?</li></ul></li><li>根据REST风格对资源进行访问称为RESTful。<br>后期我们在进行开发的过程中，大多是都是遵从REST风格来访问我们的后台服务，所以可以说咱们以后都是基于RESTful来进行开发的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> REST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ArrayList和LinkedList</title>
      <link href="/2023/03/22/%E5%85%B3%E4%BA%8EArrayList%E5%92%8CLinkedList/"/>
      <url>/2023/03/22/%E5%85%B3%E4%BA%8EArrayList%E5%92%8CLinkedList/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230322142118.png" alt="Java数据结构的继承关系"></p><h1 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1. ArrayList"></a>1. ArrayList</h1><p>ArrayList内部是动态数组的结构，具备数组的特点<br>优点：</p><blockquote><p>1）查找速度快<br>2）ArrayList可随着元素的增长而自动扩容，正常扩容的话，每次扩容到原来的1.5倍<br>3）尾插速度快，时间复杂为O（N）</p></blockquote><p>缺点：</p><blockquote><p>1）头插、中间插入和删除操作时需要搬运数据，时间复杂度是O(N)<br>2) 数组需要连续的内存空间，对空间要求高<br>3) 数组是固定大小的，但是ArrayList 插入元素会触发扩容机制<br>4) ArrayList的线程是不安全的。</p></blockquote><h2 id="1-1-常用方法"><a href="#1-1-常用方法" class="headerlink" title="1.1 常用方法"></a>1.1 常用方法</h2><p>1）add( element) 添加一个元素，<br>2）add( index , element) 在index位置添加一个元素 index当前元素就会往后挪<br>3）size() 顺序表长度<br>4） set (index ,element) 将index位置元素进行修改<br>5）get( index) 获取index位置的元素<br>6）remove(index) 删除index 位置的元素<br>7）contains (element) 是否包含该元素<br>8）isEmpry() 判断顺序表是否为空</p><h2 id="1-2-源码相关定义"><a href="#1-2-源码相关定义" class="headerlink" title="1.2 源码相关定义:"></a>1.2 源码相关定义:</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认的容量大小（常量）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 定义的空数组（final修饰，大小固定为0）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">EMPTY_ELEMENTDATA</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 定义的默认空容量的数组（final修饰，大小固定为0）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 定义的不可被序列化的数组，实际存储元素的数组</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// 数组中元素的个数</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-ArrayList扩容机制"><a href="#1-3-ArrayList扩容机制" class="headerlink" title="1.3 ArrayList扩容机制"></a>1.3 ArrayList扩容机制</h2><p><strong>扩容可分为两种情况：</strong></p><p>　<strong>第一种情况，当ArrayList的容量为0时，此时添加元素的话，需要扩容，三种构造方法创建的ArrayList在扩容时略有不同:</strong></p><p>　　　　1.无参构造，创建ArrayList后容量为0，添加第一个元素后，容量变为10，此后若需要扩容，则正常扩容。</p><p>　　　　2.传容量构造，当参数为0时，创建ArrayList后容量为0，添加第一个元素后，容量为1，此时ArrayList是满的，下次添加元素时需正常扩容。</p><p>　　　　3.传列表构造，当列表为空时，创建ArrayList后容量为0，添加第一个元素后，容量为1，此时ArrayList是满的，下次添加元素时需正常扩容。</p><p>　　<strong>第二种情况，当ArrayList的容量大于0，并且ArrayList是满的时，此时添加元素的话，进行正常扩容，每次扩容到原来的1.5倍。</strong></p><h1 id="2-LinkedList"><a href="#2-LinkedList" class="headerlink" title="2. LinkedList"></a>2. LinkedList</h1><p>LinkedList 底层通过双向链表实现 LinkedList 通过first 和 last 引用分别指向链表的第一个和最后一个元素<br><strong>LinkedList的优点：</strong></p><blockquote><p>1.内存利用率高，不会浪费内存<br>2.大小不固定，拓展灵活<br>3.插入、删除头尾速度快，时间复杂度为O（1）<br><strong>LinkedList的缺点：</strong></p></blockquote><blockquote><p>在Java中LinkedList 中间位置插入元素，时间复杂度为O（N）,且不能随机查找，必须遍历链表</p></blockquote><h2 id="2-1-常用的方法"><a href="#2-1-常用的方法" class="headerlink" title="2.1 常用的方法"></a>2.1 常用的方法</h2><p>1）add( element ) 添加一个元素<br>2）addFirst (element) 头插一个元素<br>3）addLast (element) 尾插一个元素<br>4）get( index) 获取index 位置的元素<br>5）set(index element) 设置index位置元素为 element<br>6）indexOf(element) 返回该元素所在下标，没找到就返回-1<br>7）contains (element) 判断是否有该元素</p><h2 id="2-2-LinkedList实现的功能"><a href="#2-2-LinkedList实现的功能" class="headerlink" title="2.2 LinkedList实现的功能"></a>2.2 LinkedList实现的功能</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230322142611.png"></p><ol><li><p>LinkedList 继承了 AbstractSequentialList 类。</p></li><li><p>LinkedList 实现了 Queue 接口，可作为队列使用。</p></li><li><p>LinkedList 实现了 List 接口，可进行列表的相关操作。</p></li><li><p>LinkedList 实现了 Deque 接口，可作为队列使用。</p></li><li><p>LinkedList 实现了 Cloneable 接口，可实现克隆。</p></li><li><p>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</p></li></ol><h1 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别?"></a>ArrayList和LinkedList的区别?</h1><p>ArrayList 与 LinkedList 都是 List 接口的实现类，因此都实现了 List 的所有未实现的方法，只是实现的方式有所不同。</p><p>ArrayList 是基于动态数组数据结构的实现，访问元素速度优于 LinkedList。LinkedList 是基于链表数据结构的实现，占用的内存空间比较大，但在批量插入或删除数据时优于 ArrayList。</p><p>对于快速访问对象的需求，使用 ArrayList 实现执行效率上会比较好。需要频繁向集合中插入和删除元素时，使用 LinkedList 类比 ArrayList 类效果高。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> ArrayList </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从上到下打印二叉树</title>
      <link href="/2023/03/22/%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2023/03/22/%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。<br>例如:<br>给定二叉树: [3,9,20,null,null,15,7],<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230322131902.png"><br>返回：</p><blockquote><p>[3,9,20,15,7]<br><strong>提示：</strong></p></blockquote><p>节点总数 &lt;= 1000</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h1><p>二叉树的层次遍历可以看成是二叉树的广度优先搜索(BFS)<br>BFS 通常借助 队列 的先入先出特性来实现。</p><p>算法流程：</p><ol><li>特例处理： 当树的根节点为空，则直接返回空列表 [] ；</li><li>初始化： 打印结果列表 res = [] ，包含根节点的队列 queue = [root] ；</li><li>BFS 循环： 当队列 queue 为空时跳出；<ol><li>出队： 队首元素出队，记为 node；</li><li>打印： 将 node.val 添加至列表 tmp 尾部；</li><li>添加子节点： 若 node 的左（右）子节点不为空，则将左（右）子节点加入队列 queue ；<br> 返回值： 返回打印结果列表 res 即可。</li></ol></li></ol><h1 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">TreeNode</span> t <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个只出现一次的字符</title>
      <link href="/2023/03/21/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
      <url>/2023/03/21/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。<br>示例 1:</p><blockquote><p>输入：s = “abaccdeff”<br>输出：’b’</p></blockquote><p>示例 2:</p><blockquote><p>输入：s = “”<br>输出：’ ‘</p></blockquote><p>限制：</p><p>0 &lt;= s 的长度 &lt;= 50000</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h1><p>对字符串进行两次遍历。</p><p>在第一次遍历时，我们使用哈希映射统计出字符串中每个字符出现的次数。在第二次遍历时，我们只要遍历到了一个只出现一次的字符，那么就返回该字符，否则在遍历结束后返回空格。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token char">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h2><p><strong>Java HashMap getOrDefault() 方法</strong><br>getOrDefault() 方法获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值。</p><p>getOrDefault() 方法的语法为：</p><blockquote><p>hashmap.getOrDefault(Object key, V defaultValue)</p></blockquote><p><strong>Java HashMap的map.keySet() 方法</strong><br>keySet() 方法返回映射中所有 key 组成的 Set 视图。</p><p>keySet() 方法的语法为：</p><blockquote><p>hashmap.keySet()</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中二维数组的length方法</title>
      <link href="/2023/03/19/Java%E4%B8%AD%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84length%E6%96%B9%E6%B3%95/"/>
      <url>/2023/03/19/Java%E4%B8%AD%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84length%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java中二维数组的length方法"><a href="#Java中二维数组的length方法" class="headerlink" title="Java中二维数组的length方法"></a>Java中二维数组的length方法</h1><p>今天遇到一道很简单的算法题</p><blockquote><p>在一个 n * m 的二维数组中，每一行都按照从左到右&nbsp;非递减&nbsp;的顺序排序，每一列都按照从上到下&nbsp;非递减&nbsp;的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数</p></blockquote><p>刚开始是这样写的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    flag <span class="token operator">=</span>  <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自我感觉没问题，点击运行却报出错误<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230319093420.png"><br>才发现自己竟然不知道二维数组中length方法所表示的含义,这样写如果行列数不一致就通过不了案例</p><h1 id="查阅资料总结如下"><a href="#查阅资料总结如下" class="headerlink" title="查阅资料总结如下"></a>查阅资料总结如下</h1><ul><li><p>在一维数组a[ ]中，a.length 方法的意思就是返回这个数组的长度。</p><p>  比如a[] = {1,2,3,4,5}，则a.length = 5</p></li><li><p>而在二位数组中，如果直接调用b.length方法，返回的则是b数组的行数，</p><p>  如果是b[0].length方法则返回的是0行所代表的长度。</p></li></ul><h2 id="代码更改如下"><a href="#代码更改如下" class="headerlink" title="代码更改如下:"></a>代码更改如下:</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    flag <span class="token operator">=</span>  <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题解决</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC入门案例工作流程</title>
      <link href="/2023/03/18/SpringMVC%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/03/18/SpringMVC%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我们现在的Web程序大都基于MVC三层架构来实现的<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230318163404.png"></p><ul><li><p>如果所有的处理都交给 <code>Servlet</code>来处理的话，所有的东西都耦合在一起，对后期的维护和扩展极其不利</p><ul><li>所以将后端服务器 <code>Servlet</code>拆分成三层，分别是 <code>web</code>、<code>service</code>和 <code>dao</code><ul><li><code>web</code>层主要由 <code>servlet</code>来处理，负责页面请求和数据的收集以及响应结果给前端</li><li><code>service</code>层主要负责业务逻辑的处理</li><li><code>dao</code>层主要负责数据的增删改查操作</li></ul></li></ul></li><li><p>但 <code>servlet</code>处理请求和数据时，存在一个问题：一个 <code>servlet</code>只能处理一个请求</p></li><li><p>针对 <code>web</code>层进行优化，采用MVC设计模式，将其设计为 <code>Controller</code>、<code>View</code>和 <code>Model</code></p><ul><li><code>controller</code>负责请求和数据的接收，接收后将其转发给 <code>service</code>进行业务处理</li><li><code>service</code>根据需要会调用 <code>dao</code>对数据进行增删改查</li><li><code>dao</code>把数据处理完后，将结果交给 <code>service</code>，<code>service</code>再交给 <code>controller</code></li><li><code>controller</code>根据需求组装成 <code>Model</code>和 <code>View</code>，<code>Model</code>和 <code>View</code>组合起来生成页面，转发给前端浏览器</li><li>这样做的好处就是 <code>controller</code>可以处理多个请求，并对请求进行分发，执行不同的业务操作</li><li></li></ul></li><li><p>SpringMVC主要负责的就是</p><ul><li>controller如何接收请求和数据</li><li>如何将请求和数据转发给业务层</li><li>如何将响应数据转换成JSON发挥到前端</li></ul></li><li><p>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</p><ul><li>优点<ul><li>使用简单、开发快捷（相比较于Servlet）</li><li>灵活性强</li></ul></li><li>使用简单、开发快捷（相比较于Servlet）</li><li>灵活性强</li></ul></li></ul><h1 id="SpringMVC入门案例"><a href="#SpringMVC入门案例" class="headerlink" title="SpringMVC入门案例"></a>SpringMVC入门案例</h1><p>因为SpringMVC是一个Web框架，将来是要替换Servlet,所以先来回顾下以前Servlet是如何进行开发的?</p><ol><li>创建web工程(Maven结构)</li><li>设置tomcat服务器，加载web工程(tomcat插件)</li><li>导入坐标(Servlet)</li><li>定义处理请求的功能类(UserServlet)</li><li>设置请求映射(配置映射关系)</li></ol><p>SpringMVC的制作过程和上述流程几乎是一致的，具体的实现流程是什么?</p><ol><li>创建web工程(Maven结构)</li><li>设置tomcat服务器，加载web工程(tomcat插件)</li><li>导入坐标(SpringMVC+Servlet)</li><li>定义处理请求的功能类(UserController)</li><li>设置请求映射(配置映射关系)</li><li>将SpringMVC设定加载到Tomcat容器中</li></ol><h2 id="案例制作"><a href="#案例制作" class="headerlink" title="案例制作"></a>案例制作</h2><p><code>步骤一：</code>创建Maven项目</p><p><code>步骤二：</code>导入所需坐标(SpringMVC+Servlet)</p><p>在 <code>pom.xml</code>中导入下面两个坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token comment">&lt;!--servlet--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--springmvc--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>步骤三：</code>创建SpringMVC控制器类（等同于我们前面做的Servlet）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义Controller，使用@Controller定义Bean</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token comment">//设置当前访问路径，使用@RequestMapping</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token comment">//设置当前对象的返回值类型</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user save ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{'module':'SpringMVC'}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>步骤四：</code>初始化SpringMVC环境（同Spring环境），设定SpringMVC加载对应的Bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建SpringMVC的配置文件，加载controller对应的bean</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">//</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.blog.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>步骤五：</code>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求JAVA</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义一个servlet容器的配置类，在里面加载Spring的配置，继承AbstractDispatcherServletInitializer并重写其方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContainerInitConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token comment">//加载SpringMvc容器配置</span>    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringMvcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//设置哪些请求归SpringMvc处理</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//所有请求都交由SpringMVC处理</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//加载Spring容器配置</span>    <span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>步骤六：</code>访问 <code>http://localhost:8080/save</code><br>页面上成功出现 <code>{'info':'springmvc'}</code>，至此我们的SpringMVC入门案例就完成了</p><blockquote><p>注意事项</p><ul><li>SpringMVC是基于Spring的，在pom.xml只导入了 <code>spring-webmvc</code>jar包的原因是它会自动依赖spring相关坐标</li><li><code>AbstractDispatcherServletInitializer</code>类是SpringMVC提供的快速初始化Web3.0容器的抽象类</li><li><code>AbstractDispatcherServletInitializer</code>提供了三个接口方法供用户实现</li><li><code>createServletApplicationContext</code>方法，创建Servlet容器时，加载SpringMVC对应的bean并放入 <code>WebApplicationContext</code>对象范围中，而 <code>WebApplicationContext</code>的作用范围为 <code>ServletContext</code>范围，即整个web容器范围</li><li><code>getServletMappings</code>方法，设定SpringMVC对应的请求映射路径，即SpringMVC拦截哪些请求</li><li><code>createRootApplicationContext</code>方法，如果创建Servlet容器时需要加载非SpringMVC对应的bean，使用当前方法进行，使用方式和 <code>createServletApplicationContext</code>相同。</li><li><code>createServletApplicationContext</code>用来加载SpringMVC环境</li><li><code>createRootApplicationContext</code>用来加载Spring环境</li></ul></blockquote><p>知识点1：<code>@Controller</code></p><table><thead><tr><th>名称</th><th align="left">@Controller</th></tr></thead><tbody><tr><td>类型</td><td align="left">类注解</td></tr><tr><td>位置</td><td align="left">SpringMVC控制器类定义上方</td></tr><tr><td>作用</td><td align="left">设定SpringMVC的核心控制器bean</td></tr></tbody></table><p>知识点2：<code>@RequestMapping</code></p><table><thead><tr><th align="left">名称</th><th align="left">@RequestMapping</th></tr></thead><tbody><tr><td align="left">类型</td><td align="left">类注解或方法注解</td></tr><tr><td align="left">位置</td><td align="left">SpringMVC控制器类或方法定义上方</td></tr><tr><td align="left">作用</td><td align="left">设置当前控制器方法请求访问路径</td></tr><tr><td align="left">相关属性</td><td align="left">value(默认)，请求访问路径</td></tr></tbody></table><p>知识点3：<code>@ResponseBody</code></p><table><thead><tr><th>名称</th><th align="left">@ResponseBody</th></tr></thead><tbody><tr><td>类型</td><td align="left">类注解或方法注解</td></tr><tr><td>位置</td><td align="left">SpringMVC控制器类或方法定义上方</td></tr><tr><td>作用</td><td align="left">设置当前控制器方法响应内容为当前返回值，无需解析</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringMVC工作流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂链表的复制</title>
      <link href="/2023/03/17/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
      <url>/2023/03/17/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230317094731.png"></p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230317094758.png"></p><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3:"></a>示例3:</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230317094838.png"></p><h2 id="示例4"><a href="#示例4" class="headerlink" title="示例4:"></a>示例4:</h2><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230317094914.png"></p><p>提示：</p><ul><li>-10000 &lt;= Node.val &lt;= 10000</li><li>Node.random 为空（null）或指向链表中的节点。</li><li>节点数目不超过 1000 。</li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>复制拼接+拆分链表</p><p>考虑构建 原节点 1 -&gt; 新节点 1 -&gt; 原节点 2 -&gt; 新节点 2 -&gt; …… 的拼接链表，如此便可在访问原节点的 random 指向节点的同时找到新对应新节点的 random 指向节点。</p><blockquote><p>图例<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230317155221.png"></p></blockquote><ol><li>复制各节点，构建拼接链表:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230317155322.png">   </li><li>构建新链表各节点的 random 指向：<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230317155355.png">   </li><li>拆分原 / 新链表：<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230317155427.png"></li><li>返回新链表的头节点 res 即可</li></ol><h1 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*// Definition for a Node.class Node {    int val;    Node next;    Node random;    public Node(int val) {        this.val = val;        this.next = null;        this.random = null;    }}*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//复制链表节点    </span>        <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Node</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>             <span class="token comment">//复制随机节点</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">Node</span> curNew <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            curNew<span class="token punctuation">.</span>random <span class="token operator">=</span> cur<span class="token punctuation">.</span>random <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> cur<span class="token punctuation">.</span>random<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//拆分链表</span>        <span class="token class-name">Node</span> headNew <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Node</span> curNew <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            curNew<span class="token punctuation">.</span>next <span class="token operator">=</span> cur <span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span><span class="token keyword">null</span><span class="token operator">:</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            curNew <span class="token operator">=</span> curNew<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> headNew<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP</title>
      <link href="/2023/03/16/Spring%20Aop/"/>
      <url>/2023/03/16/Spring%20Aop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="1-场景模拟"><a href="#1-场景模拟" class="headerlink" title="1. 场景模拟"></a>1. 场景模拟</h2><h3 id="1-1-声明接口"><a href="#1-1-声明接口" class="headerlink" title="1.1 声明接口"></a>1.1 声明接口</h3><p>声明计算器接口Calculator，包含加减乘除的抽象方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-创建实现类"><a href="#1-2-创建实现类" class="headerlink" title="1.2 创建实现类"></a>1.2 创建实现类</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316201219.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorPureImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-创建带日志功能的实现类"><a href="#1-3-创建带日志功能的实现类" class="headerlink" title="1.3 创建带日志功能的实现类"></a>1.3 创建带日志功能的实现类</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316201418.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorLogImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] add 方法开始了，参数是："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] add 方法结束了，结果是："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] sub 方法开始了，参数是："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] sub 方法结束了，结果是："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] mul 方法开始了，参数是："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] mul 方法结束了，结果是："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] div 方法开始了，参数是："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] div 方法结束了，结果是："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-提出问题"><a href="#1-4-提出问题" class="headerlink" title="1.4 提出问题"></a>1.4 提出问题</h3><ol><li>现有代码缺陷<br>针对带日志功能的实现类，我们发现有如下缺陷：</li></ol><ul><li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li><li>附加功能分散在各个业务功能方法中，不利于统一维护</li></ul><ol start="2"><li>解决思路<br>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</li><li>困难<br>解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。<br>所以需要引入新的技术。</li></ol><h2 id="2-代理模式"><a href="#2-代理模式" class="headerlink" title="2. 代理模式"></a>2. 代理模式</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ol><li>介绍<br>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标<br>方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑<br>的代码从目标方法中剥离出来——解耦。调用目标方法时先调用代理对象的方法，减少对目标方法的调<br>用和打扰，同时让附加功能能够集中在一起也有利于统一维护。<br>！<a href="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316202712.png"></a></li></ol><p>使用代理后：<br>！<a href="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316202747.png"></a></p><ol start="2"><li>生活中的代理</li></ol><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li></ul><ol start="3"><li>相关术语</li></ol><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><h3 id="2-2-静态代理"><a href="#2-2-静态代理" class="headerlink" title="2.2 静态代理"></a>2.2 静态代理</h3><p>创建静态代理类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorStaticProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token comment">// 将被代理的目标对象声明为成员变量</span>    <span class="token keyword">private</span> <span class="token class-name">Calculator</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CalculatorStaticProxy</span><span class="token punctuation">(</span><span class="token class-name">Calculator</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 附加功能由代理类中的代理方法来实现</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] add 方法开始了，参数是："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过目标对象来实现核心业务逻辑</span>        <span class="token keyword">int</span> addResult <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[日志] add 方法结束了，结果是："</span> <span class="token operator">+</span> addResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> addResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来<br>说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代<br>码，日志功能还是分散的，没有统一管理。<br>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理<br>类来实现。这就需要使用动态代理技术了。</p></blockquote><h3 id="2-3-动态代理"><a href="#2-3-动态代理" class="headerlink" title="2.3 动态代理"></a>2.3 动态代理</h3><p>！<a href="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316203123.png"></a><br>生产代理对象的工厂类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/**        * newProxyInstance()：创建一个代理实例        * 其中有三个参数：        * 1、classLoader：加载动态生成的代理类的类加载器        * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组        * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法        */</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>                <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                <span class="token comment">/**                * proxy：代理对象                * method：代理对象需要实现的方法，即其中需要重写的方法                * args：method所对应方法的参数                */</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[动态代理][日志] "</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，参数："</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[动态代理][日志] "</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，结果："</span><span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[动态代理][日志] "</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，异常："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[动态代理][日志] "</span><span class="token operator">+</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，方法执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span>invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ProxyFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CalculatorLogImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Calculator</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Calculator</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    proxy<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//proxy.div(1,1);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-AOP概念及相关术语"><a href="#3-AOP概念及相关术语" class="headerlink" title="3. AOP概念及相关术语"></a>3. AOP概念及相关术语</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面<br>向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况<br>下给程序动态统一添加额外功能的一种技术。</p><h3 id="3-2-相关术语"><a href="#3-2-相关术语" class="headerlink" title="3.2 相关术语"></a>3.2 相关术语</h3><ol><li>横切关注点<br>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方<br>法进行多个不同方面的增强。<br>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横<br>切关注点。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316203819.png"></li><li>通知<br>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</li></ol><ul><li>前置通知：在被代理的目标方法前执行</li><li>返回通知：在被代理的目标方法成功结束后执行（寿终正寝）</li><li>异常通知：在被代理的目标方法异常结束后执行（死于非命）</li><li>后置通知：在被代理的目标方法最终结束后执行（盖棺定论）</li><li>环绕通知：使用try…catch…finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316204010.png"></li></ul><ol start="3"><li>切面<br>封装通知方法的类。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316204055.png"></li><li>目标<br>被代理的目标对象。</li><li>代理<br>向目标对象应用通知之后创建的代理对象。</li><li>连接点<br>这也是一个纯逻辑概念，不是语法定义的。<br>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉<br>点就是连接点。<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316204339.png"></li><li>切入点<br>定位连接点的方式。<br>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。<br>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。<br>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。<br>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条<br>件。</li></ol><h3 id="3-3-作用"><a href="#3-3-作用" class="headerlink" title="3.3 作用"></a>3.3 作用</h3><ul><li>简化代码：把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能，<br>提高内聚性。</li><li>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就<br>被切面给增强了。</li></ul><h2 id="4-基于注解的AOP"><a href="#4-基于注解的AOP" class="headerlink" title="4. 基于注解的AOP"></a>4. 基于注解的AOP</h2><h3 id="4-1-技术说明"><a href="#4-1-技术说明" class="headerlink" title="4.1 技术说明"></a>4.1 技术说明</h3><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316204600.png"></p><ul><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因<br>为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。</li><li>cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最<br>终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</li></ul><h3 id="4-2-准备工作"><a href="#4-2-准备工作" class="headerlink" title="4.2 准备工作"></a>4.2 准备工作</h3><ol><li>添加依赖<br>在IOC所需依赖基础上再加入下面依赖即可：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>准备被代理的目标资源<br>接口：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorPureImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法内部 result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-创建切面类并配置"><a href="#4-3-创建切面类并配置" class="headerlink" title="4.3 创建切面类并配置"></a>4.3 创建切面类并配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// @Aspect表示这个类是一个切面类</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">// @Component注解保证这个切面类能够放入IOC容器</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>"<span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>CalculatorImpl</span><span class="token punctuation">.</span>*    <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;前置通知，方法名："</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"，参数："</span><span class="token operator">+</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;后置通知，方法名："</span><span class="token operator">+</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> "<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span>    <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>CalculatorImpl</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">", returning = "</span>result"<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;返回通知，方法名："</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"，结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> "<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span>    <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>CalculatorImpl</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">", throwing = "</span>ex"<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowingMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;异常通知，方法名："</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"，异常："</span><span class="token operator">+</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundMethod</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知--&gt;目标对象方法执行之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//目标对象（连接点）方法的执行</span>            result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知--&gt;目标对象方法返回值之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知--&gt;目标对象方法出现异常时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知--&gt;目标对象方法执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Spring的配置文件中配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--基于注解的AOP的实现：1、将目标对象和切面交给IOC容器管理（注解+扫描）2、开启AspectJ的自动代理，为目标对象自动生成代理3、将切面类通过注解@Aspect标识--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.aop.annotation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-各种通知"><a href="#4-4-各种通知" class="headerlink" title="4.4 各种通知"></a>4.4 各种通知</h3><ul><li>前置通知：使用@Before注解标识，在被代理的目标方法前执行</li><li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法成功结束后执行（寿终正寝）</li><li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法异常结束后执行（死于非命）</li><li>后置通知：使用@After注解标识，在被代理的目标方法最终结束后执行（盖棺定论）</li><li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><blockquote><p>各种通知的执行顺序：<br>Spring版本5.3.x以前：</p><blockquote><ul><li>前置通知</li><li>目标操作</li><li>后置通知</li><li>返回通知或异常通知</li></ul></blockquote></blockquote><blockquote><p>Spring版本5.3.x以后：</p><blockquote><ul><li>前置通知</li><li>目标操作</li><li>返回通知或异常通知</li><li>后置通知</li></ul></blockquote></blockquote><h3 id="4-5-切入点表达式语法"><a href="#4-5-切入点表达式语法" class="headerlink" title="4.5 切入点表达式语法"></a>4.5 切入点表达式语法</h3><ol><li>作用<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316210014.png" alt="img"></li><li>语法细节<ul><li>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</li><li>在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。<blockquote><p>例如：*.Hello匹配com.Hello，不匹配com.zhn.Hello</p></blockquote></li><li>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</li><li>在类名的部分，类名部分整体用*号代替，表示类名任意</li><li>在类名的部分，可以使用*号代替类名的一部分<blockquote><p>例如：*Service匹配所有名称以Service结尾的类或接口</p></blockquote></li><li>在方法名部分，可以使用*号表示方法名任意</li><li>在方法名部分，可以使用*号代替方法名的一部分<blockquote><p>例如：*Operation匹配所有方法名以Operation结尾的方法</p></blockquote></li><li>在方法参数列表部分，使用(..)表示参数列表任意</li><li>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</li><li>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的<blockquote><p>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</p></blockquote></li><li>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符<blockquote><p>例如：execution(public int ..Service.<em>(.., int)) 正确<br>例如：execution(</em> int ..Service.*(.., int)) 错误<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316210310.png"></p></blockquote></li></ul></li></ol><h3 id="4-6-重用切入点表达式"><a href="#4-6-重用切入点表达式" class="headerlink" title="4.6 重用切入点表达式"></a>4.6 重用切入点表达式</h3><ol><li>声明<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.atguigu.aop.annotation.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>在同一个切面中使用<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;前置通知，方法名："</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"，参数："</span><span class="token operator">+</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在不同切面中使用 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.aop.CommonPointCut.pointCut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;前置通知，方法名："</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"，参数："</span><span class="token operator">+</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-7-获取通知的相关信息"><a href="#4-7-获取通知的相关信息" class="headerlink" title="4.7 获取通知的相关信息"></a>4.7 获取通知的相关信息</h3><ol><li>获取连接点信息<br>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//获取连接点的签名信息</span>     <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取目标方法到的实参信息</span>     <span class="token class-name">String</span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;前置通知，方法名："</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"，参数："</span><span class="token operator">+</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>获取目标方法的返回值<br>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> "<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>CalculatorImpl</span><span class="token punctuation">.</span>* <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">", returning = "</span>result"<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;返回通知，方法名："</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"，结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>获取目标方法的异常<br>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> "<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>CalculatorImpl</span><span class="token punctuation">.</span>* <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">", throwing = "</span>ex"<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowingMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger--&gt;异常通知，方法名："</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"，异常："</span><span class="token operator">+</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-8-环绕通知"><a href="#4-8-环绕通知" class="headerlink" title="4.8 环绕通知"></a>4.8 环绕通知</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundMethod</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知--&gt;目标对象方法执行之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span>        result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知--&gt;目标对象方法返回值之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知--&gt;目标对象方法出现异常时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知--&gt;目标对象方法执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-切面的优先级"><a href="#4-9-切面的优先级" class="headerlink" title="4.9 切面的优先级"></a>4.9 切面的优先级</h3><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面<br>使用@Order注解可以控制切面的优先级：</li><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230316210956.png"></li></ul><h2 id="5-基于XML的AOP（了解）"><a href="#5-基于XML的AOP（了解）" class="headerlink" title="5. 基于XML的AOP（了解）"></a>5. 基于XML的AOP（了解）</h2><h3 id="5-1-准备工作"><a href="#5-1-准备工作" class="headerlink" title="5.1 准备工作"></a>5.1 准备工作</h3><p>参考基于注解的AOP环境</p><h3 id="5-2-实现"><a href="#5-2-实现" class="headerlink" title="5.2 实现"></a>5.2 实现</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zhn.aop.xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置切面类--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loggerAspect<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(*com.zhn.aop.xml.CalculatorImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeMethod<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterMethod<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterReturningMethod<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-returning</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterThrowingMethod<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-throwing</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aroundMethod<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>around</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>validateAspect<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>validateBeforeMethod<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointCut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Aop </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> 代理模式 </tag>
            
            <tag> 切面编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC获取请求参数的几种方式</title>
      <link href="/2023/03/15/SpringMVC%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/03/15/SpringMVC%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h1><h2 id="1-通过ServletAPI获取"><a href="#1-通过ServletAPI获取" class="headerlink" title="1. 通过ServletAPI获取"></a>1. 通过ServletAPI获取</h2><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请<br>求的请求报文的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">",password:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-通过控制器方法的形参获取请求参数"><a href="#2-通过控制器方法的形参获取请求参数" class="headerlink" title="2. 通过控制器方法的形参获取请求参数"></a>2. 通过控制器方法的形参获取请求参数</h2><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在<br>DispatcherServlet中就会将请求参数赋值给相应的形参</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testParam(username='admin',password=123456)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试获取请求参数--&gt;/testParam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">",password:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注:</p><ul><li>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串<br>数组或者字符串类型的形参接收此请求参数</li><li>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</li><li>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</li></ul></blockquote><h2 id="3-RequestParam"><a href="#3-RequestParam" class="headerlink" title="3. @RequestParam"></a>3. @RequestParam</h2><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系<br>@RequestParam注解一共有三个属性：<br>value：指定为形参赋值的请求参数的参数名<br>required：设置是否必须传输此请求参数，默认值为true<br>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置<br>defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为<br>false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为<br>null<br>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值<br>为””时，则使用默认值为形参赋值</p><h2 id="4-RequestHeader"><a href="#4-RequestHeader" class="headerlink" title="4. @RequestHeader"></a>4. @RequestHeader</h2><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系<br>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h2 id="5-CookieValue"><a href="#5-CookieValue" class="headerlink" title="5. @CookieValue"></a>5. @CookieValue</h2><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系<br>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h2 id="6-通过POJO获取请求参数"><a href="#6-通过POJO获取请求参数" class="headerlink" title="6. 通过POJO获取请求参数"></a>6. 通过POJO获取请求参数</h2><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实<br>体类中的属性名一致，那么请求参数就会为此属性赋值</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testpojo}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testpojo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testPOJO</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//最终结果--&gt;User{id=null, username='张三', password='123', age=23, sex='男',email='123@qq.com'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-解决获取请求参数的乱码问题"><a href="#7-解决获取请求参数的乱码问题" class="headerlink" title="7. 解决获取请求参数的乱码问题"></a>7. 解决获取请求参数的乱码问题</h2><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是<br>必须在web.xml中进行注册</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置springMVC的编码过滤器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注:<br>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM框架 </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> 请求参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2023/03/15/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/03/15/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><blockquote><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点<br>示例:</p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>限制:<br>0 &lt;= 节点个数 &lt;= 5000</p></blockquote></blockquote><h1 id="做题思路"><a href="#做题思路" class="headerlink" title="做题思路:"></a>做题思路:</h1><p>事先保存每个节点的前一个节点，随后在我们遍历链表的过程中，需要将当前节点的next 指针改为指向它的前一个节点</p><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤:"></a>解题步骤:</h2><ol><li>设置两个指针，curr 指向链表头节点，pre 指向空</li><li>暂存 curr 的后继节点，next = curr.next</li><li>将 curr.next 反指向pre</li><li>将 pre 指向 curr，即 pre 指针后移</li><li>将 curr 指向 2 中暂存的 next 节点，即 curr 指针后移 循环 第2 到 5 步，直到 curr 遍历完整个链表</li></ol><p><strong>图解:</strong><br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/web_1678865461843.png"></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           curr<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>           pre <span class="token operator">=</span> curr<span class="token punctuation">;</span>           curr <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从尾到头打印链表</title>
      <link href="/2023/03/15/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/03/15/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><blockquote><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）<br>示例:</p><blockquote><p>输入：head = [1,3,2]<br>输出：[2,3,1]</p></blockquote></blockquote><p>限制：<br>0 &lt;= 链表长度 &lt;= 10000</p><h2 id="做题思路"><a href="#做题思路" class="headerlink" title="做题思路:"></a>做题思路:</h2><p>计算长度创建数组，再逆向赋值</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包含min函数的栈</title>
      <link href="/2023/03/11/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
      <url>/2023/03/11/%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><blockquote><p><strong>示例:</strong><br>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.min();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.min();   –&gt; 返回 -2.<br><strong>提示:</strong><br>各函数的调用总次数不超过 20000 次</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h1><p>可以在每个元素 n 入栈时把当前栈的最小值 m 存储起来。在这之后无论何时，如果栈顶元素是 n，我们就可以直接返回存储的最小值 m。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法:"></a>算法:</h2><p>按照上面的思路，我们只需要设计一个数据结构，使得每个元素 a 与其相应的最小值 m 时刻保持一一对应。因此我们可以使用一个辅助栈，与元素栈同步插入与删除，用于存储与每个元素对应的最小值。</p><ul><li>当一个元素要入栈时，我们取当前辅助栈的栈顶存储的最小值，与当前元素比较得出最小值，将这个最小值插入辅助栈中；</li><li>当一个元素要出栈时，我们把辅助栈的栈顶元素也一并弹出；</li><li>在任意一个时刻，栈内元素的最小值就存储在辅助栈的栈顶元素中。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> xStack<span class="token punctuation">;</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> minStack<span class="token punctuation">;</span>    <span class="token comment">/** initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        xStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> xStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接：<a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/solution/bao-han-minhan-shu-de-zhan-by-leetcode-s-i2fk/">https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/solution/bao-han-minhan-shu-de-zhan-by-leetcode-s-i2fk/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RequestMapping注解</title>
      <link href="/2023/03/11/@RequestMapping%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/03/11/@RequestMapping%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h1><h2 id="1-RequestMapping注解的功能"><a href="#1-RequestMapping注解的功能" class="headerlink" title="1. @RequestMapping注解的功能"></a>1. @RequestMapping注解的功能</h2><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联<br>起来，建立映射关系。<br>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h2 id="2-RequestMapping注解的位置"><a href="#2-RequestMapping注解的位置" class="headerlink" title="2. @RequestMapping注解的位置"></a>2. @RequestMapping注解的位置</h2><blockquote><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息<br>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestMappingController</span> <span class="token punctuation">{</span><span class="token comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-RequestMapping注解的value属性"><a href="#3-RequestMapping注解的value属性" class="headerlink" title="3. @RequestMapping注解的value属性"></a>3. @RequestMapping注解的value属性</h2><blockquote><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射<br>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址<br>所对应的请求<br>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testRequestMapping}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-RequestMapping注解的method属性"><a href="#4-RequestMapping注解的method属性" class="headerlink" title="4. @RequestMapping注解的method属性"></a>4. @RequestMapping注解的method属性</h2><blockquote><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射<br>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配<br>多种请求方式的请求<br>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错<br>405：Request method ‘POST’ not supported</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注:<br>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解<br>处理get请求的映射–&gt;<strong>@GetMapping</strong><br>处理post请求的映射–&gt;<strong>@PostMapping</strong><br>处理put请求的映射–&gt;<strong>@PutMapping</strong><br>处理delete请求的映射–&gt;<strong>@DeleteMapping</strong><br>2、常用的请求方式有get，post，put，delete<br>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符<br>串（put或delete），则按照默认的请求方式get处理<br>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter</p></blockquote><h2 id="5-RequestMapping注解的params属性（了解）"><a href="#5-RequestMapping注解的params属性（了解）" class="headerlink" title="5.@RequestMapping注解的params属性（了解）"></a>5.@RequestMapping注解的params属性（了解）</h2><blockquote><ul><li>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</li><li>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</li></ul><blockquote><ol><li>“param”：要求请求映射所匹配的请求必须携带param请求参数</li><li>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</li><li>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</li><li>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</li></ol></blockquote></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test(username='admin',password=123456)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的params属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>    value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">}</span>    <span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">}</span>    <span class="token punctuation">,</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password!=123456"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注:<br>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时<br>页面回报错400：Parameter conditions “username, password!=123456” not met for actual<br>request parameters: username={admin}, password={123456}</p></blockquote><h2 id="6-RequestMapping注解的headers属性（了解）"><a href="#6-RequestMapping注解的headers属性（了解）" class="headerlink" title="6.@RequestMapping注解的headers属性（了解）"></a>6.@RequestMapping注解的headers属性（了解）</h2><blockquote><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射<br>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信<br>息和请求映射的匹配关系<br>“header”：要求请求映射所匹配的请求必须携带header请求头信息<br>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息<br>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value<br>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value<br>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面<br>显示404错误，即资源未找到</p></blockquote><h2 id="7-SpringMVC支持ant风格的路径"><a href="#7-SpringMVC支持ant风格的路径" class="headerlink" title="7.SpringMVC支持ant风格的路径"></a>7.SpringMVC支持ant风格的路径</h2><blockquote><p>？：表示任意的单个字符<br>*：表示任意的0个或多个字符<br><strong>：表示任意层数的任意目录<br>注意：在使用</strong>时，只能使用/**/xxx的方式</p></blockquote><h2 id="8-SpringMVC支持路径中的占位符（重点）"><a href="#8-SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8.SpringMVC支持路径中的占位符（重点）"></a>8.SpringMVC支持路径中的占位符（重点）</h2><p>原始方式：/deleteUser?id=1<br>rest方式：/user/delete/1</p><blockquote><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服<br>务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在<br>通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testRest/1/admin}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试路径中的占位符--&gt;/testRest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRest/{id}/{username}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">",username:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//最终输出的内容为--&gt;id:1,username:admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> ＠RequestMapping </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>resultMap和resultType的使用</title>
      <link href="/2023/03/10/resultMap%E5%92%8CresultType%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/10/resultMap%E5%92%8CresultType%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-resultType"><a href="#1-resultType" class="headerlink" title="1. resultType"></a>1. resultType</h1><p>该属性就是返回的类型,就是将resultType查询到的结果映射封装成pojo类型中，前提是该pojo类的属性名和查询到的数据库表的字段名一致。这种映射封装mybatis帮我们自动做好了，不需要我们自己考虑。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h2><ul><li>如果只是返回一个值，比如说String或者int，那直接用resultType就行了<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>selectStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hashmap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from student    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span><span class="token punctuation">&gt;</span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果sql查询结果返回的列名和实体类中的字段名一致，可以使用resultType，MyBatis会自动把查询结果赋值给和字段名一致的字段</li><li>如若不一致也可以通过起别名的方式使其一致</li></ul><h1 id="2-resultMap"><a href="#2-resultMap" class="headerlink" title="2. resultMap"></a>2. resultMap</h1><p>resultMap可以实现将查询结果映射为复杂类型的pojo，比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询。<br><strong>当sql的列名和实体列名不一致的时候就可以使用resultMap</strong></p><h2 id="resultMap常用的属性"><a href="#resultMap常用的属性" class="headerlink" title="resultMap常用的属性"></a>resultMap常用的属性</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>唯一标识<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>映射的entity对象的绝对路径<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表主键字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>映射entity对象的主键属性<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表某个字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>映射entity对象的某个属性<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token comment">&lt;!-- 指的是entity对象中的对象属性 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entity中某个对象属性<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个对象的绝对路径<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个对象属性对应的表的主键字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个对象属性内的主键属性<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表某个字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个对象属性内的某个属性<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- 指的是entity对象中的集合属性 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entity中的某个集合属性<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个集合泛型所存实体类的绝对路径<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个集合属性中泛型所存实体类对象对应表的主键字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span>            <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个集合属性中泛型所存实体类对象的主键属性<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表某个字段<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段类型<span class="token punctuation">"</span></span>                 <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个集合属性泛型所存实体类对象的属性<span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- 引用另一个resultMap (套娃) --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entity中的某个集合属性<span class="token punctuation">"</span></span>                 <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这个引用的resultMap的type,就是这个集合属性泛型所存实体类的绝对路径<span class="token punctuation">"</span></span>    <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select id, user_name, sex from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对于简单的映射，resultType和resultMap区别不大。但是resultMap功能更强大</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resultMap </tag>
            
            <tag> resultType </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现队列</title>
      <link href="/2023/03/10/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2023/03/10/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead&nbsp;操作返回 -1 )</p><p>示例 1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：<span class="token punctuation">[</span><span class="token string">"CQueue"</span><span class="token punctuation">,</span><span class="token string">"appendTail"</span><span class="token punctuation">,</span><span class="token string">"deleteHead"</span><span class="token punctuation">,</span><span class="token string">"deleteHead"</span><span class="token punctuation">,</span><span class="token string">"deleteHead"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>示例 <span class="token number">2</span>：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：<span class="token punctuation">[</span><span class="token string">"CQueue"</span><span class="token punctuation">,</span><span class="token string">"deleteHead"</span><span class="token punctuation">,</span><span class="token string">"appendTail"</span><span class="token punctuation">,</span><span class="token string">"appendTail"</span><span class="token punctuation">,</span><span class="token string">"deleteHead"</span><span class="token punctuation">,</span><span class="token string">"deleteHead"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= values &lt;= 10000</code></li><li>最多会对 <code>&nbsp;appendTail、deleteHead&lt;span&gt;&nbsp;&lt;/span&gt;</code>进行 <code>&nbsp;10000</code> 次调用</li></ul><h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h1><p>将一个栈当作输入栈，用于压入传入的数据<br>另一个栈当作输出栈，用于出队操作<br>队列头部删除操作中，若输出栈的数据为空则将输入栈的全部数据依次弹出并压入输出栈，则输出栈的元素出栈顺序就和队列出队顺序一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CQueue</span><span class="token punctuation">{</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> in<span class="token punctuation">;</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        in<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token function">inout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法题 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis的增删改查</title>
      <link href="/2023/03/09/Mybatis%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2023/03/09/Mybatis%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-MyBatis的基本增删改查"><a href="#1-MyBatis的基本增删改查" class="headerlink" title="1.MyBatis的基本增删改查"></a>1.MyBatis的基本增删改查</h1><h2 id="1-1、新增"><a href="#1-1、新增" class="headerlink" title="1.1、新增"></a>1.1、新增</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--int insertUser();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>insert into t_user values(null,'admin','123456',23,'男')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2、删除"><a href="#1-2、删除" class="headerlink" title="1.2、删除"></a>1.2、删除</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--int deleteUser();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>delete from t_user where id = 7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3、修改"><a href="#1-3、修改" class="headerlink" title="1.3、修改"></a>1.3、修改</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--int updateUser();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>update t_user set username='ybc',password='123' where id = 6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4、查询一个实体类对象"><a href="#1-4、查询一个实体类对象" class="headerlink" title="1.4、查询一个实体类对象"></a>1.4、查询一个实体类对象</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--User getUserById();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from t_user where id = 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5、查询list集合"><a href="#1-5、查询list集合" class="headerlink" title="1.5、查询list集合"></a>1.5、查询list集合</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ol><li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系</li><li>resultType：自动映射，用于属性名和表中字段名一致的情况</li><li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li></ol></blockquote><h1 id="2-MyBatis获取参数值的两种方式"><a href="#2-MyBatis获取参数值的两种方式" class="headerlink" title="2.MyBatis获取参数值的两种方式"></a>2.MyBatis获取参数值的两种方式</h1><blockquote><p>MyBatis获取参数值的两种方式：**${} 和 #{}**<br>${}的本质就是字符串拼接，#{}的本质就是占位符赋值<br>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引 号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</p></blockquote><h2 id="2-1、单个字面量类型的参数"><a href="#2-1、单个字面量类型的参数" class="headerlink" title="2.1、单个字面量类型的参数"></a>2.1、单个字面量类型的参数</h2><blockquote><p>若mapper接口中的方法参数为单个的字面量类型此时可以使用{}和#{}以任意的名称获取参数的值，注意{}和#{}以任意的名称获取参数的值，注意{}需要手动加单引号</p></blockquote><h2 id="2-2、多个字面量类型的参数"><a href="#2-2、多个字面量类型的参数" class="headerlink" title="2.2、多个字面量类型的参数"></a>2.2、多个字面量类型的参数</h2><blockquote><p>若mapper接口中的方法参数为多个时此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p></blockquote><h2 id="2-3、map集合类型的参数"><a href="#2-3、map集合类型的参数" class="headerlink" title="2.3、map集合类型的参数"></a>2.3、map集合类型的参数</h2><blockquote><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过{}和#{}访问map集合的键就可以获取相对应的值，注意{}需要手动加单引号</p></blockquote><h2 id="2-4、实体类类型的参数"><a href="#2-4、实体类类型的参数" class="headerlink" title="2.4、实体类类型的参数"></a>2.4、实体类类型的参数</h2><blockquote><p>若mapper接口中的方法参数为实体类对象时此时可以使用{}和#{}，通过访问实体类对象中的属性名获取属性值，注意{}和#{}，通过访问实体类对象中的属性名获取属性值，注意{}需要手动加单引号</p></blockquote><h2 id="2-5、使用-Param标识参数"><a href="#2-5、使用-Param标识参数" class="headerlink" title="2.5、使用@Param标识参数"></a>2.5、使用@Param标识参数</h2><blockquote><p>可以通过@Param注解标识mapper接口中的方法参数此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p></blockquote><h1 id="3-MyBatis的各种查询功能"><a href="#3-MyBatis的各种查询功能" class="headerlink" title="3.MyBatis的各种查询功能"></a>3.MyBatis的各种查询功能</h1><h2 id="3-1、查询一个实体类对象"><a href="#3-1、查询一个实体类对象" class="headerlink" title="3.1、查询一个实体类对象"></a>3.1、查询一个实体类对象</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据用户id查询用户信息* @param id* @return*/</span><span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--User getUserById(@Param("id") int id);--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from t_user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2、查询一个list集合"><a href="#3-2、查询一个list集合" class="headerlink" title="3.2、查询一个list集合"></a>3.2、查询一个list集合</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 查询所有用户信息* @return*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常</p><p>TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p></blockquote><h2 id="3-3、查询单个数据"><a href="#3-3、查询单个数据" class="headerlink" title="3.3、查询单个数据"></a>3.3、查询单个数据</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 查询用户的总记录数* @return* 在MyBatis中，对于Java中常用的类型都设置了类型别名* 例如： java.lang.Integer--&gt;int|integer* 例如： int--&gt;_int|_integer* 例如： Map--&gt;map,List--&gt;list*/</span><span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--int getCount();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getCount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_integer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select count(id) from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4、查询一条数据为map集合"><a href="#3-4、查询一条数据为map集合" class="headerlink" title="3.4、查询一条数据为map集合"></a>3.4、查询一条数据为map集合</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据用户id查询用户信息为map集合* @param id* @return*/</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserToMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param("id") int id);--&gt;</span><span class="token comment">&lt;!--结果： {password=123456, sex=男 , id=1, age=23, username=admin}--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from t_user where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5、查询多条数据为map集合"><a href="#3-5、查询多条数据为map集合" class="headerlink" title="3.5、查询多条数据为map集合"></a>3.5、查询多条数据为map集合</h2><h3 id="①方式一"><a href="#①方式一" class="headerlink" title="①方式一"></a>①方式一</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 查询所有用户信息为map集合* @return* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllUserToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②方式二"><a href="#②方式二" class="headerlink" title="②方式二"></a>②方式二</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 查询所有用户信息为map集合* @return* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过@MapKey注解设置map集合的键，值是每条数据所对应的map集合*/</span><span class="token annotation punctuation">@MapKey</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllUserToMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span><span class="token comment">&lt;!--{    1={password=123456, sex=男, id=1, age=23, username=admin},    2={password=123456, sex=男, id=2, age=23, username=张三},    3={password=123456, sex=男, id=3, age=23, username=张三}}--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllUserToMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from t_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis的基本增删改查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis的搭建过程</title>
      <link href="/2023/03/08/Mybatis%E7%9A%84%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2023/03/08/Mybatis%E7%9A%84%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="搭建MyBatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><h2 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h2><p>IDE：idea 2019.2</p><p>构建工具：maven 3.5.4</p><p>MySQL版本：MySQL 8</p><p>MyBatis版本：MyBatis 3.5.7</p><blockquote><p>MySQL不同版本的注意事项<br><strong>1、驱动类driver-class-name</strong><br>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver<br>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p></blockquote><blockquote><p><strong>2、连接地址url</strong><br>MySQL 5版本的url：<br>jdbc:mysql://localhost:3306/ssm<br>MySQL 8版本的url：<br>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<br>否则运行测试用例报告如下错误：<br>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or<br>represents more</p></blockquote><h2 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h2><ol><li>打包方式:jar</li><li>引入依赖</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- Mybatis核心 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- junit测试 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- MySQL驱动 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、创建MyBatis的核心配置文件"><a href="#3、创建MyBatis的核心配置文件" class="headerlink" title="3、创建MyBatis的核心配置文件"></a>3、创建MyBatis的核心配置文件</h2><blockquote><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring<br>之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src/main/resources目录下</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--设置连接数据库的环境--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--引入映射文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mappers/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、创建mapper接口"><a href="#4、创建mapper接口" class="headerlink" title="4、创建mapper接口"></a>4、创建mapper接口</h2><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要<br>提供实现类。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>        <span class="token comment">/**    * 添加用户信息    */</span>    <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、创建Mybatis的映射文件"><a href="#5、创建Mybatis的映射文件" class="headerlink" title="5、创建Mybatis的映射文件"></a>5、创建Mybatis的映射文件</h2><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。</p><ul><li>对象：Java的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul><table><thead><tr><th align="center">Java概念</th><th align="center">数据库概念</th></tr></thead><tbody><tr><td align="center">类</td><td align="center">表</td></tr><tr><td align="center">属性</td><td align="center">字段/列</td></tr><tr><td align="center">对象</td><td align="center">记录/行</td></tr></tbody></table><blockquote><p>1、映射文件的命名规则：</p></blockquote><p>表所对应的实体类的类名+Mapper.xml<br>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml<br>因此一个映射文件对应一个实体类，对应一张表的操作<br>MyBatis映射文件用于编写SQL，访问以及操作表中的数据<br>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</p><blockquote><p>2、 MyBatis中可以面向接口操作数据，要保证两个一致：</p></blockquote><p>a&gt;mapper接口的全类名和映射文件的命名空间（namespace）保持一致<br>b&gt;mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--int insertUser();--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nsert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;insert into t_user values(null,'admin','123456',23,'男','12345@qq.com')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、通过junit测试功能"><a href="#6、通过junit测试功能" class="headerlink" title="6、通过junit测试功能"></a>6、通过junit测试功能</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//读取MyBatis的核心配置文件</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建SqlSessionFactoryBuilder对象</span><span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span><span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span><span class="token comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span><span class="token comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过代理模式创建UserMapper接口的代理实现类对象</span><span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span>映射文件中的<span class="token constant">SQL</span>标签，并执行标签中的<span class="token constant">SQL</span>语句<span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sqlSession.commit();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）<br>SqlSessionFactory：是“生产”SqlSession的“工厂”。<br>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的<br>相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p></blockquote><h2 id="7、加入log4j日志功能"><a href="#7、加入log4j日志功能" class="headerlink" title="7、加入log4j日志功能"></a>7、加入log4j日志功能</h2><ol><li>加入依赖<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- log4j日志 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>加入log4j的配置文件<blockquote><p> log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下   </p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">log4j:configuration</span> <span class="token name">SYSTEM</span> <span class="token string">"log4j.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">log4j:</span>configuration</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>log4j</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://jakarta.apache.org/log4j/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.log4j.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Encoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.log4j.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ConversionPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%-5p %d{MM-dd HH:mm:ss,SSS}%m (%F:%L) \n<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.sql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">log4j:</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>日志的级别</strong><br>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)<br>从左到右打印的内容越来越详细</p></blockquote></li></ol><h2 id="补充-核心配置文件详解"><a href="#补充-核心配置文件详解" class="headerlink" title="补充: 核心配置文件详解"></a>补充: 核心配置文件详解</h2><p><strong>核心配置文件中的标签必须按照固定的顺序：</strong></p><blockquote><p>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,refl<br>ectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--            MyBatis核心配置文件中，标签的顺序：            properties?,settings?,typeAliases?,typeHandlers?,            objectFactory?,objectWrapperFactory?,reflectorFactory?,            plugins?,environments?,databaseIdProvider?,mappers?--&gt;</span><span class="token comment">&lt;!--引入properties文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--设置类型别名--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--typeAlias：设置某个类型的别名属性：type：设置需要设置别名的类型alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名且不区分大小写--&gt;</span><span class="token comment">&lt;!--&lt;typeAlias type="com.atguigu.mybatis.pojo.User"&gt;&lt;/typeAlias&gt;--&gt;</span><span class="token comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--environments：配置多个连接数据库的环境属性：default：设置默认使用的环境的id--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--   environment：配置某个具体的环境属性：id：表示连接数据库的环境的唯一标识，不能重复--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--transactionManager：设置事务管理方式属性：type="JDBC|MANAGED"JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理MANAGED：被管理，例如Spring--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--dataSource：配置数据源属性：                 type：设置数据源的类型                 type="POOLED|UNPOOLED|JNDI"                    POOLED：表示使用数据库连接池缓存数据库连接                    UNPOOLED：表示不使用数据库连接池                    JNDI：表示使用上下文中的数据源   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                 <span class="token comment">&lt;!--设置连接数据库的驱动--&gt;</span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token comment">&lt;!--设置连接数据库的连接地址--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token comment">&lt;!--设置连接数据库的用户名--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token comment">&lt;!--设置连接数据库的密码--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/ssmserverTimezone=UTC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--引入映射文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--&lt;mapper resource="mappers/UserMapper.xml"/&gt;--&gt;</span> <span class="token comment">&lt;!--         以包为单位引入映射文件            要求：            1、mapper接口所在的包要和映射文件所在的包一致            2、mapper接口要和映射文件的名字一致   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis的搭建 </tag>
            
            <tag> Maven </tag>
            
            <tag> log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第04章 逻辑架构</title>
      <link href="/2023/03/03/%E7%AC%AC04%E7%AB%A0%20%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/03/03/%E7%AC%AC04%E7%AB%A0%20%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1-逻辑架构剖析"><a href="#1-逻辑架构剖析" class="headerlink" title="1. 逻辑架构剖析"></a><strong>1.</strong> <strong>逻辑架构剖析</strong></h4><h5 id="1-1-第1层：连接层"><a href="#1-1-第1层：连接层" class="headerlink" title="1.1 第1层：连接层"></a><strong>1.1</strong> <strong>第1层：连接层</strong></h5><p>系统（客户端）访问 <code>MySQL</code>服务器前，做的第一件事就是建立 <code>TCP</code>连接。</p><p>经过三次握手建立连接成功后，<code>MySQL</code>服务器对 <code>TCP</code>传输过来的账号密码做身份认证、权限获取。</p><ul><li><strong>用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行</strong></li><li><strong>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</strong></li></ul><p><code>TCP</code>连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><h5 id="1-2-第2层：服务层"><a href="#1-2-第2层：服务层" class="headerlink" title="1.2 第2层：服务层"></a><strong>1.2</strong> <strong>第2层：服务层</strong></h5><ul><li><p><strong>SQL Interface: SQL接口</strong></p><ul><li>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT … FROM就是调用SQL Interface</li><li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口</li></ul></li><li><p><strong>Parser:</strong> <strong>解析器</strong></p><ul><li>在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个SQL语句是不合理的。</li><li>在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建 <code>语法树</code>，并根据数据字典丰富查询语法树，会 <code>验证该客户端是否具有执行该查询的权限</code>。创建好语法树后，MySQL还会对SQL查询进行语法上的优化，进行查询重写。</li></ul></li><li><p><strong>Optimizer:</strong> <strong>查询优化器</strong></p><ul><li>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个 <code>执行计划</code>。</li><li>这个执行计划表明应该 <code>使用哪些索引</code>进行查询（全表检索还是使用索引检索），表之间的连接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。</li><li>它使用“<code>选取-投影-连接</code>”策略进行查询。例如：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT id,name FROM student WHERE gender = '女';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个SELECT查询先根据WHERE语句进行 <code>选取</code>，而不是将表全部查询出来以后再进行gender过滤。 这个SELECT查询先根据id和name进行属性 <code>投影</code>，而不是将属性全部取出以后再进行过滤，将这两个查询条件 <code>连接</code>起来生成最终查询结果。</p></li><li><p><strong>Caches &amp; Buffers： 查询缓存组件</strong></p><ul><li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过程了，直接将结果反馈给客户端。</li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li><li>这个查询缓存可以在 <code>不同客户端之间共享</code>。</li><li>从MySQL 5.7.20开始，不推荐使用查询缓存，并在 <code>MySQL 8.0中删除</code>。</li></ul></li></ul><h5 id="1-3-第3层：引擎层"><a href="#1-3-第3层：引擎层" class="headerlink" title="1.3 第3层：引擎层"></a><strong>1.3</strong> <strong>第3层：引擎层</strong></h5><p>插件式存储引擎层（ Storage Engines），<strong>真正的负责了MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作</strong>，服务层通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需求进行选取。<br>MySQL 8.0。25默认支持的存储引擎如下:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230303163353.png" alt="存储引擎"></p><h5 id="1-4-存储层"><a href="#1-4-存储层" class="headerlink" title="1.4 存储层"></a><strong>1.4</strong> <strong>存储层</strong></h5><p>所有的数据、数据库、表的定义，表的每一行的内容，索引，都是存在文件系统上，以文件的方式存在的，并完成存储引擎的交互。当然有些存储系统引擎比如innoDB，也支持不使用文件管理系统直接管理裸设备，但现代文件系统的实现使得这样做没有必要了。在文件系统下，可以使用本地磁盘，可以使用DAS、NAS、SAN等各种存储系统。</p><h5 id="1-5-小结"><a href="#1-5-小结" class="headerlink" title="1.5 小结"></a><strong>1.5</strong> <strong>小结</strong></h5><p>Mysql架构图简化如下:<br><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230303164615.png" alt="mysql架构图"><br>简化为三层结构：</p><ol><li>连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端；</li><li>SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关；</li><li>存储引擎层：与数据库文件打交道，负责数据的存储和读取。</li></ol><h4 id="2-SQL执行流程"><a href="#2-SQL执行流程" class="headerlink" title="2. SQL执行流程"></a><strong>2. SQL执行流程</strong></h4><h5 id="2-1-MySQL-中的-SQL执行流程"><a href="#2-1-MySQL-中的-SQL执行流程" class="headerlink" title="2.1 MySQL 中的 SQL执行流程"></a><strong>2.1 MySQL</strong> <strong>中的</strong> <strong>SQL执行流程</strong></h5><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230303165230.png"></p><p><strong>MySQL的查询流程：</strong></p><p><strong>1.</strong> <strong>查询缓存</strong>：Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端；如果没有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃了这个功能。</p><p>查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。这就意味着查询匹配的 <code>鲁棒性大大降低</code>，只有 <code>相同的查询操作才会命中查询缓存</code>。两个查询请求在任何字符上的不同（例如：空格、注释、大小写），都会导致缓存不会命中。因此 MySQL 的 查询缓存命中率不高 。</p><p>同时，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql、 information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存。</p><p>此外，既然是缓存，那就有它 <code>缓存失效的时候</code>。MySQL的缓存系统会监测涉及到的每张表，只要该表的结构或者数据被修改，如对该表使用了 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>TRUNCATE TABLE</code>、<code>ALTER TABLE</code>、<code>DROP TABLE</code>或 <code>DROP DATABASE</code>语句，那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除！对于 <code>更新压力大的数据库</code>来说，查询缓存的命中率会非常低。</p><p><strong>2.</strong> <strong>解析器</strong>：在解析器中对 SQL 语句进行语法分析、语义分析。</p><p>分析器先做“<code>词法分析</code>”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。 MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>接着，要做“<code>语法分析</code>”。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输入的这个 SQL 语句是否 <code>满足 MySQL 语法</code>。如果SQL语句正确，则会生成一个语法树。</p><p><strong>3.</strong> <strong>优化器</strong>：在优化器中会确定 SQL 语句的执行路径，比如是根据 <code>全表检索</code>，还是根据 <code>索引检索</code>等。在查询优化器中，可以分为 <code>逻辑查询</code>优化阶段和 <code>物理查询</code>优化阶段。</p><p><strong>4.</strong> <strong>执行器</strong>：在执行之前需要判断该用户是否 <code>具备权限</code>。如果没有，就会返回权限错误。如果具备权限，就执行 SQL查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/image-2025.png" alt="查询流程"></p><p>SQL 语句在 MySQL 中的流程是： SQL语句→查询缓存→解析器→优化器→执行器 。</p><h4 id="3-数据库缓冲池-buffer-pool"><a href="#3-数据库缓冲池-buffer-pool" class="headerlink" title="3. 数据库缓冲池(buffer pool)"></a><strong>3.</strong> <strong>数据库缓冲池(buffer pool)</strong></h4><p><code>InnoDB</code>存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页面（包括读页面、写页面、创建新页面等操作）。而磁盘 I/O 需要消耗的时间很多，而在内存中进行操作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会申请 <code>占用内存来作为数据缓冲池</code>，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的 <code>Buffer Pool</code>之后才可以访问。</p><p>这样做的好处是可以让磁盘活动最小化，从而 <code>减少与磁盘直接进行 I/O 的时间</code>。要知道，这种策略对提升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。</p><h5 id="3-1-缓冲池-vs-查询缓存"><a href="#3-1-缓冲池-vs-查询缓存" class="headerlink" title="3.1 缓冲池 vs 查询缓存"></a><strong>3.1</strong> <strong>缓冲池</strong> <strong>vs</strong> <strong>查询缓存</strong></h5><p><strong>1.</strong> <strong>缓冲池（Buffer Pool）</strong></p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230303194019.png" alt="缓冲池"></p><p>从图中，你能看到 InnoDB 缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应 Hash 和数据字典信息等。</p><p><strong>缓存原则：</strong></p><p>“<code>位置 * 频次</code>”这个原则，可以帮我们对 I/O 访问效率进行优化。</p><p>首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。</p><p>其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有 200G，但是内存只有 16G，缓冲池大小只有 1G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会 <code>优先对使用频次高的热数据进行加载</code>。</p><p><strong>2.</strong> <strong>查询缓存</strong></p><p>查询缓存是提前把 <code>查询结果缓存</code>起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。因为命中条件苛刻，而且只要数据表发生变化，查询缓存就会失效，因此命中率低。</p><h5 id="3-2-缓冲池如何读取数据"><a href="#3-2-缓冲池如何读取数据" class="headerlink" title="3.2 缓冲池如何读取数据"></a><strong>3.2</strong> <strong>缓冲池如何读取数据</strong></h5><p>缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。</p><p><img src="https://blog-images-1317062290.cos.ap-chengdu.myqcloud.com/img/20230303194106.png"></p><h5 id="3-3-查看-x2F-设置缓冲池的大小"><a href="#3-3-查看-x2F-设置缓冲池的大小" class="headerlink" title="3.3 查看/设置缓冲池的大小"></a><strong>3.3</strong> <strong>查看/设置缓冲池的大小</strong></h5><p>查看缓冲池的大小</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like 'innodb_buffer_pool_size';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置缓冲池的大小</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set global innodb_buffer_pool_size = 268435456;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">server</span><span class="token punctuation">]</span></span> <span class="token key attr-name">innodb_buffer_pool_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">268435456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-4-多个Buffer-Pool实例"><a href="#3-4-多个Buffer-Pool实例" class="headerlink" title="3.4 多个Buffer Pool实例"></a><strong>3.4</strong> <strong>多个Buffer Pool实例</strong></h5><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">server</span><span class="token punctuation">]</span></span> <span class="token key attr-name">innodb_buffer_pool_instances</span> <span class="token punctuation">=</span> <span class="token value attr-value">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>何查看缓冲池的个数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like 'innodb_buffer_pool_instances';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个 <code>Buffer Pool</code>实例实际占内存空间</p><pre class="line-numbers language-none"><code class="language-none">innodb_buffer_pool_size/innodb_buffer_pool_instances<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 尚硅谷学习笔记 </tag>
            
            <tag> Mysql高级篇 </tag>
            
            <tag> 逻辑架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第03章 用户与权限管理</title>
      <link href="/2023/03/01/%E7%AC%AC03%E7%AB%A0%20%E7%94%A8%E6%88%B7%E4%B8%8E%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2023/03/01/%E7%AC%AC03%E7%AB%A0%20%E7%94%A8%E6%88%B7%E4%B8%8E%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1. 用户管理"></a><strong>1.</strong> <strong>用户管理</strong></h4><h5 id="1-1-登录MySQL服务器"><a href="#1-1-登录MySQL服务器" class="headerlink" title="1.1 登录MySQL服务器"></a><strong>1.1</strong> <strong>登录MySQL服务器</strong></h5><p>启动MySQL服务后，可以通过mysql命令来登录MySQL服务器，命令如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql –h hostname|hostIP –P port –u username –p DatabaseName –e "SQL语句"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-h参数</code>后面接主机名或者主机IP，hostname为主机，hostIP为主机IP。</li><li><code>-P参数</code>后面接MySQL服务的端口，通过该参数连接到指定的端口。MySQL服务的默认端口是3306，不使用该参数时自动连接到3306端口，port为连接的端口号。</li><li><code>-u参数</code>后面接用户名，username为用户名。</li><li><code>-p参数</code>会提示输入密码。</li><li><code>DatabaseName参数</code>指明登录到哪一个数据库中。如果没有该参数，就会直接登录到MySQL数据库中，然后可以使用USE命令来选择数据库。</li><li><code>-e参数</code>后面可以直接加SQL语句。登录MySQL服务器以后即可执行这个SQL语句，然后退出MySQL服务器。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p -hlocalhost -P3306 mysql -e "select host,user from user"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2-创建用户"><a href="#1-2-创建用户" class="headerlink" title="1.2 创建用户"></a><strong>1.2</strong> <strong>创建用户</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE USER 用户名 [IDENTIFIED BY '密码'][,用户名 [IDENTIFIED BY '密码']];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE USER zhang3 IDENTIFIED BY '123123'; # 默认host是 %CREATE USER 'kangshifu'@'localhost' IDENTIFIED BY '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-3-修改用户"><a href="#1-3-修改用户" class="headerlink" title="1.3 修改用户"></a><strong>1.3</strong> <strong>修改用户</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE mysql.user SET USER='li4' WHERE USER='wang5'; FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-4-删除用户"><a href="#1-4-删除用户" class="headerlink" title="1.4 删除用户"></a><strong>1.4</strong> <strong>删除用户</strong></h5><p><strong>方式1：使用DROP方式删除（推荐）</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP USER user[,user]…;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP USER li4 ; # 默认删除host为%的用户DROP USER 'kangshifu'@'localhost';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>方式2：使用DELETE方式删除（不推荐，有残留信息）</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM mysql.user WHERE Host=’hostname’ AND User=’username’;FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-5-设置当前用户密码"><a href="#1-5-设置当前用户密码" class="headerlink" title="1.5 设置当前用户密码"></a><strong>1.5</strong> <strong>设置当前用户密码</strong></h5><p><strong>1.</strong> <strong>使用ALTER USER命令来修改当前用户密码</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER USER USER() IDENTIFIED BY 'new_password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>使用SET语句来修改当前用户密码</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET PASSWORD='new_password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-6-修改其它用户密码"><a href="#1-6-修改其它用户密码" class="headerlink" title="1.6 修改其它用户密码"></a><strong>1.6</strong> <strong>修改其它用户密码</strong></h5><p><strong>1.</strong> <strong>使用ALTER语句来修改普通用户的密码</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER USER user [IDENTIFIED BY '新密码'] [,user[IDENTIFIED BY '新密码']]…;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2.</strong> <strong>使用SET命令来修改普通用户的密码</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET PASSWORD FOR 'username'@'hostname'='new_password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-权限管理"><a href="#2-权限管理" class="headerlink" title="2. 权限管理"></a><strong>2.</strong> <strong>权限管理</strong></h4><h5 id="2-1-权限列表"><a href="#2-1-权限列表" class="headerlink" title="2.1 权限列表"></a><strong>2.1</strong> <strong>权限列表</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>CREATE和DROP权限</code>，可以创建新的数据库和表，或删除（移掉）已有的数据库和表。如果将MySQL数据库中的DROP权限授予某用户，用户就可以删除MySQL访问权限保存的数据库。</li><li><code>SELECT、INSERT、UPDATE和DELETE权限</code>允许在一个数据库现有的表上实施操作。</li><li><code>SELECT权限</code>只有在它们真正从一个表中检索行时才被用到。</li><li><code>INDEX权限</code>允许创建或删除索引，INDEX适用于已有的表。如果具有某个表的CREATE权限，就可以在CREATE TABLE语句中包括索引定义。</li><li><code>ALTER权限</code>可以使用ALTER TABLE来更改表的结构和重新命名表。</li><li><code>CREATE ROUTINE权限</code>用来创建保存的程序（函数和程序），<code>ALTER ROUTINE权限</code>用来更改和删除保存的程序，<code>EXECUTE权限</code>用来执行保存的程序。</li><li><code>GRANT权限</code>允许授权给其他用户，可用于数据库、表和保存的程序。</li><li><code>FILE权限</code>使用户可以使用LOAD DATA INFILE和SELECT … INTO OUTFILE语句读或写服务器上的文件，任何被授予FILE权限的用户都能读或写MySQL服务器上的任何文件（说明用户可以读任何数据库目录下的文件，因为服务器可以访问这些文件）。</li></ul><h5 id="2-2-授予权限的原则"><a href="#2-2-授予权限的原则" class="headerlink" title="2.2 授予权限的原则"></a><strong>2.2</strong> <strong>授予权限的原则</strong></h5><p>权限控制主要是出于安全因素，因此需要遵循以下几个 <code>经验原则</code>：</p><p>1、只授予能 <code>满足需要的最小权限</code>，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可以了，不要给用户赋予update、insert或者delete权限。</p><p>2、创建用户的时候 <code>限制用户的登录主机</code>，一般是限制成指定IP或者内网IP段。</p><p>3、为每个用户 <code>设置满足密码复杂度的密码</code>。</p><p>4、<code>定期清理不需要的用户</code>，回收权限或者删除用户。</p><h5 id="2-3-授予权限"><a href="#2-3-授予权限" class="headerlink" title="2.3 授予权限"></a><strong>2.3</strong> <strong>授予权限</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT 权限1,权限2,…权限n ON 数据库名称.表名称 TO 用户名@用户地址 [IDENTIFIED BY ‘密码口令’];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>该权限如果发现没有该用户，则会直接新建一个用户。</li><li>给li4用户用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT SELECT,INSERT,DELETE,UPDATE ON atguigudb.* TO li4@localhost;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>授予通过网络方式登录的joe用户 ，对所有库所有表的全部权限，密码设为123。注意这里唯独不包括grant的权限</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT ALL PRIVILEGES ON *.* TO joe@'%' IDENTIFIED BY '123';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-查看权限"><a href="#2-4-查看权限" class="headerlink" title="2.4 查看权限"></a><strong>2.4</strong> <strong>查看权限</strong></h5><ul><li>查看当前用户权限</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW GRANTS; # 或 SHOW GRANTS FOR CURRENT_USER; # 或 SHOW GRANTS FOR CURRENT_USER();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看某用户的全局权限</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW GRANTS FOR 'user'@'主机地址';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-5-收回权限"><a href="#2-5-收回权限" class="headerlink" title="2.5 收回权限"></a><strong>2.5</strong> <strong>收回权限</strong></h5><p><strong>注意：在将用户账户从user表删除之前，应该收回相应用户的所有权限。</strong></p><ul><li>收回权限命令</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">REVOKE 权限1,权限2,…权限n ON 数据库名称.表名称 FROM 用户名@用户地址;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>举例</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#收回全库全表的所有权限 REVOKE ALL PRIVILEGES ON *.* FROM joe@'%'; #收回mysql库下的所有表的插删改查权限 REVOKE SELECT,INSERT,UPDATE,DELETE ON mysql.* FROM joe@localhost;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：<code>须用户重新登录后才能生效</code></li></ul><h4 id="3-角色管理"><a href="#3-角色管理" class="headerlink" title="3. 角色管理"></a><strong>3.</strong> <strong>角色管理</strong></h4><h5 id="3-1-创建角色"><a href="#3-1-创建角色" class="headerlink" title="3.1 创建角色"></a><strong>3.1</strong> <strong>创建角色</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE ROLE 'role_name'[@'host_name'] [,'role_name'[@'host_name']]...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>角色名称的命名规则和用户名类似。如果 <code>host_name省略，默认为%</code>，<code>role_name不可省略</code>，不可为空。</p><h5 id="3-2-给角色赋予权限"><a href="#3-2-给角色赋予权限" class="headerlink" title="3.2 给角色赋予权限"></a><strong>3.2</strong> <strong>给角色赋予权限</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT privileges ON table_name TO 'role_name'[@'host_name'];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语句中privileges代表权限的名称，多个权限以逗号隔开。可使用SHOW语句查询权限名称</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW PRIVILEGES\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-3-查看角色的权限"><a href="#3-3-查看角色的权限" class="headerlink" title="3.3 查看角色的权限"></a><strong>3.3</strong> <strong>查看角色的权限</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW GRANTS FOR 'role_name';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只要你创建了一个角色，系统就会自动给你一个“<code>USAGE</code>”权限，意思是 <code>连接登录数据库的权限</code>。</p><h5 id="3-4-回收角色的权限"><a href="#3-4-回收角色的权限" class="headerlink" title="3.4 回收角色的权限"></a><strong>3.4</strong> <strong>回收角色的权限</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">REVOKE privileges ON tablename FROM 'rolename';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-5-删除角色"><a href="#3-5-删除角色" class="headerlink" title="3.5 删除角色"></a><strong>3.5</strong> <strong>删除角色</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP ROLE role [,role2]...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，<code>如果你删除了角色，那么用户也就失去了通过这个角色所获得的所有权限</code>。</p><h5 id="3-6-给用户赋予角色"><a href="#3-6-给用户赋予角色" class="headerlink" title="3.6 给用户赋予角色"></a><strong>3.6</strong> <strong>给用户赋予角色</strong></h5><p>角色创建并授权后，要赋给用户并处于 <code>激活状态</code>才能发挥作用。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT role [,role2,...] TO user [,user2,...];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询当前已激活的角色</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_ROLE();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-7-激活角色"><a href="#3-7-激活角色" class="headerlink" title="3.7 激活角色"></a><strong>3.7</strong> <strong>激活角色</strong></h5><p><strong>方式1：使用set default role 命令激活角色</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET DEFAULT ROLE ALL TO 'kangshifu'@'localhost';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>方式2：将activate_all_roles_on_login设置为ON</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL activate_all_roles_on_login=ON;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条 SQL 语句的意思是，对 <code>所有角色永久激活</code>。</p><h5 id="3-8-撤销用户的角色"><a href="#3-8-撤销用户的角色" class="headerlink" title="3.8 撤销用户的角色"></a><strong>3.8</strong> <strong>撤销用户的角色</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">REVOKE role FROM user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-9-设置强制角色-mandatory-role"><a href="#3-9-设置强制角色-mandatory-role" class="headerlink" title="3.9 设置强制角色(mandatory role)"></a><strong>3.9</strong> <strong>设置强制角色(mandatory role)</strong></h5><p>方式1：服务启动前设置</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span> <span class="token key attr-name">mandatory_roles</span><span class="token punctuation">=</span><span class="token value attr-value">'<span class="token inner-value">role1,role2@localhost,r3@%.atguigu.com</span>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方式2：运行时设置</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET PERSIST mandatory_roles = 'role1,role2@localhost,r3@%.example.com'; #系统重启后仍然有效SET GLOBAL mandatory_roles = 'role1,role2@localhost,r3@%.example.com'; #系统重启后失效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 尚硅谷学习笔记 </tag>
            
            <tag> Mysql高级篇 </tag>
            
            <tag> 用户管理 </tag>
            
            <tag> 权限管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第02章 MySQL的数据目录</title>
      <link href="/2023/03/01/%E7%AC%AC02%E7%AB%A0%20MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/"/>
      <url>/2023/03/01/%E7%AC%AC02%E7%AB%A0%20MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1-MySQL8的主要目录结构"><a href="#1-MySQL8的主要目录结构" class="headerlink" title="1. MySQL8的主要目录结构"></a><strong>1. MySQL8的主要目录结构</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-1-数据库文件的存放路径"><a href="#1-1-数据库文件的存放路径" class="headerlink" title="1.1 数据库文件的存放路径"></a><strong>1.1</strong> <strong>数据库文件的存放路径</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like 'datadir'; # /var/lib/mysql/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2-相关命令目录"><a href="#1-2-相关命令目录" class="headerlink" title="1.2 相关命令目录"></a><strong>1.2</strong> <strong>相关命令目录</strong></h5><p><strong>相关命令目录：/usr/bin 和/usr/sbin。</strong></p><h5 id="1-3-配置文件目录"><a href="#1-3-配置文件目录" class="headerlink" title="1.3 配置文件目录"></a><strong>1.3</strong> <strong>配置文件目录</strong></h5><p><strong>配置文件目录：/usr/share/mysql-8.0（命令及配置文件），/etc/mysql（如my.cnf）</strong></p><h4 id="2-数据库和文件系统的关系"><a href="#2-数据库和文件系统的关系" class="headerlink" title="2. 数据库和文件系统的关系"></a><strong>2.</strong> <strong>数据库和文件系统的关系</strong></h4><h5 id="2-1-表在文件系统中的表示"><a href="#2-1-表在文件系统中的表示" class="headerlink" title="2.1 表在文件系统中的表示"></a><strong>2.1</strong> <strong>表在文件系统中的表示</strong></h5><h6 id="2-3-1-InnoDB存储引擎模式"><a href="#2-3-1-InnoDB存储引擎模式" class="headerlink" title="2.3.1 InnoDB存储引擎模式"></a><strong>2.3.1 InnoDB存储引擎模式</strong></h6><p><strong>1.</strong> <strong>表结构</strong></p><p>为了保存表结构，<code>InnoDB</code>在 <code>数据目录</code>下对应的数据库子目录下创建了一个专门用于 <code>描述表结构的文件</code></p><pre class="line-numbers language-none"><code class="language-none">表名.frm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>表中数据和索引</strong></p><p><strong>① 系统表空间（system tablespace）</strong></p><p>默认情况下，InnoDB会在数据目录下创建一个名为 <code>ibdata1</code>、大小为 <code>12M</code>的 <code>自拓展</code>文件，这个文件就是对应的 <code>系统表空间</code>在文件系统上的表示。</p><p><strong>② 独立表空间(file-per-table tablespace)</strong></p><p>在MySQL5.6.6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为 <code>每一个表建立一个独立表空间</code>，也就是说我们创建了多少个表，就有多少个独立表空间。使用 <code>独立表空间</code>来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同。</p><pre class="line-numbers language-none"><code class="language-none">表名.ibd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>MySQL8.0中不再单独提供 <code>表名.frm</code>，而是合并在 <code>表名.ibd</code>文件中。</p></blockquote><p><strong>③ 系统表空间与独立表空间的设置</strong></p><p>我们可以自己指定使用 <code>系统表空间</code>还是 <code>独立表空间</code>来存储数据，这个功能由启动参数 <code>innodb_file_per_table</code>控制</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">server</span><span class="token punctuation">]</span></span> <span class="token key attr-name">innodb_file_per_table</span><span class="token punctuation">=</span><span class="token value attr-value">0 # 0：代表使用系统表空间； 1：代表使用独立表空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>④ 其他类型的表空间</strong></p><p>随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用表空间（general tablespace）、临时表空间（temporary tablespace）等。</p><h6 id="2-3-2-MyISAM存储引擎模式"><a href="#2-3-2-MyISAM存储引擎模式" class="headerlink" title="2.3.2 MyISAM存储引擎模式"></a><strong>2.3.2 MyISAM存储引擎模式</strong></h6><p><strong>1.</strong> <strong>表结构</strong></p><p>在存储表结构方面， MyISAM 和 InnoDB 一样，也是在 <code>数据目录</code>下对应的数据库子目录下创建了一个专门用于描述表结构的文件</p><pre class="line-numbers language-none"><code class="language-none">表名.frm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>表中数据和索引</strong></p><p>在MyISAM中的索引全部都是 <code>二级索引</code>，该存储引擎的 <code>数据和索引是分开存放</code>的。所以在文件系统中也是使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。</p><pre class="line-numbers language-none"><code class="language-none">test.frm 存储表结构 #MySQL8.0 改为了 b.xxx.sditest.MYD 存储数据 (MYData) test.MYI 存储索引 (MYIndex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 尚硅谷学习笔记 </tag>
            
            <tag> Mysql高级篇 </tag>
            
            <tag> MySQL8的主要目录结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第01章 Linux下MySQL的安装与使用</title>
      <link href="/2023/03/01/%E7%AC%AC01%E7%AB%A0%20Linux%E4%B8%8BMySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/01/%E7%AC%AC01%E7%AB%A0%20Linux%E4%B8%8BMySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1-安装前说明"><a href="#1-安装前说明" class="headerlink" title="1. 安装前说明"></a><strong>1.</strong> <strong>安装前说明</strong></h4><h5 id="1-1-查看是否安装过MySQL"><a href="#1-1-查看是否安装过MySQL" class="headerlink" title="1.1 查看是否安装过MySQL"></a><strong>1.1</strong> <strong>查看是否安装过MySQL</strong></h5><ul><li>如果你是用rpm安装, 检查一下RPM PACKAGE：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> mysql <span class="token comment"># -i 忽略大小写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查mysql service：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><span id="more"></span><h5 id="1-2-MySQL的卸载"><a href="#1-2-MySQL的卸载" class="headerlink" title="1.2 MySQL的卸载"></a><strong>1.2 MySQL的卸载</strong></h5><p><strong>1.</strong> <strong>关闭</strong> <strong>mysql</strong> <strong>服务</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>查看当前</strong> <strong>mysql</strong> <strong>安装状况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> mysql<span class="token comment"># 或</span>yum list installed <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3.</strong> <strong>卸载上述命令查询出的已安装程序</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove mysql-xxx mysql-xxx mysql-xxx mysqk-xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>务必卸载干净，反复执行 <code>rpm -qa | grep -i mysql</code>确认是否有卸载残留</p><p><strong>4.</strong> <strong>删除</strong> <strong>mysql</strong> <strong>相关文件</strong></p><ul><li>查找相关文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除上述命令查找出的相关文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5.删除 my.cnf</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-MySQL的Linux版安装"><a href="#2-MySQL的Linux版安装" class="headerlink" title="2. MySQL的Linux版安装"></a><strong>2. MySQL的Linux版安装</strong></h4><h5 id="2-1-CentOS7下检查MySQL依赖"><a href="#2-1-CentOS7下检查MySQL依赖" class="headerlink" title="2.1 CentOS7下检查MySQL依赖"></a><strong>2.1 CentOS7下检查MySQL依赖</strong></h5><p><strong>1.</strong> <strong>检查/tmp临时目录权限（必不可少）</strong></p><p>由于mysql安装过程中，会通过mysql用户在/tmp目录下新建tmp_db文件，所以请给/tmp较大的权限。执行 ：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>安装前，检查依赖</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> libaio<span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-2-CentOS7下MySQL安装过程"><a href="#2-2-CentOS7下MySQL安装过程" class="headerlink" title="2.2 CentOS7下MySQL安装过程"></a><strong>2.2 CentOS7下MySQL安装过程</strong></h5><p><strong>1.</strong> <strong>将安装程序拷贝到/opt目录下</strong></p><p>在mysql的安装文件目录下执行：（必须按照顺序执行）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-common-8.0.25-1.el7.x86_64.rpm <span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-client-plugins-8.0.25-1.el7.x86_64.rpm <span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-libs-8.0.25-1.el7.x86_64.rpm <span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-client-8.0.25-1.el7.x86_64.rpm <span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-server-8.0.25-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>rpm</code>是Redhat Package Manage缩写，通过RPM的管理，用户可以把源代码包装成以rpm为扩展名的文件形式，易于安装。</li><li><code>-i</code>, –install 安装软件包</li><li><code>-v</code>, –verbose 提供更多的详细信息输出</li><li><code>-h</code>, –hash 软件包安装的时候列出哈希标记 (和 -v 一起使用效果更好)，展示进度条</li></ul><blockquote><p>若存在mariadb-libs问题，则执行<strong>yum remove mysql-libs</strong>即可</p></blockquote><h5 id="2-3-查看MySQL版本"><a href="#2-3-查看MySQL版本" class="headerlink" title="2.3 查看MySQL版本"></a><strong>2.3</strong> <strong>查看MySQL版本</strong></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">--version</span> <span class="token comment">#或</span>mysqladmin <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-4-服务的初始化"><a href="#2-4-服务的初始化" class="headerlink" title="2.4 服务的初始化"></a><strong>2.4</strong> <strong>服务的初始化</strong></h5><p>为了保证数据库目录与文件的所有者为 mysql 登录用户，如果你是以 root 身份运行 mysql 服务，需要执行下面的命令初始化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqld <span class="token parameter variable">--initialize</span> <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明： –initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将 <code>该密码标记为过期</code>，登录后你需要设置一个新的密码。生成的 <code>临时密码</code>会往日志中记录一份。</p><p>查看密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>root@localhost: 后面就是初始化的密码</p><h5 id="2-5-启动MySQL，查看状态"><a href="#2-5-启动MySQL，查看状态" class="headerlink" title="2.5 启动MySQL，查看状态"></a><strong>2.5</strong> <strong>启动MySQL，查看状态</strong></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#加不加.service后缀都可以 </span>启动：systemctl start mysqld.service 关闭：systemctl stop mysqld.service 重启：systemctl restart mysqld.service 查看状态：systemctl status mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-6-查看MySQL服务是否自启动"><a href="#2-6-查看MySQL服务是否自启动" class="headerlink" title="2.6 查看MySQL服务是否自启动"></a><strong>2.6</strong> <strong>查看MySQL服务是否自启动</strong></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl list-unit-files<span class="token operator">|</span><span class="token function">grep</span> mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如不是enabled可以运行如下命令设置自启动</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果希望不进行自启动，运行如下命令设置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl disable mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-MySQL登录"><a href="#3-MySQL登录" class="headerlink" title="3. MySQL登录"></a><strong>3. MySQL登录</strong></h4><h5 id="3-1-首次登录"><a href="#3-1-首次登录" class="headerlink" title="3.1 首次登录"></a><strong>3.1</strong> <strong>首次登录</strong></h5><p>通过 <code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p><h5 id="3-2-修改密码"><a href="#3-2-修改密码" class="headerlink" title="3.2 修改密码"></a><strong>3.2</strong> <strong>修改密码</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-3-设置远程登录"><a href="#3-3-设置远程登录" class="headerlink" title="3.3 设置远程登录"></a><strong>3.3</strong> <strong>设置远程登录</strong></h5><p><strong>1.</strong> <strong>确认网络</strong></p><p>1.在远程机器上使用ping ip地址 <code>保证网络畅通</code></p><p>2.在远程机器上使用telnet命令 <code>保证端口号开放</code>访问</p><p><strong>2.</strong> <strong>关闭防火墙或开放端口</strong></p><p><strong>方式一：关闭防火墙</strong></p><ul><li>CentOS6 ：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> iptables stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>CentOS7：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#开启防火墙</span>systemctl start firewalld.service<span class="token comment">#查看防火墙状态</span>systemctl status firewalld.service<span class="token comment">#关闭防火墙</span>systemctl stop firewalld.service<span class="token comment">#设置开机启用防火墙 </span>systemctl <span class="token builtin class-name">enable</span> firewalld.service <span class="token comment">#设置开机禁用防火墙 </span>systemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二：开放端口</strong></p><ul><li>查看开放的端口号</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置开放的端口号</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --add-service<span class="token operator">=</span>http <span class="token parameter variable">--permanent</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>重启防火墙</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-Linux下修改配置"><a href="#4-Linux下修改配置" class="headerlink" title="4. Linux下修改配置"></a><strong>4. Linux下修改配置</strong></h4><ul><li>修改允许远程登陆</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use mysql;select Host,User from user;update user set host = '%' where user ='root';flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>%</code>是个 通配符 ，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果 <code>Host=%</code>，表示所有IP都有连接权限。</p><p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p></blockquote><p>配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</p><p><strong>解决方法一：</strong>升级远程连接工具版本</p><p><strong>解决方法二：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'abc123';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-字符集的相关操作"><a href="#5-字符集的相关操作" class="headerlink" title="5. 字符集的相关操作"></a><strong>5.</strong> <strong>字符集的相关操作</strong></h4><h5 id="5-1-各级别的字符集"><a href="#5-1-各级别的字符集" class="headerlink" title="5.1 各级别的字符集"></a><strong>5.1</strong> <strong>各级别的字符集</strong></h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like 'character%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>character_set_server：服务器级别的字符集</li><li>character_set_database：当前数据库的字符集</li><li>character_set_client：服务器解码请求时使用的字符集</li><li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li><li>character_set_results：服务器向客户端返回数据时使用的字符集</li></ul><p><strong>小结</strong></p><ul><li>如果 <code>创建或修改列</code>时没有显式的指定字符集和比较规则，则该列 <code>默认用表的</code>字符集和比较规则</li><li>如果 <code>创建表时</code>没有显式的指定字符集和比较规则，则该表 <code>默认用数据库的</code>字符集和比较规则</li><li>如果 <code>创建数据库时</code>没有显式的指定字符集和比较规则，则该数据库 <code>默认用服务器的</code>字符集和比较规则</li></ul><h5 id="5-2-请求到响应过程中字符集的变化"><a href="#5-2-请求到响应过程中字符集的变化" class="headerlink" title="5.2 请求到响应过程中字符集的变化"></a><strong>5.2</strong> <strong>请求到响应过程中字符集的变化</strong></h5><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TBA<span class="token text string">(客户端)</span> <span class="token arrow operator">--&gt;</span> <span class="token label property">|"使用操作系统的字符集编码请求字符串"|</span> B<span class="token text string">(从character_set_client转换为character_set_connection)</span>B <span class="token arrow operator">--&gt;</span> C<span class="token text string">(从character_set_connection转换为具体的列使用的字符集)</span>C <span class="token arrow operator">--&gt;</span> D<span class="token text string">(将查询结果从具体的列上使用的字符集转换为character_set_results)</span>D <span class="token arrow operator">--&gt;</span> <span class="token label property">|"使用操作系统的字符集解码响应的字符串"|</span> A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 尚硅谷学习笔记 </tag>
            
            <tag> Mysql安装与登录 </tag>
            
            <tag> Mysql高级篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>==和equals()的区别</title>
      <link href="/2023/02/28/==%E5%92%8Cequals()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/02/28/==%E5%92%8Cequals()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="x3D-x3D-和equals-有什么区别？"><a href="#x3D-x3D-和equals-有什么区别？" class="headerlink" title="==和equals()有什么区别？"></a>==和equals()有什么区别？</h1><p><strong>Object类提供的equals()方法，默认是用==来进行比较的，也就是说只有两个对象是同一个对象时，才能返回相等的结果,在实际使用中，一般会重写定义的Class的equals方法</strong><br>以下是Object中的equals()方法实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用-x3D-x3D-进行比较"><a href="#使用-x3D-x3D-进行比较" class="headerlink" title="使用==进行比较"></a>使用==进行比较</h2><ul><li>作用于基本数据类型（byte,short,char,int,long,float,double,boolean）时比较他们之间的值是否相等；</li><li>作用于引用数据类型时，是比较两个对象的内存地址是否相同，既判断它们是否为同一个对象；<br>引用数据类型，比较的是他们在堆内存地址是否相等。每新new一个引用类型的对象，会重新分配堆内存空间，使用==比较返回false;</li></ul><h2 id="使用equals-方法进行比较"><a href="#使用equals-方法进行比较" class="headerlink" title="使用equals()方法进行比较"></a>使用equals()方法进行比较</h2><ul><li>没有重写时，Object默认用==实现，既比较两个对象的内存地址是否相同;</li><li>进行重写后，一般会按照对象中的内容来进行比较，若两个对象内容相同则认为对象相同，否则认为对象不等,比如:String类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span> aString<span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">COMPACT_STRINGS</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>coder <span class="token operator">==</span> aString<span class="token punctuation">.</span>coder<span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringLatin1</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> aString<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题:"></a>例题:</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a为一个引用</span>        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//b为另一个引用，对象的内容一样</span>        <span class="token class-name">String</span> aa <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span> <span class="token comment">//放在常量池中</span>        <span class="token class-name">String</span> bb <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span> <span class="token comment">//从常量池中查找</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aa <span class="token operator">==</span> bb<span class="token punctuation">)</span> <span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa==bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment">//false 非同一对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a==b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a.equals(b)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">22</span> <span class="token operator">==</span> <span class="token number">22.0</span><span class="token punctuation">)</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> aa<span class="token punctuation">)</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a == aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a.equals(aa)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>补充:<br>当创建String类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个String对象</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String的不可变性 </tag>
            
            <tag> 地址和内容 </tag>
            
            <tag> Java </tag>
            
            <tag> ==和equals() </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
